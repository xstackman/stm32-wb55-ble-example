
stm32-wb55-ble-sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc64  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac4  0800cda4  0800cda4  0001cda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e868  0800e868  0001e868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e870  0800e870  0001e870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000008  0800e878  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000090  0800e900  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000c8  0800e935  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001648  200000dc  0800e946  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001724  0800e946  00021724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800e946  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002d087  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000650d  00000000  00000000  0004db61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002850  00000000  00000000  00054070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001ece  00000000  00000000  000568c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002ca9d  00000000  00000000  0005878e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002bc3b  00000000  00000000  0008522b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000f99fd  00000000  00000000  000b0e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b084  00000000  00000000  001aa864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  001b58e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000dc 	.word	0x200000dc
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cd8c 	.word	0x0800cd8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e0 	.word	0x200000e0
 800017c:	0800cd8c 	.word	0x0800cd8c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800080c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000810:	f000 b970 	b.w	8000af4 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	460f      	mov	r7, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4694      	mov	ip, r2
 8000840:	d965      	bls.n	800090e <__udivmoddi4+0xe2>
 8000842:	fab2 f382 	clz	r3, r2
 8000846:	b143      	cbz	r3, 800085a <__udivmoddi4+0x2e>
 8000848:	fa02 fc03 	lsl.w	ip, r2, r3
 800084c:	f1c3 0220 	rsb	r2, r3, #32
 8000850:	409f      	lsls	r7, r3
 8000852:	fa20 f202 	lsr.w	r2, r0, r2
 8000856:	4317      	orrs	r7, r2
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085e:	fa1f f58c 	uxth.w	r5, ip
 8000862:	fbb7 f1fe 	udiv	r1, r7, lr
 8000866:	0c22      	lsrs	r2, r4, #16
 8000868:	fb0e 7711 	mls	r7, lr, r1, r7
 800086c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000870:	fb01 f005 	mul.w	r0, r1, r5
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x62>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000880:	f080 811c 	bcs.w	8000abc <__udivmoddi4+0x290>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8119 	bls.w	8000abc <__udivmoddi4+0x290>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	b2a4      	uxth	r4, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089e:	fb00 f505 	mul.w	r5, r0, r5
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x90>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008ae:	f080 8107 	bcs.w	8000ac0 <__udivmoddi4+0x294>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8104 	bls.w	8000ac0 <__udivmoddi4+0x294>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xbc>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ed 	beq.w	8000ab6 <__udivmoddi4+0x28a>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d149      	bne.n	8000984 <__udivmoddi4+0x158>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xce>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2be>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4617      	mov	r7, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000908:	e9c6 4700 	strd	r4, r7, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa2>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xe6>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8090 	bne.w	8000a3c <__udivmoddi4+0x210>
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2101      	movs	r1, #1
 8000928:	fbb2 f5f7 	udiv	r5, r2, r7
 800092c:	fb07 2015 	mls	r0, r7, r5, r2
 8000930:	0c22      	lsrs	r2, r4, #16
 8000932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000936:	fb0e f005 	mul.w	r0, lr, r5
 800093a:	4290      	cmp	r0, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x124>
 800093e:	eb1c 0202 	adds.w	r2, ip, r2
 8000942:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x122>
 8000948:	4290      	cmp	r0, r2
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2b8>
 800094e:	4645      	mov	r5, r8
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb2 f0f7 	udiv	r0, r2, r7
 8000958:	fb07 2210 	mls	r2, r7, r0, r2
 800095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x14e>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x14c>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2c2>
 8000978:	4610      	mov	r0, r2
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000982:	e79f      	b.n	80008c4 <__udivmoddi4+0x98>
 8000984:	f1c1 0720 	rsb	r7, r1, #32
 8000988:	408b      	lsls	r3, r1
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa05 f401 	lsl.w	r4, r5, r1
 8000996:	fa20 f307 	lsr.w	r3, r0, r7
 800099a:	40fd      	lsrs	r5, r7
 800099c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a0:	4323      	orrs	r3, r4
 80009a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	fb09 5518 	mls	r5, r9, r8, r5
 80009ae:	0c1c      	lsrs	r4, r3, #16
 80009b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009b4:	fb08 f50e 	mul.w	r5, r8, lr
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	fa02 f201 	lsl.w	r2, r2, r1
 80009be:	fa00 f001 	lsl.w	r0, r0, r1
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b0>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4464      	add	r4, ip
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	b29d      	uxth	r5, r3
 80009e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e4:	fb09 4413 	mls	r4, r9, r3, r4
 80009e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1da>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2ac>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2ac>
 8000a02:	3b02      	subs	r3, #2
 8000a04:	4464      	add	r4, ip
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a0e:	eba4 040e 	sub.w	r4, r4, lr
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46ae      	mov	lr, r5
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x29c>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x298>
 8000a1c:	b156      	cbz	r6, 8000a34 <__udivmoddi4+0x208>
 8000a1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2a:	40ca      	lsrs	r2, r1
 8000a2c:	40cc      	lsrs	r4, r1
 8000a2e:	4317      	orrs	r7, r2
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	f1c3 0120 	rsb	r1, r3, #32
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	fa20 f201 	lsr.w	r2, r0, r1
 8000a48:	fa25 f101 	lsr.w	r1, r5, r1
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a60:	0c11      	lsrs	r1, r2, #16
 8000a62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a66:	fb00 f50e 	mul.w	r5, r0, lr
 8000a6a:	428d      	cmp	r5, r1
 8000a6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x258>
 8000a72:	eb1c 0101 	adds.w	r1, ip, r1
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000a7c:	428d      	cmp	r5, r1
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1b49      	subs	r1, r1, r5
 8000a86:	b292      	uxth	r2, r2
 8000a88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a94:	fb05 f10e 	mul.w	r1, r5, lr
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x282>
 8000a9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aaa:	3d02      	subs	r5, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a52      	subs	r2, r2, r1
 8000ab0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0xfc>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e708      	b.n	80008ce <__udivmoddi4+0xa2>
 8000abc:	4639      	mov	r1, r7
 8000abe:	e6e6      	b.n	800088e <__udivmoddi4+0x62>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	e6fb      	b.n	80008bc <__udivmoddi4+0x90>
 8000ac4:	4548      	cmp	r0, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f0>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f0>
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x282>
 8000ad8:	462b      	mov	r3, r5
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1da>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x258>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b0>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x124>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xd8>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x14e>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b8e:	f002 f82d 	bl	8002bec <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b92:	f002 f831 	bl	8002bf8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f7ff ffad 	bl	8000af8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b9e:	f008 fa11 	bl	8008fc4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000ba2:	f000 f821 	bl	8000be8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ba6:	f000 f8c1 	bl	8000d2c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <APPD_EnableCPU2+0x34>)
 8000bb8:	1d3c      	adds	r4, r7, #4
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc4:	c403      	stmia	r4!, {r0, r1}
 8000bc6:	8022      	strh	r2, [r4, #0]
 8000bc8:	3402      	adds	r4, #2
 8000bca:	0c13      	lsrs	r3, r2, #16
 8000bcc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bce:	f008 f90d 	bl	8008dec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f007 fb9e 	bl	8008316 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	0800cda4 	.word	0x0800cda4

08000be8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
 8000c0c:	e036      	b.n	8000c7c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d02c      	beq.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01b      	beq.n	8000c62 <APPD_SetCPU2GpioConfig+0x7a>
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d821      	bhi.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
 8000c30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c34:	d003      	beq.n	8000c3e <APPD_SetCPU2GpioConfig+0x56>
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d009      	beq.n	8000c50 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c3c:	e01a      	b.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	889a      	ldrh	r2, [r3, #4]
 8000c48:	8bbb      	ldrh	r3, [r7, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c4e:	e012      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	889a      	ldrh	r2, [r3, #4]
 8000c5a:	8b7b      	ldrh	r3, [r7, #26]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	837b      	strh	r3, [r7, #26]
          break;
 8000c60:	e009      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4413      	add	r3, r2
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	833b      	strh	r3, [r7, #24]
          break;
 8000c72:	e000      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c74:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	77fb      	strb	r3, [r7, #31]
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	2b25      	cmp	r3, #37	; 0x25
 8000c80:	d9c5      	bls.n	8000c0e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c94:	8bbb      	ldrh	r3, [r7, #28]
 8000c96:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff41 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff57 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f002 fc76 	bl	800359c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cb0:	8bbb      	ldrh	r3, [r7, #28]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f002 fddf 	bl	800387c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cbe:	8b7b      	ldrh	r3, [r7, #26]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d012      	beq.n	8000cea <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cc4:	8b7b      	ldrh	r3, [r7, #26]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ff29 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff ff3f 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f002 fc5f 	bl	800359c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000ce6:	f002 fdc9 	bl	800387c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cea:	8b3b      	ldrh	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cf0:	8b3b      	ldrh	r3, [r7, #24]
 8000cf2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff ff13 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ff29 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f002 fc49 	bl	800359c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d12:	f002 fdb3 	bl	800387c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
}
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0800e4f4 	.word	0x0800e4f4
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000400 	.word	0x48000400

08000d2c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d30:	bf00      	nop
}
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
#ifdef CFG_DEBUG_TRACE_UART
if (CFG_DEBUG_TRACE_UART == hw_lpuart1)
{
#if(CFG_HW_LPUART1_ENABLED == 1)
    MX_LPUART1_UART_Init();
 8000d3e:	f001 fafd 	bl	800233c <MX_LPUART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d42:	bf00      	nop
}
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d54:	897a      	ldrh	r2, [r7, #10]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 f998 	bl	8002090 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	f023 0207 	bic.w	r2, r3, #7
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58000400 	.word	0x58000400

08000d94 <LL_EXTI_EnableIT_32_63>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000800 	.word	0x58000800

08000dbc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	cafecafe 	.word	0xcafecafe

08000df8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <LL_DBGMCU_GetDeviceID+0x18>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e0042000 	.word	0xe0042000

08000e3c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	b29b      	uxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e0042000 	.word	0xe0042000

08000e58 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	22ca      	movs	r2, #202	; 0xca
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2253      	movs	r2, #83	; 0x53
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 0207 	bic.w	r2, r3, #7
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <MX_APPE_Config+0x18>)
 8000ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ec4:	f000 f826 	bl	8000f14 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ec8:	f000 f82b 	bl	8000f22 <Config_HSE>

  return;
 8000ecc:	bf00      	nop
}
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58004000 	.word	0x58004000

08000ed4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ed8:	f000 f837 	bl	8000f4a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000edc:	f000 f850 	bl	8000f80 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <MX_APPE_Init+0x20>)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fee2 	bl	8001cac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ee8:	f000 f858 	bl	8000f9c <appe_Tl_Init>
   * From now, the application is waiting for the ready event (VS_HCI_C2_Ready)
   * received on the system channel before starting the Stack
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */
  APPD_Init();
 8000eec:	f7ff fe4d 	bl	8000b8a <APPD_Init>
/* USER CODE END APPE_Init_2 */

   return;
 8000ef0:	bf00      	nop
}
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200002cc 	.word	0x200002cc

08000ef8 <Init_Smps>:

void Init_Smps(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000efc:	bf00      	nop
}
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <Init_Exti>:

void Init_Exti(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000f0a:	2050      	movs	r0, #80	; 0x50
 8000f0c:	f7ff ff42 	bl	8000d94 <LL_EXTI_EnableIT_32_63>

  return;
 8000f10:	bf00      	nop
}
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f18:	bf00      	nop
}
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f008 f8c9 	bl	80090c0 <OTP_Read>
 8000f2e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d005      	beq.n	8000f42 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	799b      	ldrb	r3, [r3, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff3e 	bl	8000dbc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
}
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <System_Init>:

static void System_Init(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f4e:	f7ff ffd3 	bl	8000ef8 <Init_Smps>

  Init_Exti();
 8000f52:	f7ff ffd8 	bl	8000f06 <Init_Exti>

  Init_Rtc();
 8000f56:	f000 f803 	bl	8000f60 <Init_Rtc>

  return;
 8000f5a:	bf00      	nop
}
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <Init_Rtc+0x1c>)
 8000f66:	f7ff ff84 	bl	8000e72 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <Init_Rtc+0x1c>)
 8000f6e:	f7ff ff90 	bl	8000e92 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <Init_Rtc+0x1c>)
 8000f74:	f7ff ff70 	bl	8000e58 <LL_RTC_EnableWriteProtection>

  return;
 8000f78:	bf00      	nop
}
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40002800 	.word	0x40002800

08000f80 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f88:	f7ff ff36 	bl	8000df8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f8c:	f00a fc7c 	bl	800b888 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff fee9 	bl	8000d68 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f96:	bf00      	nop
}
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000fa2:	f007 fd6d 	bl	8008a80 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <appe_Tl_Init+0x50>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2008      	movs	r0, #8
 8000fac:	f00a fdaa 	bl	800bb04 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <appe_Tl_Init+0x54>)
 8000fb2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <appe_Tl_Init+0x58>)
 8000fb6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <appe_Tl_Init+0x5c>)
 8000fbe:	f007 fc21 	bl	8008804 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <appe_Tl_Init+0x60>)
 8000fc4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <appe_Tl_Init+0x64>)
 8000fc8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <appe_Tl_Init+0x68>)
 8000fcc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fce:	f240 533c 	movw	r3, #1340	; 0x53c
 8000fd2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f007 fe93 	bl	8008d04 <TL_MM_Init>

  TL_Enable();
 8000fde:	f007 fd49 	bl	8008a74 <TL_Enable>

  return;
 8000fe2:	bf00      	nop
}
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	0800883d 	.word	0x0800883d
 8000ff0:	20030734 	.word	0x20030734
 8000ff4:	08001009 	.word	0x08001009
 8000ff8:	08001021 	.word	0x08001021
 8000ffc:	2003094c 	.word	0x2003094c
 8001000:	20030840 	.word	0x20030840
 8001004:	200301f8 	.word	0x200301f8

08001008 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001012:	bf00      	nop
}
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	330b      	adds	r3, #11
 800102e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800103a:	2b07      	cmp	r3, #7
 800103c:	f200 80d0 	bhi.w	80011e0 <APPE_SysUserEvtRx+0x1c0>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <APPE_SysUserEvtRx+0x28>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001069 	.word	0x08001069
 800104c:	080010fb 	.word	0x080010fb
 8001050:	0800111d 	.word	0x0800111d
 8001054:	080011e1 	.word	0x080011e1
 8001058:	08001161 	.word	0x08001161
 800105c:	08001185 	.word	0x08001185
 8001060:	080011a1 	.word	0x080011a1
 8001064:	080011c5 	.word	0x080011c5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4618      	mov	r0, r3
 800106e:	f007 f97f 	bl	8008370 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001072:	485e      	ldr	r0, [pc, #376]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001074:	f007 ff46 	bl	8008f04 <DbgTraceGetFileName>
 8001078:	4601      	mov	r1, r0
 800107a:	f240 136b 	movw	r3, #363	; 0x16b
 800107e:	4a5c      	ldr	r2, [pc, #368]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001080:	485c      	ldr	r0, [pc, #368]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001082:	f00a ff43 	bl	800bf0c <iprintf>
 8001086:	7b3b      	ldrb	r3, [r7, #12]
 8001088:	4619      	mov	r1, r3
 800108a:	7b7b      	ldrb	r3, [r7, #13]
 800108c:	461a      	mov	r2, r3
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	4859      	ldr	r0, [pc, #356]	; (80011f8 <APPE_SysUserEvtRx+0x1d8>)
 8001092:	f00a ff3b 	bl	800bf0c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001096:	4855      	ldr	r0, [pc, #340]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001098:	f007 ff34 	bl	8008f04 <DbgTraceGetFileName>
 800109c:	4601      	mov	r1, r0
 800109e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80010a2:	4a53      	ldr	r2, [pc, #332]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010a4:	4853      	ldr	r0, [pc, #332]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010a6:	f00a ff31 	bl	800bf0c <iprintf>
 80010aa:	7c3b      	ldrb	r3, [r7, #16]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4853      	ldr	r0, [pc, #332]	; (80011fc <APPE_SysUserEvtRx+0x1dc>)
 80010b0:	f00a ff2c 	bl	800bf0c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80010b4:	484d      	ldr	r0, [pc, #308]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010b6:	f007 ff25 	bl	8008f04 <DbgTraceGetFileName>
 80010ba:	4601      	mov	r1, r0
 80010bc:	f240 136d 	movw	r3, #365	; 0x16d
 80010c0:	4a4b      	ldr	r2, [pc, #300]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010c2:	484c      	ldr	r0, [pc, #304]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010c4:	f00a ff22 	bl	800bf0c <iprintf>
 80010c8:	7dbb      	ldrb	r3, [r7, #22]
 80010ca:	4619      	mov	r1, r3
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	461a      	mov	r2, r3
 80010d0:	7e3b      	ldrb	r3, [r7, #24]
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <APPE_SysUserEvtRx+0x1e0>)
 80010d4:	f00a ff1a 	bl	800bf0c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010da:	f007 ff13 	bl	8008f04 <DbgTraceGetFileName>
 80010de:	4601      	mov	r1, r0
 80010e0:	f240 136f 	movw	r3, #367	; 0x16f
 80010e4:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80010e6:	4843      	ldr	r0, [pc, #268]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80010e8:	f00a ff10 	bl	800bf0c <iprintf>
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <APPE_SysUserEvtRx+0x1e4>)
 80010ee:	f00a ff0d 	bl	800bf0c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f8e0 	bl	80012b8 <APPE_SysEvtReadyProcessing>
    break;
 80010f8:	e073      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80010fa:	483c      	ldr	r0, [pc, #240]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80010fc:	f007 ff02 	bl	8008f04 <DbgTraceGetFileName>
 8001100:	4601      	mov	r1, r0
 8001102:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001106:	4a3a      	ldr	r2, [pc, #232]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001108:	483a      	ldr	r0, [pc, #232]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 800110a:	f00a feff 	bl	800bf0c <iprintf>
 800110e:	483e      	ldr	r0, [pc, #248]	; (8001208 <APPE_SysUserEvtRx+0x1e8>)
 8001110:	f00a fefc 	bl	800bf0c <iprintf>
    APPE_SysEvtError(pPayload);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f885 	bl	8001224 <APPE_SysEvtError>
    break;
 800111a:	e062      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800111c:	4833      	ldr	r0, [pc, #204]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 800111e:	f007 fef1 	bl	8008f04 <DbgTraceGetFileName>
 8001122:	4601      	mov	r1, r0
 8001124:	f240 1379 	movw	r3, #377	; 0x179
 8001128:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 800112a:	4832      	ldr	r0, [pc, #200]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 800112c:	f00a feee 	bl	800bf0c <iprintf>
 8001130:	4836      	ldr	r0, [pc, #216]	; (800120c <APPE_SysUserEvtRx+0x1ec>)
 8001132:	f00a ff59 	bl	800bfe8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001136:	482d      	ldr	r0, [pc, #180]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001138:	f007 fee4 	bl	8008f04 <DbgTraceGetFileName>
 800113c:	4601      	mov	r1, r0
 800113e:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001144:	482b      	ldr	r0, [pc, #172]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001146:	f00a fee1 	bl	800bf0c <iprintf>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3302      	adds	r3, #2
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3302      	adds	r3, #2
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	482d      	ldr	r0, [pc, #180]	; (8001210 <APPE_SysUserEvtRx+0x1f0>)
 800115a:	f00a fed7 	bl	800bf0c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800115e:	e040      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001160:	4822      	ldr	r0, [pc, #136]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001162:	f007 fecf 	bl	8008f04 <DbgTraceGetFileName>
 8001166:	4601      	mov	r1, r0
 8001168:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800116c:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 800116e:	4821      	ldr	r0, [pc, #132]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001170:	f00a fecc 	bl	800bf0c <iprintf>
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3302      	adds	r3, #2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4825      	ldr	r0, [pc, #148]	; (8001214 <APPE_SysUserEvtRx+0x1f4>)
 800117e:	f00a fec5 	bl	800bf0c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001182:	e02e      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001184:	4819      	ldr	r0, [pc, #100]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 8001186:	f007 febd 	bl	8008f04 <DbgTraceGetFileName>
 800118a:	4601      	mov	r1, r0
 800118c:	f240 1385 	movw	r3, #389	; 0x185
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 8001194:	f00a feba 	bl	800bf0c <iprintf>
 8001198:	481f      	ldr	r0, [pc, #124]	; (8001218 <APPE_SysUserEvtRx+0x1f8>)
 800119a:	f00a feb7 	bl	800bf0c <iprintf>
    break;
 800119e:	e020      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80011a2:	f007 feaf 	bl	8008f04 <DbgTraceGetFileName>
 80011a6:	4601      	mov	r1, r0
 80011a8:	f240 1389 	movw	r3, #393	; 0x189
 80011ac:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80011b0:	f00a feac 	bl	800bf0c <iprintf>
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3302      	adds	r3, #2
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4817      	ldr	r0, [pc, #92]	; (800121c <APPE_SysUserEvtRx+0x1fc>)
 80011be:	f00a fea5 	bl	800bf0c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80011c2:	e00e      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <APPE_SysUserEvtRx+0x1cc>)
 80011c6:	f007 fe9d 	bl	8008f04 <DbgTraceGetFileName>
 80011ca:	4601      	mov	r1, r0
 80011cc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <APPE_SysUserEvtRx+0x1d0>)
 80011d2:	4808      	ldr	r0, [pc, #32]	; (80011f4 <APPE_SysUserEvtRx+0x1d4>)
 80011d4:	f00a fe9a 	bl	800bf0c <iprintf>
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <APPE_SysUserEvtRx+0x200>)
 80011da:	f00a fe97 	bl	800bf0c <iprintf>
    break;
 80011de:	e000      	b.n	80011e2 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80011e0:	bf00      	nop
  }

  return;
 80011e2:	bf00      	nop
}
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	0800cdc0 	.word	0x0800cdc0
 80011f0:	0800e624 	.word	0x0800e624
 80011f4:	0800cdd8 	.word	0x0800cdd8
 80011f8:	0800cdec 	.word	0x0800cdec
 80011fc:	0800ce10 	.word	0x0800ce10
 8001200:	0800ce2c 	.word	0x0800ce2c
 8001204:	0800ce44 	.word	0x0800ce44
 8001208:	0800ce64 	.word	0x0800ce64
 800120c:	0800ce88 	.word	0x0800ce88
 8001210:	0800ced8 	.word	0x0800ced8
 8001214:	0800cf00 	.word	0x0800cf00
 8001218:	0800cf3c 	.word	0x0800cf3c
 800121c:	0800cf60 	.word	0x0800cf60
 8001220:	0800cf9c 	.word	0x0800cf9c

08001224 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	330b      	adds	r3, #11
 8001232:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3302      	adds	r3, #2
 8001238:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800123a:	4819      	ldr	r0, [pc, #100]	; (80012a0 <APPE_SysEvtError+0x7c>)
 800123c:	f007 fe62 	bl	8008f04 <DbgTraceGetFileName>
 8001240:	4601      	mov	r1, r0
 8001242:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <APPE_SysEvtError+0x80>)
 8001248:	4817      	ldr	r0, [pc, #92]	; (80012a8 <APPE_SysEvtError+0x84>)
 800124a:	f00a fe5f 	bl	800bf0c <iprintf>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4815      	ldr	r0, [pc, #84]	; (80012ac <APPE_SysEvtError+0x88>)
 8001256:	f00a fe59 	bl	800bf0c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10d      	bne.n	800127e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <APPE_SysEvtError+0x7c>)
 8001264:	f007 fe4e 	bl	8008f04 <DbgTraceGetFileName>
 8001268:	4601      	mov	r1, r0
 800126a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800126e:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <APPE_SysEvtError+0x80>)
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <APPE_SysEvtError+0x84>)
 8001272:	f00a fe4b 	bl	800bf0c <iprintf>
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <APPE_SysEvtError+0x8c>)
 8001278:	f00a feb6 	bl	800bfe8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800127c:	e00d      	b.n	800129a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <APPE_SysEvtError+0x7c>)
 8001280:	f007 fe40 	bl	8008f04 <DbgTraceGetFileName>
 8001284:	4601      	mov	r1, r0
 8001286:	f240 13af 	movw	r3, #431	; 0x1af
 800128a:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <APPE_SysEvtError+0x80>)
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <APPE_SysEvtError+0x84>)
 800128e:	f00a fe3d 	bl	800bf0c <iprintf>
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <APPE_SysEvtError+0x90>)
 8001294:	f00a fea8 	bl	800bfe8 <puts>
  return;
 8001298:	bf00      	nop
}
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0800cdc0 	.word	0x0800cdc0
 80012a4:	0800e638 	.word	0x0800e638
 80012a8:	0800cdd8 	.word	0x0800cdd8
 80012ac:	0800cfc0 	.word	0x0800cfc0
 80012b0:	0800cff0 	.word	0x0800cff0
 80012b4:	0800d02c 	.word	0x0800d02c

080012b8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	330b      	adds	r3, #11
 80012dc:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3302      	adds	r3, #2
 80012e2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d146      	bne.n	800137a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80012ec:	4836      	ldr	r0, [pc, #216]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 80012ee:	f007 fe09 	bl	8008f04 <DbgTraceGetFileName>
 80012f2:	4601      	mov	r1, r0
 80012f4:	f240 13c5 	movw	r3, #453	; 0x1c5
 80012f8:	4a34      	ldr	r2, [pc, #208]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 80012fa:	4835      	ldr	r0, [pc, #212]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 80012fc:	f00a fe06 	bl	800bf0c <iprintf>
 8001300:	4834      	ldr	r0, [pc, #208]	; (80013d4 <APPE_SysEvtReadyProcessing+0x11c>)
 8001302:	f00a fe71 	bl	800bfe8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001306:	f7ff fc53 	bl	8000bb0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800130a:	230f      	movs	r3, #15
 800130c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800130e:	237f      	movs	r3, #127	; 0x7f
 8001310:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001312:	f7ff fd93 	bl	8000e3c <LL_DBGMCU_GetRevisionID>
 8001316:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001318:	482b      	ldr	r0, [pc, #172]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 800131a:	f007 fdf3 	bl	8008f04 <DbgTraceGetFileName>
 800131e:	4601      	mov	r1, r0
 8001320:	f240 13dd 	movw	r3, #477	; 0x1dd
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 8001326:	482a      	ldr	r0, [pc, #168]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001328:	f00a fdf0 	bl	800bf0c <iprintf>
 800132c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800132e:	482a      	ldr	r0, [pc, #168]	; (80013d8 <APPE_SysEvtReadyProcessing+0x120>)
 8001330:	f00a fdec 	bl	800bf0c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	b29b      	uxth	r3, r3
 8001338:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800133a:	f7ff fd71 	bl	8000e20 <LL_DBGMCU_GetDeviceID>
 800133e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001340:	4821      	ldr	r0, [pc, #132]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 8001342:	f007 fddf 	bl	8008f04 <DbgTraceGetFileName>
 8001346:	4601      	mov	r1, r0
 8001348:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800134c:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001350:	f00a fddc 	bl	800bf0c <iprintf>
 8001354:	6a39      	ldr	r1, [r7, #32]
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <APPE_SysEvtReadyProcessing+0x124>)
 8001358:	f00a fdd8 	bl	800bf0c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	b29b      	uxth	r3, r3
 8001360:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4618      	mov	r0, r3
 8001368:	f006 ffec 	bl	8008344 <SHCI_C2_Config>

    APP_BLE_Init();
 800136c:	f008 fbb4 	bl	8009ad8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001370:	2100      	movs	r1, #0
 8001372:	2001      	movs	r0, #1
 8001374:	f00a fa9a 	bl	800b8ac <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001378:	e022      	b.n	80013c0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d110      	bne.n	80013a4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001382:	4811      	ldr	r0, [pc, #68]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 8001384:	f007 fdbe 	bl	8008f04 <DbgTraceGetFileName>
 8001388:	4601      	mov	r1, r0
 800138a:	f240 13ef 	movw	r3, #495	; 0x1ef
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 8001392:	f00a fdbb 	bl	800bf0c <iprintf>
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <APPE_SysEvtReadyProcessing+0x128>)
 8001398:	f00a fdb8 	bl	800bf0c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
  return;
 80013a2:	e00d      	b.n	80013c0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <APPE_SysEvtReadyProcessing+0x110>)
 80013a6:	f007 fdad 	bl	8008f04 <DbgTraceGetFileName>
 80013aa:	4601      	mov	r1, r0
 80013ac:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <APPE_SysEvtReadyProcessing+0x114>)
 80013b2:	4807      	ldr	r0, [pc, #28]	; (80013d0 <APPE_SysEvtReadyProcessing+0x118>)
 80013b4:	f00a fdaa 	bl	800bf0c <iprintf>
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <APPE_SysEvtReadyProcessing+0x12c>)
 80013ba:	f00a fda7 	bl	800bf0c <iprintf>
  return;
 80013be:	bf00      	nop
}
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	0800cdc0 	.word	0x0800cdc0
 80013cc:	0800e64c 	.word	0x0800e64c
 80013d0:	0800cdd8 	.word	0x0800cdd8
 80013d4:	0800d064 	.word	0x0800d064
 80013d8:	0800d080 	.word	0x0800d080
 80013dc:	0800d0a4 	.word	0x0800d0a4
 80013e0:	0800d0c4 	.word	0x0800d0c4
 80013e4:	0800d0f8 	.word	0x0800d0f8

080013e8 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f0:	f00a fa8c 	bl	800b90c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013fc:	bf00      	nop
}
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f00a fa7a 	bl	800b90c <UTIL_SEQ_Run>
  return;
 8001418:	bf00      	nop
}
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001428:	2100      	movs	r1, #0
 800142a:	2008      	movs	r0, #8
 800142c:	f00a fb8c 	bl	800bb48 <UTIL_SEQ_SetTask>
  return;
 8001430:	bf00      	nop
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001440:	2002      	movs	r0, #2
 8001442:	f00a fbed 	bl	800bc20 <UTIL_SEQ_SetEvt>
  return;
 8001446:	bf00      	nop
}
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001456:	2002      	movs	r0, #2
 8001458:	f00a fc02 	bl	800bc60 <UTIL_SEQ_WaitEvt>
  return;
 800145c:	bf00      	nop
}
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800146e:	88fb      	ldrh	r3, [r7, #6]
 8001470:	2b10      	cmp	r3, #16
 8001472:	d102      	bne.n	800147a <HAL_GPIO_EXTI_Callback+0x16>
  {
    case GPIO_PIN_4:
      APP_BLE_Key_Button1_Action();
 8001474:	f009 fa38 	bl	800a8e8 <APP_BLE_Key_Button1_Action>
      break;
 8001478:	e000      	b.n	800147c <HAL_GPIO_EXTI_Callback+0x18>
    default:
      break;
 800147a:	bf00      	nop
  }
  return;
 800147c:	bf00      	nop
}
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <LL_EXTI_EnableIT_0_31>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800148e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001492:	4905      	ldr	r1, [pc, #20]	; (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000800 	.word	0x58000800

080014ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	58000800 	.word	0x58000800

080014d0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <ReadRtcSsrValue+0x3c>)
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	b29b      	uxth	r3, r3
 80014dc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <ReadRtcSsrValue+0x3c>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80014e6:	e005      	b.n	80014f4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <ReadRtcSsrValue+0x3c>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1f5      	bne.n	80014e8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014fc:	683b      	ldr	r3, [r7, #0]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40002800 	.word	0x40002800

08001510 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	491d      	ldr	r1, [pc, #116]	; (8001598 <LinkTimerAfter+0x88>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3315      	adds	r3, #21
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d009      	beq.n	800154e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	4916      	ldr	r1, [pc, #88]	; (8001598 <LinkTimerAfter+0x88>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3314      	adds	r3, #20
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4911      	ldr	r1, [pc, #68]	; (8001598 <LinkTimerAfter+0x88>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3315      	adds	r3, #21
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <LinkTimerAfter+0x88>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3314      	adds	r3, #20
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	4907      	ldr	r1, [pc, #28]	; (8001598 <LinkTimerAfter+0x88>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3315      	adds	r3, #21
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	701a      	strb	r2, [r3, #0]

  return;
 800158a:	bf00      	nop
}
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200000f8 	.word	0x200000f8

0800159c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <LinkTimerBefore+0xb8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d032      	beq.n	800161e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	4927      	ldr	r1, [pc, #156]	; (8001658 <LinkTimerBefore+0xbc>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3314      	adds	r3, #20
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	4922      	ldr	r1, [pc, #136]	; (8001658 <LinkTimerBefore+0xbc>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3315      	adds	r3, #21
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	491d      	ldr	r1, [pc, #116]	; (8001658 <LinkTimerBefore+0xbc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3315      	adds	r3, #21
 80015f0:	79ba      	ldrb	r2, [r7, #6]
 80015f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	4918      	ldr	r1, [pc, #96]	; (8001658 <LinkTimerBefore+0xbc>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3314      	adds	r3, #20
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	4913      	ldr	r1, [pc, #76]	; (8001658 <LinkTimerBefore+0xbc>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3314      	adds	r3, #20
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800161c:	e014      	b.n	8001648 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	490d      	ldr	r1, [pc, #52]	; (8001658 <LinkTimerBefore+0xbc>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3315      	adds	r3, #21
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001632:	79ba      	ldrb	r2, [r7, #6]
 8001634:	4908      	ldr	r1, [pc, #32]	; (8001658 <LinkTimerBefore+0xbc>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3314      	adds	r3, #20
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	701a      	strb	r2, [r3, #0]
  return;
 8001646:	bf00      	nop
}
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000188 	.word	0x20000188
 8001658:	200000f8 	.word	0x200000f8

0800165c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001666:	4b4e      	ldr	r3, [pc, #312]	; (80017a0 <linkTimer+0x144>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b06      	cmp	r3, #6
 800166e:	d118      	bne.n	80016a2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <linkTimer+0x144>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <linkTimer+0x148>)
 8001678:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <linkTimer+0x144>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	4949      	ldr	r1, [pc, #292]	; (80017a8 <linkTimer+0x14c>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3315      	adds	r3, #21
 8001690:	2206      	movs	r2, #6
 8001692:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001694:	4b45      	ldr	r3, [pc, #276]	; (80017ac <linkTimer+0x150>)
 8001696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800169a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	81fb      	strh	r3, [r7, #14]
 80016a0:	e078      	b.n	8001794 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016a2:	f000 f909 	bl	80018b8 <ReturnTimeElapsed>
 80016a6:	4603      	mov	r3, r0
 80016a8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	493e      	ldr	r1, [pc, #248]	; (80017a8 <linkTimer+0x14c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3308      	adds	r3, #8
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4419      	add	r1, r3
 80016c2:	4839      	ldr	r0, [pc, #228]	; (80017a8 <linkTimer+0x14c>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4403      	add	r3, r0
 80016ce:	3308      	adds	r3, #8
 80016d0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4934      	ldr	r1, [pc, #208]	; (80017a8 <linkTimer+0x14c>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3308      	adds	r3, #8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <linkTimer+0x144>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4a2e      	ldr	r2, [pc, #184]	; (80017a8 <linkTimer+0x14c>)
 80016f0:	460b      	mov	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d337      	bcc.n	8001774 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001704:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800170a:	7b7a      	ldrb	r2, [r7, #13]
 800170c:	4926      	ldr	r1, [pc, #152]	; (80017a8 <linkTimer+0x14c>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3315      	adds	r3, #21
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800171e:	e013      	b.n	8001748 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001720:	7b7a      	ldrb	r2, [r7, #13]
 8001722:	4921      	ldr	r1, [pc, #132]	; (80017a8 <linkTimer+0x14c>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3315      	adds	r3, #21
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001734:	7b7a      	ldrb	r2, [r7, #13]
 8001736:	491c      	ldr	r1, [pc, #112]	; (80017a8 <linkTimer+0x14c>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3315      	adds	r3, #21
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	2b06      	cmp	r3, #6
 800174c:	d00b      	beq.n	8001766 <linkTimer+0x10a>
 800174e:	7b3a      	ldrb	r2, [r7, #12]
 8001750:	4915      	ldr	r1, [pc, #84]	; (80017a8 <linkTimer+0x14c>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3308      	adds	r3, #8
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d2dc      	bcs.n	8001720 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001766:	7b7a      	ldrb	r2, [r7, #13]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fecf 	bl	8001510 <LinkTimerAfter>
 8001772:	e00f      	b.n	8001794 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <linkTimer+0x144>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff0c 	bl	800159c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <linkTimer+0x144>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <linkTimer+0x148>)
 800178c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <linkTimer+0x144>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001794:	89fb      	ldrh	r3, [r7, #14]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000188 	.word	0x20000188
 80017a4:	20000189 	.word	0x20000189
 80017a8:	200000f8 	.word	0x200000f8
 80017ac:	2000018c 	.word	0x2000018c

080017b0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017c0:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <UnlinkTimer+0xf8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d111      	bne.n	80017f0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017cc:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <UnlinkTimer+0xf8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b36      	ldr	r3, [pc, #216]	; (80018ac <UnlinkTimer+0xfc>)
 80017d4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4935      	ldr	r1, [pc, #212]	; (80018b0 <UnlinkTimer+0x100>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3315      	adds	r3, #21
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <UnlinkTimer+0xf8>)
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e03e      	b.n	800186e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	492f      	ldr	r1, [pc, #188]	; (80018b0 <UnlinkTimer+0x100>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3314      	adds	r3, #20
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	492a      	ldr	r1, [pc, #168]	; (80018b0 <UnlinkTimer+0x100>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3315      	adds	r3, #21
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001818:	79f9      	ldrb	r1, [r7, #7]
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	4824      	ldr	r0, [pc, #144]	; (80018b0 <UnlinkTimer+0x100>)
 800181e:	460b      	mov	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4403      	add	r3, r0
 8001828:	3315      	adds	r3, #21
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2d8      	uxtb	r0, r3
 800182e:	4920      	ldr	r1, [pc, #128]	; (80018b0 <UnlinkTimer+0x100>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3315      	adds	r3, #21
 800183c:	4602      	mov	r2, r0
 800183e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d013      	beq.n	800186e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001846:	79f9      	ldrb	r1, [r7, #7]
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <UnlinkTimer+0x100>)
 800184c:	460b      	mov	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	440b      	add	r3, r1
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4403      	add	r3, r0
 8001856:	3314      	adds	r3, #20
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2d8      	uxtb	r0, r3
 800185c:	4914      	ldr	r1, [pc, #80]	; (80018b0 <UnlinkTimer+0x100>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3314      	adds	r3, #20
 800186a:	4602      	mov	r2, r0
 800186c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	490f      	ldr	r1, [pc, #60]	; (80018b0 <UnlinkTimer+0x100>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	330c      	adds	r3, #12
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <UnlinkTimer+0xf8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b06      	cmp	r3, #6
 800188a:	d107      	bne.n	800189c <UnlinkTimer+0xec>
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <UnlinkTimer+0x104>)
 8001894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001898:	601a      	str	r2, [r3, #0]
  }

  return;
 800189a:	bf00      	nop
 800189c:	bf00      	nop
}
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000188 	.word	0x20000188
 80018ac:	20000189 	.word	0x20000189
 80018b0:	200000f8 	.word	0x200000f8
 80018b4:	2000018c 	.word	0x2000018c

080018b8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <ReturnTimeElapsed+0x70>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c6:	d026      	beq.n	8001916 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018c8:	f7ff fe02 	bl	80014d0 <ReadRtcSsrValue>
 80018cc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <ReturnTimeElapsed+0x70>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d805      	bhi.n	80018e4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <ReturnTimeElapsed+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e00a      	b.n	80018fa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <ReturnTimeElapsed+0x74>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <ReturnTimeElapsed+0x70>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <ReturnTimeElapsed+0x78>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <ReturnTimeElapsed+0x7c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	40d3      	lsrs	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	b29b      	uxth	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000018c 	.word	0x2000018c
 800192c:	20000194 	.word	0x20000194
 8001930:	20000192 	.word	0x20000192
 8001934:	20000191 	.word	0x20000191

08001938 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001948:	f7ff fdc2 	bl	80014d0 <ReadRtcSsrValue>
 800194c:	4603      	mov	r3, r0
 800194e:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <RestartWakeupCounter+0x9c>)
 8001950:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001952:	2003      	movs	r0, #3
 8001954:	f001 fad3 	bl	8002efe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001958:	e039      	b.n	80019ce <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d803      	bhi.n	8001968 <RestartWakeupCounter+0x30>
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <RestartWakeupCounter+0xa0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d002      	beq.n	800196e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	3b01      	subs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800196e:	bf00      	nop
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <RestartWakeupCounter+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f8      	beq.n	8001970 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <RestartWakeupCounter+0xa4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <RestartWakeupCounter+0xa4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800198e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <RestartWakeupCounter+0xa8>)
 8001992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001996:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001998:	2003      	movs	r0, #3
 800199a:	f001 fabe 	bl	8002f1a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <RestartWakeupCounter+0xac>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <RestartWakeupCounter+0xac>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ae:	f7ff fd8f 	bl	80014d0 <ReadRtcSsrValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <RestartWakeupCounter+0x9c>)
 80019b6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <RestartWakeupCounter+0xa4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <RestartWakeupCounter+0xa4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019c6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019c8:	f3af 8000 	nop.w
  return ;
 80019cc:	bf00      	nop
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000018c 	.word	0x2000018c
 80019d8:	20000191 	.word	0x20000191
 80019dc:	200002cc 	.word	0x200002cc
 80019e0:	58000800 	.word	0x58000800
 80019e4:	40002800 	.word	0x40002800

080019e8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019ee:	4b45      	ldr	r3, [pc, #276]	; (8001b04 <RescheduleTimerList+0x11c>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d107      	bne.n	8001a0c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019fc:	bf00      	nop
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <RescheduleTimerList+0x120>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f8      	bne.n	80019fe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <RescheduleTimerList+0x120>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <RescheduleTimerList+0x120>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <RescheduleTimerList+0x124>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	493a      	ldr	r1, [pc, #232]	; (8001b10 <RescheduleTimerList+0x128>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a36:	f7ff ff3f 	bl	80018b8 <ReturnTimeElapsed>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d205      	bcs.n	8001a52 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <RescheduleTimerList+0x12c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e04d      	b.n	8001aee <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4a30      	ldr	r2, [pc, #192]	; (8001b18 <RescheduleTimerList+0x130>)
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d906      	bls.n	8001a72 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <RescheduleTimerList+0x130>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <RescheduleTimerList+0x12c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e03d      	b.n	8001aee <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <RescheduleTimerList+0x12c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a82:	e034      	b.n	8001aee <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	4922      	ldr	r1, [pc, #136]	; (8001b10 <RescheduleTimerList+0x128>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3308      	adds	r3, #8
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d20a      	bcs.n	8001ab2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	491c      	ldr	r1, [pc, #112]	; (8001b10 <RescheduleTimerList+0x128>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3308      	adds	r3, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e013      	b.n	8001ada <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <RescheduleTimerList+0x128>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	1ac9      	subs	r1, r1, r3
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <RescheduleTimerList+0x128>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <RescheduleTimerList+0x128>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3315      	adds	r3, #21
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d1c7      	bne.n	8001a84 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001af4:	89bb      	ldrh	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff1e 	bl	8001938 <RestartWakeupCounter>

  return ;
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40002800 	.word	0x40002800
 8001b08:	200002cc 	.word	0x200002cc
 8001b0c:	20000188 	.word	0x20000188
 8001b10:	200000f8 	.word	0x200000f8
 8001b14:	20000190 	.word	0x20000190
 8001b18:	20000196 	.word	0x20000196

08001b1c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b22:	f3ef 8310 	mrs	r3, PRIMASK
 8001b26:	617b      	str	r3, [r7, #20]
  return(result);
 8001b28:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	22ca      	movs	r2, #202	; 0xca
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
 8001b38:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2253      	movs	r2, #83	; 0x53
 8001b3e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b54      	ldr	r3, [pc, #336]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b4e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b50:	4b52      	ldr	r3, [pc, #328]	; (8001c9c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b5c:	4950      	ldr	r1, [pc, #320]	; (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	330c      	adds	r3, #12
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d16e      	bne.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b76:	494a      	ldr	r1, [pc, #296]	; (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b8a:	4945      	ldr	r1, [pc, #276]	; (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3310      	adds	r3, #16
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b9c:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04c      	beq.n	8001c40 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001baa:	493d      	ldr	r1, [pc, #244]	; (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	330d      	adds	r3, #13
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d124      	bne.n	8001c0a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fdf2 	bl	80017b0 <UnlinkTimer>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f383 8810 	msr	PRIMASK, r3
}
 8001bd6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bdc:	4930      	ldr	r1, [pc, #192]	; (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	3304      	adds	r3, #4
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9b8 	bl	8001f68 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22ca      	movs	r2, #202	; 0xca
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2253      	movs	r2, #83	; 0x53
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
 8001c08:	e012      	b.n	8001c30 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f383 8810 	msr	PRIMASK, r3
}
 8001c14:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f920 	bl	8001e60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22ca      	movs	r2, #202	; 0xca
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2253      	movs	r2, #83	; 0x53
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	4619      	mov	r1, r3
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	f000 fa1b 	bl	8002074 <HW_TS_RTC_Int_AppNot>
 8001c3e:	e022      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c40:	f7ff fed2 	bl	80019e8 <RescheduleTimerList>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f383 8810 	msr	PRIMASK, r3
}
 8001c4e:	e01a      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c50:	bf00      	nop
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f8      	beq.n	8001c52 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f383 8810 	msr	PRIMASK, r3
}
 8001c84:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002cc 	.word	0x200002cc
 8001c9c:	20000188 	.word	0x20000188
 8001ca0:	200000f8 	.word	0x200000f8
 8001ca4:	20000190 	.word	0x20000190
 8001ca8:	58000800 	.word	0x58000800

08001cac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <HW_TS_Init+0x188>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	22ca      	movs	r2, #202	; 0xca
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	; (8001e34 <HW_TS_Init+0x188>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2253      	movs	r2, #83	; 0x53
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <HW_TS_Init+0x18c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a5a      	ldr	r2, [pc, #360]	; (8001e38 <HW_TS_Init+0x18c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HW_TS_Init+0x18c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f1c3 0304 	rsb	r3, r3, #4
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HW_TS_Init+0x190>)
 8001ce8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001cea:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HW_TS_Init+0x18c>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cf2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001cf6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d101      	bne.n	8001d0e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	e003      	b.n	8001d16 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	40d3      	lsrs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b48      	ldr	r3, [pc, #288]	; (8001e40 <HW_TS_Init+0x194>)
 8001d20:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d22:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <HW_TS_Init+0x18c>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <HW_TS_Init+0x198>)
 8001d34:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HW_TS_Init+0x198>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <HW_TS_Init+0x194>)
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d48:	4a3c      	ldr	r2, [pc, #240]	; (8001e3c <HW_TS_Init+0x190>)
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	40d3      	lsrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d904      	bls.n	8001d64 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HW_TS_Init+0x19c>)
 8001d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	e003      	b.n	8001d6c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HW_TS_Init+0x19c>)
 8001d6a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d70:	f7ff fb9c 	bl	80014ac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d78:	f7ff fb84 	bl	8001484 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13d      	bne.n	8001dfe <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d82:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HW_TS_Init+0x1a0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d88:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <HW_TS_Init+0x1a4>)
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d8e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
 8001d94:	e00c      	b.n	8001db0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d96:	7ffa      	ldrb	r2, [r7, #31]
 8001d98:	492e      	ldr	r1, [pc, #184]	; (8001e54 <HW_TS_Init+0x1a8>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	330c      	adds	r3, #12
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	3301      	adds	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9ef      	bls.n	8001d96 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HW_TS_Init+0x1ac>)
 8001db8:	2206      	movs	r2, #6
 8001dba:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HW_TS_Init+0x188>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HW_TS_Init+0x188>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HW_TS_Init+0x188>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HW_TS_Init+0x188>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ddc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HW_TS_Init+0x1b0>)
 8001de0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001de4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001de6:	2003      	movs	r0, #3
 8001de8:	f001 f897 	bl	8002f1a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HW_TS_Init+0x188>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e009      	b.n	8001e12 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HW_TS_Init+0x188>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f001 f876 	bl	8002efe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	22ff      	movs	r2, #255	; 0xff
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f001 f82b 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e24:	2003      	movs	r0, #3
 8001e26:	f001 f842 	bl	8002eae <HAL_NVIC_EnableIRQ>

  return;
 8001e2a:	bf00      	nop
}
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200002cc 	.word	0x200002cc
 8001e38:	40002800 	.word	0x40002800
 8001e3c:	20000191 	.word	0x20000191
 8001e40:	20000192 	.word	0x20000192
 8001e44:	20000194 	.word	0x20000194
 8001e48:	20000196 	.word	0x20000196
 8001e4c:	20000190 	.word	0x20000190
 8001e50:	2000018c 	.word	0x2000018c
 8001e54:	200000f8 	.word	0x200000f8
 8001e58:	20000188 	.word	0x20000188
 8001e5c:	58000800 	.word	0x58000800

08001e60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f001 f826 	bl	8002eca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22ca      	movs	r2, #202	; 0xca
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2253      	movs	r2, #83	; 0x53
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4930      	ldr	r1, [pc, #192]	; (8001f54 <HW_TS_Stop+0xf4>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d142      	bne.n	8001f2c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc80 	bl	80017b0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HW_TS_Stop+0xf8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d12f      	bne.n	8001f1c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HW_TS_Stop+0xfc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec8:	d107      	bne.n	8001eda <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001eca:	bf00      	nop
 8001ecc:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f8      	bne.n	8001ecc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001eea:	bf00      	nop
 8001eec:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f8      	beq.n	8001eec <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f0a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HW_TS_Stop+0x100>)
 8001f0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f12:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f14:	2003      	movs	r0, #3
 8001f16:	f001 f800 	bl	8002f1a <HAL_NVIC_ClearPendingIRQ>
 8001f1a:	e007      	b.n	8001f2c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HW_TS_Stop+0x104>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	7cfa      	ldrb	r2, [r7, #19]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f28:	f7ff fd5e 	bl	80019e8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HW_TS_Stop+0xf0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f34:	2003      	movs	r0, #3
 8001f36:	f000 ffba 	bl	8002eae <HAL_NVIC_EnableIRQ>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f383 8810 	msr	PRIMASK, r3
}
 8001f44:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f46:	bf00      	nop
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200002cc 	.word	0x200002cc
 8001f54:	200000f8 	.word	0x200000f8
 8001f58:	20000188 	.word	0x20000188
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	58000800 	.word	0x58000800
 8001f64:	20000189 	.word	0x20000189

08001f68 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	493b      	ldr	r1, [pc, #236]	; (8002064 <HW_TS_Start+0xfc>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	330c      	adds	r3, #12
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d103      	bne.n	8001f94 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff66 	bl	8001e60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f94:	f3ef 8310 	mrs	r3, PRIMASK
 8001f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9e:	b672      	cpsid	i
}
 8001fa0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f000 ff91 	bl	8002eca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HW_TS_Start+0x100>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ca      	movs	r2, #202	; 0xca
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HW_TS_Start+0x100>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2253      	movs	r2, #83	; 0x53
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	492a      	ldr	r1, [pc, #168]	; (8002064 <HW_TS_Start+0xfc>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4925      	ldr	r1, [pc, #148]	; (8002064 <HW_TS_Start+0xfc>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	4920      	ldr	r1, [pc, #128]	; (8002064 <HW_TS_Start+0xfc>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3304      	adds	r3, #4
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb30 	bl	800165c <linkTimer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HW_TS_Start+0x104>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HW_TS_Start+0x108>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	7c7a      	ldrb	r2, [r7, #17]
 800200e:	429a      	cmp	r2, r3
 8002010:	d002      	beq.n	8002018 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002012:	f7ff fce9 	bl	80019e8 <RescheduleTimerList>
 8002016:	e013      	b.n	8002040 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002018:	79fa      	ldrb	r2, [r7, #7]
 800201a:	4912      	ldr	r1, [pc, #72]	; (8002064 <HW_TS_Start+0xfc>)
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3308      	adds	r3, #8
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	8a7b      	ldrh	r3, [r7, #18]
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	1ac9      	subs	r1, r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	; (8002064 <HW_TS_Start+0xfc>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4403      	add	r3, r0
 800203c:	3308      	adds	r3, #8
 800203e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HW_TS_Start+0x100>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	; 0xff
 8002046:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f000 ff30 	bl	8002eae <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3
}
 8002058:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200000f8 	.word	0x200000f8
 8002068:	200002cc 	.word	0x200002cc
 800206c:	20000188 	.word	0x20000188
 8002070:	20000189 	.word	0x20000189

08002074 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	460b      	mov	r3, r1
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4798      	blx	r3

  return;
 8002086:	bf00      	nop
}
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	4613      	mov	r3, r2
 80020a0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d10e      	bne.n	80020ce <HW_UART_Transmit_DMA+0x3e>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case hw_lpuart1:
            HW_hlpuart1TxCb = cb;
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HW_UART_Transmit_DMA+0x80>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020b8:	4a17      	ldr	r2, [pc, #92]	; (8002118 <HW_UART_Transmit_DMA+0x88>)
 80020ba:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4814      	ldr	r0, [pc, #80]	; (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020c4:	f003 fcb4 	bl	8005a30 <HAL_UART_Transmit_DMA>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75fb      	strb	r3, [r7, #23]
            break;
 80020cc:	e000      	b.n	80020d0 <HW_UART_Transmit_DMA+0x40>
#endif

        default:
            break;
 80020ce:	bf00      	nop
    }

    switch (hal_status)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d816      	bhi.n	8002104 <HW_UART_Transmit_DMA+0x74>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HW_UART_Transmit_DMA+0x4c>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	080020ff 	.word	0x080020ff
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75bb      	strb	r3, [r7, #22]
            break;
 80020f0:	e009      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75bb      	strb	r3, [r7, #22]
            break;
 80020f6:	e006      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75bb      	strb	r3, [r7, #22]
            break;
 80020fc:	e003      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80020fe:	2303      	movs	r3, #3
 8002100:	75bb      	strb	r3, [r7, #22]
            break;
 8002102:	e000      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002104:	bf00      	nop
    }

    return hw_status;
 8002106:	7dbb      	ldrb	r3, [r7, #22]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000198 	.word	0x20000198
 8002114:	200001d8 	.word	0x200001d8
 8002118:	40008000 	.word	0x40008000

0800211c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_UART_TxCpltCallback+0x34>)
 800212c:	429a      	cmp	r2, r3
 800212e:	d107      	bne.n	8002140 <HAL_UART_TxCpltCallback+0x24>
            break;
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_UART_TxCpltCallback+0x38>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_hlpuart1TxCb();
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_UART_TxCpltCallback+0x38>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4798      	blx	r3
            }
            break;
 800213e:	e001      	b.n	8002144 <HAL_UART_TxCpltCallback+0x28>
#endif

        default:
            break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002144:	bf00      	nop
    }

    return;
 8002146:	bf00      	nop
}
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40008000 	.word	0x40008000
 8002154:	20000198 	.word	0x20000198

08002158 <LL_RCC_LSE_SetDriveCapability>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f023 0218 	bic.w	r2, r3, #24
 800216c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_AHB1_GRP1_EnableClock>:
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800219c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a8:	68fb      	ldr	r3, [r7, #12]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_AHB2_GRP1_EnableClock>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4013      	ands	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ec:	f000 fc78 	bl	8002ae0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80021f0:	f7fe fe62 	bl	8000eb8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f812 	bl	800221c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021f8:	f000 f86c 	bl	80022d4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80021fc:	f000 f88a 	bl	8002314 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002200:	f000 f934 	bl	800246c <MX_GPIO_Init>
  MX_DMA_Init();
 8002204:	f000 f920 	bl	8002448 <MX_DMA_Init>
  MX_RTC_Init();
 8002208:	f000 f8ea 	bl	80023e0 <MX_RTC_Init>
  MX_RF_Init();
 800220c:	f000 f8e0 	bl	80023d0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002210:	f7fe fe60 	bl	8000ed4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002214:	f7ff f8e8 	bl	80013e8 <MX_APPE_Process>
 8002218:	e7fc      	b.n	8002214 <main+0x2c>
	...

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b09a      	sub	sp, #104	; 0x68
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0320 	add.w	r3, r7, #32
 8002226:	2248      	movs	r2, #72	; 0x48
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f009 ffbc 	bl	800c1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	615a      	str	r2, [r3, #20]
 8002240:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002242:	f001 fbf5 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002246:	2010      	movs	r0, #16
 8002248:	f7ff ff86 	bl	8002158 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <SystemClock_Config+0xb4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <SystemClock_Config+0xb4>)
 8002256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <SystemClock_Config+0xb4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002268:	2307      	movs	r3, #7
 800226a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800226c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002272:	2301      	movs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800227c:	2340      	movs	r3, #64	; 0x40
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002280:	2300      	movs	r3, #0
 8002282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002284:	f107 0320 	add.w	r3, r7, #32
 8002288:	4618      	mov	r0, r3
 800228a:	f001 ff65 	bl	8004158 <HAL_RCC_OscConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002294:	f000 f938 	bl	8002508 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002298:	236f      	movs	r3, #111	; 0x6f
 800229a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800229c:	2302      	movs	r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2101      	movs	r1, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fac1 	bl	8004840 <HAL_RCC_ClockConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80022c4:	f000 f920 	bl	8002508 <Error_Handler>
  }
}
 80022c8:	bf00      	nop
 80022ca:	3768      	adds	r7, #104	; 0x68
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58000400 	.word	0x58000400

080022d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b094      	sub	sp, #80	; 0x50
 80022d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022da:	463b      	mov	r3, r7
 80022dc:	2250      	movs	r2, #80	; 0x50
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f009 ff61 	bl	800c1a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80022e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80022ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80022f2:	2302      	movs	r3, #2
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80022f6:	2310      	movs	r3, #16
 80022f8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	463b      	mov	r3, r7
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fedc 	bl	80050ba <HAL_RCCEx_PeriphCLKConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002308:	f000 f8fe 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800230c:	bf00      	nop
 800230e:	3750      	adds	r7, #80	; 0x50
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_IPCC_Init+0x20>)
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <MX_IPCC_Init+0x24>)
 800231c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_IPCC_Init+0x20>)
 8002320:	f001 fb00 	bl	8003924 <HAL_IPCC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800232a:	f000 f8ed 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000019c 	.word	0x2000019c
 8002338:	58000c00 	.word	0x58000c00

0800233c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002342:	4a22      	ldr	r2, [pc, #136]	; (80023cc <MX_LPUART1_UART_Init+0x90>)
 8002344:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800234c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b1c      	ldr	r3, [pc, #112]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX;
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002362:	2208      	movs	r2, #8
 8002364:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236c:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002374:	2200      	movs	r2, #0
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 800237a:	2200      	movs	r2, #0
 800237c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800237e:	4812      	ldr	r0, [pc, #72]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002380:	f003 fafe 	bl	8005980 <HAL_HalfDuplex_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800238a:	f000 f8bd 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 8002392:	f004 fccc 	bl	8006d2e <HAL_UARTEx_SetTxFifoThreshold>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800239c:	f000 f8b4 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4809      	ldr	r0, [pc, #36]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 80023a4:	f004 fd01 	bl	8006daa <HAL_UARTEx_SetRxFifoThreshold>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80023ae:	f000 f8ab 	bl	8002508 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_LPUART1_UART_Init+0x8c>)
 80023b4:	f004 fc82 	bl	8006cbc <HAL_UARTEx_DisableFifoMode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80023be:	f000 f8a3 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200001d8 	.word	0x200001d8
 80023cc:	40008000 	.word	0x40008000

080023d0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_RTC_Init+0x60>)
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <MX_RTC_Init+0x64>)
 80023e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_RTC_Init+0x60>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_RTC_Init+0x60>)
 80023f2:	220f      	movs	r2, #15
 80023f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <MX_RTC_Init+0x60>)
 80023f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80023fc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_RTC_Init+0x60>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_RTC_Init+0x60>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_RTC_Init+0x60>)
 800240c:	2200      	movs	r2, #0
 800240e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_RTC_Init+0x60>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002416:	480a      	ldr	r0, [pc, #40]	; (8002440 <MX_RTC_Init+0x60>)
 8002418:	f003 f8d6 	bl	80055c8 <HAL_RTC_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002422:	f000 f871 	bl	8002508 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_RTC_Init+0x60>)
 800242c:	f003 f9cc 	bl	80057c8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002436:	f000 f867 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200002cc 	.word	0x200002cc
 8002444:	40002800 	.word	0x40002800

08002448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800244c:	2004      	movs	r0, #4
 800244e:	f7ff fe99 	bl	8002184 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff fe96 	bl	8002184 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	210f      	movs	r1, #15
 800245c:	200b      	movs	r0, #11
 800245e:	f000 fd0c 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002462:	200b      	movs	r0, #11
 8002464:	f000 fd23 	bl	8002eae <HAL_NVIC_EnableIRQ>

}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002480:	2004      	movs	r0, #4
 8002482:	f7ff fe98 	bl	80021b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff fe95 	bl	80021b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248c:	2002      	movs	r0, #2
 800248e:	f7ff fe92 	bl	80021b6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2123      	movs	r1, #35	; 0x23
 8002496:	481b      	ldr	r0, [pc, #108]	; (8002504 <MX_GPIO_Init+0x98>)
 8002498:	f001 f9f0 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin;
 800249c:	2310      	movs	r3, #16
 800249e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_User_GPIO_Port, &GPIO_InitStruct);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b2:	f001 f873 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 80024b6:	2360      	movs	r3, #96	; 0x60
 80024b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024cc:	f001 f866 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 80024d0:	2323      	movs	r3, #35	; 0x23
 80024d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4807      	ldr	r0, [pc, #28]	; (8002504 <MX_GPIO_Init+0x98>)
 80024e6:	f001 f859 	bl	800359c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	200a      	movs	r0, #10
 80024f0:	f000 fcc3 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80024f4:	200a      	movs	r0, #10
 80024f6:	f000 fcda 	bl	8002eae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	48000400 	.word	0x48000400

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002510:	e7fe      	b.n	8002510 <Error_Handler+0x8>

08002512 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_AHB2_GRP1_EnableClock>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002558:	68fb      	ldr	r3, [r7, #12]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_AHB3_GRP1_EnableClock>:
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4313      	orrs	r3, r2
 800257c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_APB1_GRP1_EnableClock>:
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025bc:	68fb      	ldr	r3, [r7, #12]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <LL_APB1_GRP2_EnableClock>:
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4313      	orrs	r3, r2
 80025e0:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002600:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002604:	f7ff ffaf 	bl	8002566 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	202e      	movs	r0, #46	; 0x2e
 800260e:	f000 fc34 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002612:	202e      	movs	r0, #46	; 0x2e
 8002614:	f000 fc4b 	bl	8002eae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_IPCC_MspInit+0x44>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d113      	bne.n	8002656 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800262e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002632:	f7ff ff98 	bl	8002566 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	202c      	movs	r0, #44	; 0x2c
 800263c:	f000 fc1d 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002640:	202c      	movs	r0, #44	; 0x2c
 8002642:	f000 fc34 	bl	8002eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	202d      	movs	r0, #45	; 0x2d
 800264c:	f000 fc15 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002650:	202d      	movs	r0, #45	; 0x2d
 8002652:	f000 fc2c 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58000c00 	.word	0x58000c00

08002664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b09c      	sub	sp, #112	; 0x70
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	2250      	movs	r2, #80	; 0x50
 8002682:	2100      	movs	r1, #0
 8002684:	4618      	mov	r0, r3
 8002686:	f009 fd8f 	bl	800c1a8 <memset>
  if(huart->Instance==LPUART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <HAL_UART_MspInit+0xe4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d155      	bne.n	8002740 <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002694:	2302      	movs	r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fd0a 	bl	80050ba <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026ac:	f7ff ff2c 	bl	8002508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff ff8a 	bl	80025ca <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff ff3c 	bl	8002534 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026bc:	2304      	movs	r3, #4
 80026be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026c4:	2301      	movs	r3, #1
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026cc:	2308      	movs	r3, #8
 80026ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f000 ff5f 	bl	800359c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80026de:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026e0:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <HAL_UART_MspInit+0xec>)
 80026e2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026e6:	2211      	movs	r2, #17
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ea:	4b18      	ldr	r3, [pc, #96]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026ec:	2210      	movs	r2, #16
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_UART_MspInit+0xe8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_UART_MspInit+0xe8>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002708:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_UART_MspInit+0xe8>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_UART_MspInit+0xe8>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <HAL_UART_MspInit+0xe8>)
 8002716:	f000 fc0f 	bl	8002f38 <HAL_DMA_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002720:	f7ff fef2 	bl	8002508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_UART_MspInit+0xe8>)
 8002728:	67da      	str	r2, [r3, #124]	; 0x7c
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_UART_MspInit+0xe8>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2025      	movs	r0, #37	; 0x25
 8002736:	f000 fba0 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800273a:	2025      	movs	r0, #37	; 0x25
 800273c:	f000 fbb7 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3770      	adds	r7, #112	; 0x70
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40008000 	.word	0x40008000
 800274c:	2000026c 	.word	0x2000026c
 8002750:	40020008 	.word	0x40020008

08002754 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b096      	sub	sp, #88	; 0x58
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	2250      	movs	r2, #80	; 0x50
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f009 fd1f 	bl	800c1a8 <memset>
  if(hrtc->Instance==RTC)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_RTC_MspInit+0x64>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d11d      	bne.n	80027b0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002778:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800277a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	4618      	mov	r0, r3
 8002786:	f002 fc98 	bl	80050ba <HAL_RCCEx_PeriphCLKConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002790:	f7ff feba 	bl	8002508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002794:	f7ff febd 	bl	8002512 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002798:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800279c:	f7ff fefc 	bl	8002598 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2100      	movs	r1, #0
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 fb68 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80027aa:	2003      	movs	r0, #3
 80027ac:	f000 fb7f 	bl	8002eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80027b0:	bf00      	nop
 80027b2:	3758      	adds	r7, #88	; 0x58
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40002800 	.word	0x40002800

080027bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027c0:	e7fe      	b.n	80027c0 <NMI_Handler+0x4>

080027c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <MemManage_Handler+0x4>

080027ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <BusFault_Handler+0x4>

080027d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <UsageFault_Handler+0x4>

080027da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002808:	f000 f9c4 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	bd80      	pop	{r7, pc}

08002810 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002814:	f7ff f982 	bl	8001b1c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8002820:	2010      	movs	r0, #16
 8002822:	f001 f843 	bl	80038ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA1_Channel1_IRQHandler+0x10>)
 8002832:	f000 fd62 	bl	80032fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000026c 	.word	0x2000026c

08002840 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <LPUART1_IRQHandler+0x10>)
 8002846:	f003 f973 	bl	8005b30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200001d8 	.word	0x200001d8

08002854 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002858:	f008 fed8 	bl	800b60c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002864:	f008 ff08 	bl	800b678 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002870:	f001 f834 	bl	80038dc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
  }

  return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	605a      	str	r2, [r3, #4]
  return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_isatty>:

int _isatty(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <_sbrk+0x5c>)
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <_sbrk+0x60>)
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <_sbrk+0x64>)
 800293a:	4a12      	ldr	r2, [pc, #72]	; (8002984 <_sbrk+0x68>)
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	429a      	cmp	r2, r3
 800294a:	d207      	bcs.n	800295c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800294c:	f009 fc92 	bl	800c274 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	220c      	movs	r2, #12
 8002954:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295a:	e009      	b.n	8002970 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <_sbrk+0x64>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <_sbrk+0x64>)
 800296c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20010000 	.word	0x20010000
 800297c:	00001000 	.word	0x00001000
 8002980:	200002f0 	.word	0x200002f0
 8002984:	20001728 	.word	0x20001728

08002988 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <SystemInit+0x98>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	4a23      	ldr	r2, [pc, #140]	; (8002a20 <SystemInit+0x98>)
 8002994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800299c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80029b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <SystemInit+0x9c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d2:	f023 0305 	bic.w	r3, r3, #5
 80029d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <SystemInit+0xa0>)
 80029f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <SystemInit+0xa0>)
 80029fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00
 8002a24:	faf6fefb 	.word	0xfaf6fefb
 8002a28:	22041000 	.word	0x22041000

08002a2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002a2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a30:	3304      	adds	r3, #4

08002a32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002a36:	d3f9      	bcc.n	8002a2c <CopyDataInit>
  bx lr
 8002a38:	4770      	bx	lr

08002a3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a3c:	3004      	adds	r0, #4

08002a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a40:	d3fb      	bcc.n	8002a3a <FillZerobss>
  bx lr
 8002a42:	4770      	bx	lr

08002a44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a48:	f7ff ff9e 	bl	8002988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a4c:	480b      	ldr	r0, [pc, #44]	; (8002a7c <LoopForever+0x6>)
 8002a4e:	490c      	ldr	r1, [pc, #48]	; (8002a80 <LoopForever+0xa>)
 8002a50:	4a0c      	ldr	r2, [pc, #48]	; (8002a84 <LoopForever+0xe>)
 8002a52:	2300      	movs	r3, #0
 8002a54:	f7ff ffed 	bl	8002a32 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a58:	480b      	ldr	r0, [pc, #44]	; (8002a88 <LoopForever+0x12>)
 8002a5a:	490c      	ldr	r1, [pc, #48]	; (8002a8c <LoopForever+0x16>)
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <LoopForever+0x1a>)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f7ff ffe7 	bl	8002a32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a64:	480b      	ldr	r0, [pc, #44]	; (8002a94 <LoopForever+0x1e>)
 8002a66:	490c      	ldr	r1, [pc, #48]	; (8002a98 <LoopForever+0x22>)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	f7ff ffe8 	bl	8002a3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a6e:	f009 fc07 	bl	800c280 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a72:	f7ff fbb9 	bl	80021e8 <main>

08002a76 <LoopForever>:

LoopForever:
  b LoopForever
 8002a76:	e7fe      	b.n	8002a76 <LoopForever>
  ldr   r0, =_estack
 8002a78:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	20000090 	.word	0x20000090
 8002a84:	0800e878 	.word	0x0800e878
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a88:	200301e4 	.word	0x200301e4
 8002a8c:	20030a67 	.word	0x20030a67
 8002a90:	0800e946 	.word	0x0800e946
  INIT_BSS _sbss, _ebss
 8002a94:	200000dc 	.word	0x200000dc
 8002a98:	20001724 	.word	0x20001724

08002a9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC1_IRQHandler>
	...

08002aa0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002aa4:	4b05      	ldr	r3, [pc, #20]	; (8002abc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a04      	ldr	r2, [pc, #16]	; (8002abc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6053      	str	r3, [r2, #4]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e0042000 	.word	0xe0042000

08002ac0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	6053      	str	r3, [r2, #4]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e0042000 	.word	0xe0042000

08002ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_Init+0x3c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_Init+0x3c>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af6:	2003      	movs	r0, #3
 8002af8:	f000 f9b4 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afc:	200f      	movs	r0, #15
 8002afe:	f000 f80f 	bl	8002b20 <HAL_InitTick>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	e001      	b.n	8002b12 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b0e:	f7ff fd75 	bl	80025fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b12:	79fb      	ldrb	r3, [r7, #7]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	58004000 	.word	0x58004000

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002b2c:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <HAL_InitTick+0x6c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d024      	beq.n	8002b7e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b34:	f002 f830 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_InitTick+0x6c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b44:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 f9ca 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10f      	bne.n	8002b78 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	d809      	bhi.n	8002b72 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b66:	f000 f988 	bl	8002e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_InitTick+0x70>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e007      	b.n	8002b82 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e004      	b.n	8002b82 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e001      	b.n	8002b82 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000010 	.word	0x20000010
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000010 	.word	0x20000010
 8002bb8:	200002f4 	.word	0x200002f4

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	200002f4 	.word	0x200002f4

08002bd4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_GetTickPrio+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000000c 	.word	0x2000000c

08002bec <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002bf0:	f7ff ff56 	bl	8002aa0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002bfc:	f7ff ff60 	bl	8002ac0 <LL_DBGMCU_EnableDBGStopMode>
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c36:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <__NVIC_SetPriorityGrouping+0x44>)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	60d3      	str	r3, [r2, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c50:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <__NVIC_GetPriorityGrouping+0x18>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	f003 0307 	and.w	r3, r3, #7
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	db0b      	blt.n	8002c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4907      	ldr	r1, [pc, #28]	; (8002ca0 <__NVIC_EnableIRQ+0x38>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	2001      	movs	r0, #1
 8002c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100

08002ca4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db12      	blt.n	8002cdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	490a      	ldr	r1, [pc, #40]	; (8002ce8 <__NVIC_DisableIRQ+0x44>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	3320      	adds	r3, #32
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cd0:	f3bf 8f4f 	dsb	sy
}
 8002cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cd6:	f3bf 8f6f 	isb	sy
}
 8002cda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	db0c      	blt.n	8002d18 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 021f 	and.w	r2, r3, #31
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <__NVIC_SetPendingIRQ+0x38>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d12:	3340      	adds	r3, #64	; 0x40
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100

08002d28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0c      	blt.n	8002d54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_ClearPendingIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	3360      	adds	r3, #96	; 0x60
 8002d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff fec9 	bl	8002c04 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e88:	f7ff fee0 	bl	8002c4c <__NVIC_GetPriorityGrouping>
 8002e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff90 	bl	8002db8 <NVIC_EncodePriority>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff5f 	bl	8002d64 <__NVIC_SetPriority>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fed3 	bl	8002c68 <__NVIC_EnableIRQ>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fee3 	bl	8002ca4 <__NVIC_DisableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ff96 	bl	8002e20 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff feed 	bl	8002cec <__NVIC_SetPendingIRQ>
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fefd 	bl	8002d28 <__NVIC_ClearPendingIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e08e      	b.n	8003068 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_DMA_Init+0x138>)
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d80f      	bhi.n	8002f76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b45      	ldr	r3, [pc, #276]	; (8003074 <HAL_DMA_Init+0x13c>)
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a45      	ldr	r2, [pc, #276]	; (8003078 <HAL_DMA_Init+0x140>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	009a      	lsls	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a42      	ldr	r2, [pc, #264]	; (800307c <HAL_DMA_Init+0x144>)
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
 8002f74:	e00e      	b.n	8002f94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_DMA_Init+0x148>)
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a3d      	ldr	r2, [pc, #244]	; (8003078 <HAL_DMA_Init+0x140>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	009a      	lsls	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a3c      	ldr	r2, [pc, #240]	; (8003084 <HAL_DMA_Init+0x14c>)
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa74 	bl	80034d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff4:	d102      	bne.n	8002ffc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003004:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003008:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003012:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_DMA_Init+0x106>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d80c      	bhi.n	800303e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa93 	bl	8003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	e008      	b.n	8003050 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40020407 	.word	0x40020407
 8003074:	bffdfff8 	.word	0xbffdfff8
 8003078:	cccccccd 	.word	0xcccccccd
 800307c:	40020000 	.word	0x40020000
 8003080:	bffdfbf8 	.word	0xbffdfbf8
 8003084:	40020400 	.word	0x40020400

08003088 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Start_IT+0x20>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e066      	b.n	8003176 <HAL_DMA_Start_IT+0xee>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d155      	bne.n	8003168 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f9b9 	bl	8003458 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 020e 	orr.w	r2, r2, #14
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e00f      	b.n	8003120 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0204 	bic.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 020a 	orr.w	r2, r2, #10
 800311e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003154:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f042 0201 	orr.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	e005      	b.n	8003174 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003170:	2302      	movs	r3, #2
 8003172:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e04f      	b.n	8003230 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d008      	beq.n	80031ae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2204      	movs	r2, #4
 80031a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e040      	b.n	8003230 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 020e 	bic.w	r2, r2, #14
 80031bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	f003 021c 	and.w	r2, r3, #28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2101      	movs	r1, #1
 80031ec:	fa01 f202 	lsl.w	r2, r1, r2
 80031f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003212:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800321c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d005      	beq.n	8003260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2204      	movs	r2, #4
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	e047      	b.n	80032f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 020e 	bic.w	r2, r2, #14
 800326e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800328e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f003 021c 	and.w	r2, r3, #28
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
    }
  }
  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f003 031c 	and.w	r3, r3, #28
 800331a:	2204      	movs	r2, #4
 800331c:	409a      	lsls	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d026      	beq.n	8003374 <HAL_DMA_IRQHandler+0x7a>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d021      	beq.n	8003374 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d107      	bne.n	800334e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0204 	bic.w	r2, r2, #4
 800334c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 021c 	and.w	r2, r3, #28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	2104      	movs	r1, #4
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	2b00      	cmp	r3, #0
 8003368:	d071      	beq.n	800344e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003372:	e06c      	b.n	800344e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 031c 	and.w	r3, r3, #28
 800337c:	2202      	movs	r2, #2
 800337e:	409a      	lsls	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02e      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xec>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d029      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10b      	bne.n	80033b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 020a 	bic.w	r2, r2, #10
 80033ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f003 021c 	and.w	r2, r3, #28
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2102      	movs	r1, #2
 80033c6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d038      	beq.n	800344e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033e4:	e033      	b.n	800344e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	f003 031c 	and.w	r3, r3, #28
 80033ee:	2208      	movs	r2, #8
 80033f0:	409a      	lsls	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d02a      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d025      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 020e 	bic.w	r2, r2, #14
 8003412:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f003 021c 	and.w	r2, r3, #28
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	2101      	movs	r1, #1
 8003422:	fa01 f202 	lsl.w	r2, r1, r2
 8003426:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800344e:	bf00      	nop
 8003450:	bf00      	nop
}
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800346e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003480:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f003 021c 	and.w	r2, r3, #28
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	2101      	movs	r1, #1
 8003490:	fa01 f202 	lsl.w	r2, r1, r2
 8003494:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d108      	bne.n	80034b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034b6:	e007      	b.n	80034c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d80a      	bhi.n	80034fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6493      	str	r3, [r2, #72]	; 0x48
 80034fc:	e007      	b.n	800350e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003508:	4413      	add	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	3b08      	subs	r3, #8
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003518:	fba2 2303 	umull	r2, r3, r2, r3
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a0a      	ldr	r2, [pc, #40]	; (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003524:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2201      	movs	r2, #1
 800352e:	409a      	lsls	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40020407 	.word	0x40020407
 8003544:	4002081c 	.word	0x4002081c
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	40020880 	.word	0x40020880

08003550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	461a      	mov	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a09      	ldr	r2, [pc, #36]	; (8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003574:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2201      	movs	r2, #1
 8003580:	409a      	lsls	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	1000823f 	.word	0x1000823f
 8003598:	40020940 	.word	0x40020940

0800359c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	e14c      	b.n	8003846 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	2101      	movs	r1, #1
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	4013      	ands	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 813e 	beq.w	8003840 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d005      	beq.n	80035dc <HAL_GPIO_Init+0x40>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d130      	bne.n	800363e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2203      	movs	r2, #3
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003612:	2201      	movs	r2, #1
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 0201 	and.w	r2, r3, #1
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d017      	beq.n	800367a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4013      	ands	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d123      	bne.n	80036ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	08da      	lsrs	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3208      	adds	r2, #8
 800368e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	6939      	ldr	r1, [r7, #16]
 80036ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	2203      	movs	r2, #3
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0203 	and.w	r2, r3, #3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8098 	beq.w	8003840 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003710:	4a54      	ldr	r2, [pc, #336]	; (8003864 <HAL_GPIO_Init+0x2c8>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	220f      	movs	r2, #15
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800373a:	d019      	beq.n	8003770 <HAL_GPIO_Init+0x1d4>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_GPIO_Init+0x2cc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <HAL_GPIO_Init+0x1d0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a49      	ldr	r2, [pc, #292]	; (800386c <HAL_GPIO_Init+0x2d0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00d      	beq.n	8003768 <HAL_GPIO_Init+0x1cc>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a48      	ldr	r2, [pc, #288]	; (8003870 <HAL_GPIO_Init+0x2d4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1c8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a47      	ldr	r2, [pc, #284]	; (8003874 <HAL_GPIO_Init+0x2d8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_GPIO_Init+0x1c4>
 800375c:	2304      	movs	r3, #4
 800375e:	e008      	b.n	8003772 <HAL_GPIO_Init+0x1d6>
 8003760:	2307      	movs	r3, #7
 8003762:	e006      	b.n	8003772 <HAL_GPIO_Init+0x1d6>
 8003764:	2303      	movs	r3, #3
 8003766:	e004      	b.n	8003772 <HAL_GPIO_Init+0x1d6>
 8003768:	2302      	movs	r3, #2
 800376a:	e002      	b.n	8003772 <HAL_GPIO_Init+0x1d6>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_GPIO_Init+0x1d6>
 8003770:	2300      	movs	r3, #0
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	f002 0203 	and.w	r2, r2, #3
 8003778:	0092      	lsls	r2, r2, #2
 800377a:	4093      	lsls	r3, r2
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003782:	4938      	ldr	r1, [pc, #224]	; (8003864 <HAL_GPIO_Init+0x2c8>)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003790:	4b39      	ldr	r3, [pc, #228]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037b4:	4a30      	ldr	r2, [pc, #192]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037de:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037e4:	4b24      	ldr	r3, [pc, #144]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 80037e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 8003814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	43db      	mvns	r3, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_GPIO_Init+0x2dc>)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f aeab 	bne.w	80035ac <HAL_GPIO_Init+0x10>
  }
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40010000 	.word	0x40010000
 8003868:	48000400 	.word	0x48000400
 800386c:	48000800 	.word	0x48000800
 8003870:	48000c00 	.word	0x48000c00
 8003874:	48001000 	.word	0x48001000
 8003878:	58000800 	.word	0x58000800

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003898:	e002      	b.n	80038a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800389a:	887a      	ldrh	r2, [r7, #2]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c2:	4a05      	ldr	r2, [pc, #20]	; (80038d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fdca 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	58000800 	.word	0x58000800

080038dc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_HSEM_IRQHandler+0x30>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <HAL_HSEM_IRQHandler+0x30>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	4906      	ldr	r1, [pc, #24]	; (800390c <HAL_HSEM_IRQHandler+0x30>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_HSEM_IRQHandler+0x30>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f807 	bl	8003910 <HAL_HSEM_FreeCallback>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	58001500 	.word	0x58001500

08003910 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01e      	beq.n	8003974 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_IPCC_Init+0x60>)
 8003938:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fe68 	bl	800261c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800394c:	68b8      	ldr	r0, [r7, #8]
 800394e:	f000 f85b 	bl	8003a08 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f82c 	bl	80039bc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003972:	e001      	b.n	8003978 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58000c00 	.word	0x58000c00

08003988 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e00f      	b.n	80039ea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <IPCC_SetDefaultCallbacks+0x44>)
 80039d4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3306      	adds	r3, #6
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <IPCC_SetDefaultCallbacks+0x48>)
 80039e2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b05      	cmp	r3, #5
 80039ee:	d9ec      	bls.n	80039ca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	08003989 	.word	0x08003989
 8003a04:	080039a3 	.word	0x080039a3

08003a08 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	223f      	movs	r2, #63	; 0x3f
 8003a22:	609a      	str	r2, [r3, #8]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	58000400 	.word	0x58000400

08003a50 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	58000400 	.word	0x58000400

08003a6c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7e:	d101      	bne.n	8003a84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_RCC_HSE_Enable>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_RCC_HSE_Disable>:
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_HSE_IsReady>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ade:	d101      	bne.n	8003ae4 <LL_RCC_HSE_IsReady+0x18>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <LL_RCC_HSE_IsReady+0x1a>
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_HSI_Enable>:
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_HSI_Disable>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_HSI_IsReady>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d101      	bne.n	8003b44 <LL_RCC_HSI_IsReady+0x18>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <LL_RCC_HSI_IsReady+0x1a>
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_HSI48_Enable>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <LL_RCC_HSI48_Disable>:
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_HSI48_IsReady>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d101      	bne.n	8003bd6 <LL_RCC_HSI48_IsReady+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_RCC_HSI48_IsReady+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_LSE_Enable>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf2:	f043 0301 	orr.w	r3, r3, #1
 8003bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_LSE_Disable>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_LSE_EnableBypass>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c36:	f043 0304 	orr.w	r3, r3, #4
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_LSE_DisableBypass>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <LL_RCC_LSE_IsReady>:
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d101      	bne.n	8003c82 <LL_RCC_LSE_IsReady+0x18>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <LL_RCC_LSE_IsReady+0x1a>
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_LSI1_Enable>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_LSI1_Disable>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_RCC_LSI1_IsReady>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d101      	bne.n	8003cea <LL_RCC_LSI1_IsReady+0x18>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <LL_RCC_LSI1_IsReady+0x1a>
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_LSI2_Enable>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_RCC_LSI2_Disable>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_RCC_LSI2_IsReady>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d101      	bne.n	8003d52 <LL_RCC_LSI2_IsReady+0x18>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <LL_RCC_LSI2_IsReady+0x1a>
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_LSI2_SetTrimming>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_MSI_Enable>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_MSI_Disable>:
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
}
 8003dbe:	bf00      	nop
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_MSI_IsReady>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d101      	bne.n	8003dde <LL_RCC_MSI_IsReady+0x16>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <LL_RCC_MSI_IsReady+0x18>
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_MSI_SetRange>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_MSI_GetRange>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e22:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2bb0      	cmp	r3, #176	; 0xb0
 8003e28:	d901      	bls.n	8003e2e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e2a:	23b0      	movs	r3, #176	; 0xb0
 8003e2c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003e2e:	687b      	ldr	r3, [r7, #4]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <LL_RCC_SetSysClkSource>:
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 0203 	bic.w	r2, r3, #3
 8003e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_RCC_GetSysClkSource>:
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 030c 	and.w	r3, r3, #12
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <LL_RCC_SetAHBPrescaler>:
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ede:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_SetAHB4Prescaler>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f0a:	f023 020f 	bic.w	r2, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_SetAPB1Prescaler>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_RCC_SetAPB2Prescaler>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_GetAHBPrescaler>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_GetAHB4Prescaler>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_RCC_GetAPB1Prescaler>:
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_RCC_GetAPB2Prescaler>:
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402a:	d101      	bne.n	8004030 <LL_RCC_PLL_IsReady+0x18>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <LL_RCC_PLL_IsReady+0x1a>
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004056:	b480      	push	{r7}
 8004058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800406e:	b480      	push	{r7}
 8004070:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0303 	and.w	r3, r3, #3
}
 8004094:	4618      	mov	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d101      	bne.n	80040b6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d6:	d101      	bne.n	80040dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040d8:	2301      	movs	r3, #1
 80040da:	e000      	b.n	80040de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d101      	bne.n	8004102 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004120:	d101      	bne.n	8004126 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004140:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004144:	d101      	bne.n	800414a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
	...

08004158 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b590      	push	{r4, r7, lr}
 800415a:	b08d      	sub	sp, #52	; 0x34
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e363      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 808d 	beq.w	8004292 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004178:	f7ff fe89 	bl	8003e8e <LL_RCC_GetSysClkSource>
 800417c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417e:	f7ff ff82 	bl	8004086 <LL_RCC_PLL_GetMainSource>
 8004182:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x3e>
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b0c      	cmp	r3, #12
 800418e:	d147      	bne.n	8004220 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	2b01      	cmp	r3, #1
 8004194:	d144      	bne.n	8004220 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e347      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80041a6:	f7ff fe34 	bl	8003e12 <LL_RCC_MSI_GetRange>
 80041aa:	4603      	mov	r3, r0
 80041ac:	429c      	cmp	r4, r3
 80041ae:	d914      	bls.n	80041da <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fd2f 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e336      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fe0e 	bl	8003dea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe32 	bl	8003e3c <LL_RCC_MSI_SetCalibTrimming>
 80041d8:	e013      	b.n	8004202 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fe03 	bl	8003dea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fe27 	bl	8003e3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd10 	bl	8004c18 <RCC_SetFlashLatencyFromMSIRange>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e317      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004202:	f000 fcc9 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004206:	4603      	mov	r3, r0
 8004208:	4aa4      	ldr	r2, [pc, #656]	; (800449c <HAL_RCC_OscConfig+0x344>)
 800420a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800420c:	4ba4      	ldr	r3, [pc, #656]	; (80044a0 <HAL_RCC_OscConfig+0x348>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe fc85 	bl	8002b20 <HAL_InitTick>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d039      	beq.n	8004290 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e308      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01e      	beq.n	8004266 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004228:	f7ff fdb0 	bl	8003d8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800422c:	f7fe fcc6 	bl	8002bbc <HAL_GetTick>
 8004230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004234:	f7fe fcc2 	bl	8002bbc <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e2f5      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004246:	f7ff fdbf 	bl	8003dc8 <LL_RCC_MSI_IsReady>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f1      	beq.n	8004234 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fdc8 	bl	8003dea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fdec 	bl	8003e3c <LL_RCC_MSI_SetCalibTrimming>
 8004264:	e015      	b.n	8004292 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004266:	f7ff fda0 	bl	8003daa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800426a:	f7fe fca7 	bl	8002bbc <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004272:	f7fe fca3 	bl	8002bbc <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e2d6      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004284:	f7ff fda0 	bl	8003dc8 <LL_RCC_MSI_IsReady>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f1      	bne.n	8004272 <HAL_RCC_OscConfig+0x11a>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004290:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d047      	beq.n	800432e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800429e:	f7ff fdf6 	bl	8003e8e <LL_RCC_GetSysClkSource>
 80042a2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a4:	f7ff feef 	bl	8004086 <LL_RCC_PLL_GetMainSource>
 80042a8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_OscConfig+0x164>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d108      	bne.n	80042c8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	2b03      	cmp	r3, #3
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d134      	bne.n	800432e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e2b4      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_OscConfig+0x180>
 80042d2:	f7ff fbdd 	bl	8003a90 <LL_RCC_HSE_Enable>
 80042d6:	e001      	b.n	80042dc <HAL_RCC_OscConfig+0x184>
 80042d8:	f7ff fbe9 	bl	8003aae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fe fc6a 	bl	8002bbc <HAL_GetTick>
 80042e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe fc66 	bl	8002bbc <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e299      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042fe:	f7ff fbe5 	bl	8003acc <LL_RCC_HSE_IsReady>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f1      	beq.n	80042ec <HAL_RCC_OscConfig+0x194>
 8004308:	e011      	b.n	800432e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe fc57 	bl	8002bbc <HAL_GetTick>
 800430e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004312:	f7fe fc53 	bl	8002bbc <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b64      	cmp	r3, #100	; 0x64
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e286      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004324:	f7ff fbd2 	bl	8003acc <LL_RCC_HSE_IsReady>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f1      	bne.n	8004312 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d04c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433a:	f7ff fda8 	bl	8003e8e <LL_RCC_GetSysClkSource>
 800433e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004340:	f7ff fea1 	bl	8004086 <LL_RCC_PLL_GetMainSource>
 8004344:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	2b04      	cmp	r3, #4
 800434a:	d005      	beq.n	8004358 <HAL_RCC_OscConfig+0x200>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d10e      	bne.n	8004370 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e266      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fbf1 	bl	8003b50 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800436e:	e031      	b.n	80043d4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d019      	beq.n	80043ac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004378:	f7ff fbba 	bl	8003af0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe fc1e 	bl	8002bbc <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004384:	f7fe fc1a 	bl	8002bbc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e24d      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004396:	f7ff fbc9 	bl	8003b2c <LL_RCC_HSI_IsReady>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f1      	beq.n	8004384 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fbd3 	bl	8003b50 <LL_RCC_HSI_SetCalibTrimming>
 80043aa:	e013      	b.n	80043d4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ac:	f7ff fbaf 	bl	8003b0e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fe fc04 	bl	8002bbc <HAL_GetTick>
 80043b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b8:	f7fe fc00 	bl	8002bbc <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e233      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043ca:	f7ff fbaf 	bl	8003b2c <LL_RCC_HSI_IsReady>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f1      	bne.n	80043b8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a3 	beq.w	8004534 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d076      	beq.n	80044e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d046      	beq.n	8004490 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004402:	f7ff fc66 	bl	8003cd2 <LL_RCC_LSI1_IsReady>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d113      	bne.n	8004434 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800440c:	f7ff fc3f 	bl	8003c8e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004410:	f7fe fbd4 	bl	8002bbc <HAL_GetTick>
 8004414:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004418:	f7fe fbd0 	bl	8002bbc <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e203      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800442a:	f7ff fc52 	bl	8003cd2 <LL_RCC_LSI1_IsReady>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f1      	beq.n	8004418 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004434:	f7ff fc5f 	bl	8003cf6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fbc0 	bl	8002bbc <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004440:	f7fe fbbc 	bl	8002bbc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b03      	cmp	r3, #3
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1ef      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004452:	f7ff fc72 	bl	8003d3a <LL_RCC_LSI2_IsReady>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f1      	beq.n	8004440 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc7c 	bl	8003d5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004466:	f7ff fc23 	bl	8003cb0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446a:	f7fe fba7 	bl	8002bbc <HAL_GetTick>
 800446e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004472:	f7fe fba3 	bl	8002bbc <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e1d6      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004484:	f7ff fc25 	bl	8003cd2 <LL_RCC_LSI1_IsReady>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f1      	bne.n	8004472 <HAL_RCC_OscConfig+0x31a>
 800448e:	e051      	b.n	8004534 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004490:	f7ff fbfd 	bl	8003c8e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe fb92 	bl	8002bbc <HAL_GetTick>
 8004498:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800449a:	e00c      	b.n	80044b6 <HAL_RCC_OscConfig+0x35e>
 800449c:	20000008 	.word	0x20000008
 80044a0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044a4:	f7fe fb8a 	bl	8002bbc <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1bd      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044b6:	f7ff fc0c 	bl	8003cd2 <LL_RCC_LSI1_IsReady>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f1      	beq.n	80044a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80044c0:	f7ff fc2a 	bl	8003d18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044c6:	f7fe fb79 	bl	8002bbc <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1ac      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044d8:	f7ff fc2f 	bl	8003d3a <LL_RCC_LSI2_IsReady>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f1      	bne.n	80044c6 <HAL_RCC_OscConfig+0x36e>
 80044e2:	e027      	b.n	8004534 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044e4:	f7ff fc18 	bl	8003d18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fe fb68 	bl	8002bbc <HAL_GetTick>
 80044ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044f0:	f7fe fb64 	bl	8002bbc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e197      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004502:	f7ff fc1a 	bl	8003d3a <LL_RCC_LSI2_IsReady>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f1      	bne.n	80044f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800450c:	f7ff fbd0 	bl	8003cb0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fe fb54 	bl	8002bbc <HAL_GetTick>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004518:	f7fe fb50 	bl	8002bbc <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e183      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800452a:	f7ff fbd2 	bl	8003cd2 <LL_RCC_LSI1_IsReady>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f1      	bne.n	8004518 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05b      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004540:	4ba7      	ldr	r3, [pc, #668]	; (80047e0 <HAL_RCC_OscConfig+0x688>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d114      	bne.n	8004576 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800454c:	f7ff fa70 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004550:	f7fe fb34 	bl	8002bbc <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004558:	f7fe fb30 	bl	8002bbc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e163      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456a:	4b9d      	ldr	r3, [pc, #628]	; (80047e0 <HAL_RCC_OscConfig+0x688>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d102      	bne.n	8004584 <HAL_RCC_OscConfig+0x42c>
 800457e:	f7ff fb30 	bl	8003be2 <LL_RCC_LSE_Enable>
 8004582:	e00c      	b.n	800459e <HAL_RCC_OscConfig+0x446>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d104      	bne.n	8004596 <HAL_RCC_OscConfig+0x43e>
 800458c:	f7ff fb4b 	bl	8003c26 <LL_RCC_LSE_EnableBypass>
 8004590:	f7ff fb27 	bl	8003be2 <LL_RCC_LSE_Enable>
 8004594:	e003      	b.n	800459e <HAL_RCC_OscConfig+0x446>
 8004596:	f7ff fb35 	bl	8003c04 <LL_RCC_LSE_Disable>
 800459a:	f7ff fb55 	bl	8003c48 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d014      	beq.n	80045d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a6:	f7fe fb09 	bl	8002bbc <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fe fb05 	bl	8002bbc <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e136      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045c4:	f7ff fb51 	bl	8003c6a <LL_RCC_LSE_IsReady>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0ef      	beq.n	80045ae <HAL_RCC_OscConfig+0x456>
 80045ce:	e013      	b.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d0:	f7fe faf4 	bl	8002bbc <HAL_GetTick>
 80045d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d8:	f7fe faf0 	bl	8002bbc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e121      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045ee:	f7ff fb3c 	bl	8003c6a <LL_RCC_LSE_IsReady>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ef      	bne.n	80045d8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d02c      	beq.n	800465e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800460c:	f7ff fab5 	bl	8003b7a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fe fad4 	bl	8002bbc <HAL_GetTick>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004618:	f7fe fad0 	bl	8002bbc <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e103      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800462a:	f7ff fac8 	bl	8003bbe <LL_RCC_HSI48_IsReady>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f1      	beq.n	8004618 <HAL_RCC_OscConfig+0x4c0>
 8004634:	e013      	b.n	800465e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004636:	f7ff fab1 	bl	8003b9c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463a:	f7fe fabf 	bl	8002bbc <HAL_GetTick>
 800463e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004642:	f7fe fabb 	bl	8002bbc <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e0ee      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004654:	f7ff fab3 	bl	8003bbe <LL_RCC_HSI48_IsReady>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f1      	bne.n	8004642 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80e4 	beq.w	8004830 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004668:	f7ff fc11 	bl	8003e8e <LL_RCC_GetSysClkSource>
 800466c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	2b02      	cmp	r3, #2
 800467c:	f040 80b4 	bne.w	80047e8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	429a      	cmp	r2, r3
 800468c:	d123      	bne.n	80046d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d11c      	bne.n	80046d6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d114      	bne.n	80046d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d05d      	beq.n	8004792 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d058      	beq.n	800478e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0a1      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046ee:	f7ff fc84 	bl	8003ffa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046f2:	f7fe fa63 	bl	8002bbc <HAL_GetTick>
 80046f6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fa:	f7fe fa5f 	bl	8002bbc <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e092      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ef      	bne.n	80046fa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <HAL_RCC_OscConfig+0x68c>)
 8004722:	4013      	ands	r3, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472c:	4311      	orrs	r1, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004732:	0212      	lsls	r2, r2, #8
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004746:	430a      	orrs	r2, r1
 8004748:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474c:	4313      	orrs	r3, r2
 800474e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004750:	f7ff fc44 	bl	8003fdc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004762:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004764:	f7fe fa2a 	bl	8002bbc <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fe fa26 	bl	8002bbc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e059      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800478c:	e050      	b.n	8004830 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e04f      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d147      	bne.n	8004830 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047a0:	f7ff fc1c 	bl	8003fdc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b4:	f7fe fa02 	bl	8002bbc <HAL_GetTick>
 80047b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe f9fe 	bl	8002bbc <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e031      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ef      	beq.n	80047bc <HAL_RCC_OscConfig+0x664>
 80047dc:	e028      	b.n	8004830 <HAL_RCC_OscConfig+0x6d8>
 80047de:	bf00      	nop
 80047e0:	58000400 	.word	0x58000400
 80047e4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d01e      	beq.n	800482c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	f7ff fc04 	bl	8003ffa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fe f9e3 	bl	8002bbc <HAL_GetTick>
 80047f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fe f9df 	bl	8002bbc <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e012      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1ef      	bne.n	80047fa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_OscConfig+0x6e4>)
 8004826:	4013      	ands	r3, r2
 8004828:	60cb      	str	r3, [r1, #12]
 800482a:	e001      	b.n	8004830 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3734      	adds	r7, #52	; 0x34
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
 800483a:	bf00      	nop
 800483c:	eefefffc 	.word	0xeefefffc

08004840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e12d      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004854:	4b98      	ldr	r3, [pc, #608]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d91b      	bls.n	800489a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b95      	ldr	r3, [pc, #596]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f023 0207 	bic.w	r2, r3, #7
 800486a:	4993      	ldr	r1, [pc, #588]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004872:	f7fe f9a3 	bl	8002bbc <HAL_GetTick>
 8004876:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004878:	e008      	b.n	800488c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800487a:	f7fe f99f 	bl	8002bbc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e111      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488c:	4b8a      	ldr	r3, [pc, #552]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d1ef      	bne.n	800487a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d016      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fafb 	bl	8003ea6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048b0:	f7fe f984 	bl	8002bbc <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048b8:	f7fe f980 	bl	8002bbc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0f2      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ca:	f7ff fbe8 	bl	800409e <LL_RCC_IsActiveFlag_HPRE>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f1      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d016      	beq.n	800490e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff faf2 	bl	8003ece <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048ea:	f7fe f967 	bl	8002bbc <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f2:	f7fe f963 	bl	8002bbc <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e0d5      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004904:	f7ff fbdd 	bl	80040c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f1      	beq.n	80048f2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff faeb 	bl	8003efa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004924:	f7fe f94a 	bl	8002bbc <HAL_GetTick>
 8004928:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800492c:	f7fe f946 	bl	8002bbc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0b8      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800493e:	f7ff fbd3 	bl	80040e8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f1      	beq.n	800492c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fae5 	bl	8003f28 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800495e:	f7fe f92d 	bl	8002bbc <HAL_GetTick>
 8004962:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004966:	f7fe f929 	bl	8002bbc <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e09b      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004978:	f7ff fbc9 	bl	800410e <LL_RCC_IsActiveFlag_PPRE1>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f1      	beq.n	8004966 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d017      	beq.n	80049be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fadb 	bl	8003f50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800499a:	f7fe f90f 	bl	8002bbc <HAL_GetTick>
 800499e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049a2:	f7fe f90b 	bl	8002bbc <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e07d      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049b4:	f7ff fbbd 	bl	8004132 <LL_RCC_IsActiveFlag_PPRE2>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f1      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d043      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d106      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049d2:	f7ff f87b 	bl	8003acc <LL_RCC_HSE_IsReady>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11e      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e067      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d106      	bne.n	80049f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80049e8:	f7ff fb16 	bl	8004018 <LL_RCC_PLL_IsReady>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d113      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e05c      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80049fe:	f7ff f9e3 	bl	8003dc8 <LL_RCC_MSI_IsReady>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d108      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e051      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a0c:	f7ff f88e 	bl	8003b2c <LL_RCC_HSI_IsReady>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e04a      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fa21 	bl	8003e66 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a24:	f7fe f8ca 	bl	8002bbc <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fe f8c6 	bl	8002bbc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e036      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	f7ff fa24 	bl	8003e8e <LL_RCC_GetSysClkSource>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d1ec      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a52:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d21b      	bcs.n	8004a98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a60:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f023 0207 	bic.w	r2, r3, #7
 8004a68:	4913      	ldr	r1, [pc, #76]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a70:	f7fe f8a4 	bl	8002bbc <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a78:	f7fe f8a0 	bl	8002bbc <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e012      	b.n	8004ab0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_ClockConfig+0x278>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d1ef      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a98:	f000 f87e 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_RCC_ClockConfig+0x27c>)
 8004aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004aa2:	f7fe f897 	bl	8002bd4 <HAL_GetTickPrio>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe f839 	bl	8002b20 <HAL_InitTick>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	58004000 	.word	0x58004000
 8004abc:	20000008 	.word	0x20000008

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac6:	f7ff f9e2 	bl	8003e8e <LL_RCC_GetSysClkSource>
 8004aca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ad2:	f7ff f99e 	bl	8003e12 <LL_RCC_MSI_GetRange>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e04b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d102      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aee:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e045      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d10a      	bne.n	8004b10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004afa:	f7fe ffb7 	bl	8003a6c <LL_RCC_HSE_IsEnabledDiv2>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e03a      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b0a:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e037      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b10:	f7ff fab9 	bl	8004086 <LL_RCC_PLL_GetMainSource>
 8004b14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0x64>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x6a>
 8004b22:	e00d      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b26:	60bb      	str	r3, [r7, #8]
        break;
 8004b28:	e015      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b2a:	f7fe ff9f 	bl	8003a6c <LL_RCC_HSE_IsEnabledDiv2>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b34:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b36:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b38:	e00d      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b3a:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b3c:	60bb      	str	r3, [r7, #8]
        break;
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b40:	f7ff f967 	bl	8003e12 <LL_RCC_MSI_GetRange>
 8004b44:	4603      	mov	r3, r0
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b52:	60bb      	str	r3, [r7, #8]
        break;
 8004b54:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b56:	f7ff fa71 	bl	800403c <LL_RCC_PLL_GetN>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	fb03 f402 	mul.w	r4, r3, r2
 8004b62:	f7ff fa84 	bl	800406e <LL_RCC_PLL_GetDivider>
 8004b66:	4603      	mov	r3, r0
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b70:	f7ff fa71 	bl	8004056 <LL_RCC_PLL_GetR>
 8004b74:	4603      	mov	r3, r0
 8004b76:	0f5b      	lsrs	r3, r3, #29
 8004b78:	3301      	adds	r3, #1
 8004b7a:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0800e6c8 	.word	0x0800e6c8
 8004b90:	00f42400 	.word	0x00f42400
 8004b94:	01e84800 	.word	0x01e84800

08004b98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b598      	push	{r3, r4, r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b9c:	f7ff ff90 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	f7ff f9e9 	bl	8003f78 <LL_RCC_GetAHBPrescaler>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	4a03      	ldr	r2, [pc, #12]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x24>)
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd98      	pop	{r3, r4, r7, pc}
 8004bbc:	0800e668 	.word	0x0800e668

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b598      	push	{r3, r4, r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bc4:	f7ff ffe8 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4604      	mov	r4, r0
 8004bca:	f7ff f9ef 	bl	8003fac <LL_RCC_GetAPB1Prescaler>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd98      	pop	{r3, r4, r7, pc}
 8004be8:	0800e6a8 	.word	0x0800e6a8

08004bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bec:	b598      	push	{r3, r4, r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bf0:	f7ff ffd2 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	f7ff f9e5 	bl	8003fc4 <LL_RCC_GetAPB2Prescaler>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	0adb      	lsrs	r3, r3, #11
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	4a04      	ldr	r2, [pc, #16]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd98      	pop	{r3, r4, r7, pc}
 8004c14:	0800e6a8 	.word	0x0800e6a8

08004c18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c18:	b590      	push	{r4, r7, lr}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2bb0      	cmp	r3, #176	; 0xb0
 8004c24:	d903      	bls.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e007      	b.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 030f 	and.w	r3, r3, #15
 8004c36:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c3e:	f7ff f9a7 	bl	8003f90 <LL_RCC_GetAHB4Prescaler>
 8004c42:	4603      	mov	r3, r0
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4a0a      	ldr	r2, [pc, #40]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	0c9c      	lsrs	r4, r3, #18
 8004c62:	f7fe fef5 	bl	8003a50 <HAL_PWREx_GetVoltageRange>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f80c 	bl	8004c88 <RCC_SetFlashLatency>
 8004c70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	0800e6c8 	.word	0x0800e6c8
 8004c80:	0800e668 	.word	0x0800e668
 8004c84:	431bde83 	.word	0x431bde83

08004c88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b093      	sub	sp, #76	; 0x4c
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <RCC_SetFlashLatency+0xe8>)
 8004c94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <RCC_SetFlashLatency+0xec>)
 8004ca0:	f107 031c 	add.w	r3, r7, #28
 8004ca4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ca6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004caa:	4b33      	ldr	r3, [pc, #204]	; (8004d78 <RCC_SetFlashLatency+0xf0>)
 8004cac:	f107 040c 	add.w	r4, r7, #12
 8004cb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d11a      	bne.n	8004cf8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cc6:	e013      	b.n	8004cf0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	3348      	adds	r3, #72	; 0x48
 8004cce:	443b      	add	r3, r7
 8004cd0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d807      	bhi.n	8004cea <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	3348      	adds	r3, #72	; 0x48
 8004ce0:	443b      	add	r3, r7
 8004ce2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ce6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ce8:	e020      	b.n	8004d2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	3301      	adds	r3, #1
 8004cee:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d9e8      	bls.n	8004cc8 <RCC_SetFlashLatency+0x40>
 8004cf6:	e019      	b.n	8004d2c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	e013      	b.n	8004d26 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	3348      	adds	r3, #72	; 0x48
 8004d04:	443b      	add	r3, r7
 8004d06:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d807      	bhi.n	8004d20 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	3348      	adds	r3, #72	; 0x48
 8004d16:	443b      	add	r3, r7
 8004d18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d1e:	e005      	b.n	8004d2c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	3301      	adds	r3, #1
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d9e8      	bls.n	8004cfe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004d2c:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <RCC_SetFlashLatency+0xf4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 0207 	bic.w	r2, r3, #7
 8004d34:	4911      	ldr	r1, [pc, #68]	; (8004d7c <RCC_SetFlashLatency+0xf4>)
 8004d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d3c:	f7fd ff3e 	bl	8002bbc <HAL_GetTick>
 8004d40:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d42:	e008      	b.n	8004d56 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d44:	f7fd ff3a 	bl	8002bbc <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e007      	b.n	8004d66 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <RCC_SetFlashLatency+0xf4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1ef      	bne.n	8004d44 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	374c      	adds	r7, #76	; 0x4c
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd90      	pop	{r4, r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	0800d12c 	.word	0x0800d12c
 8004d74:	0800d13c 	.word	0x0800d13c
 8004d78:	0800d148 	.word	0x0800d148
 8004d7c:	58004000 	.word	0x58004000

08004d80 <LL_RCC_LSE_IsEnabled>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <LL_RCC_LSE_IsEnabled+0x18>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <LL_RCC_LSE_IsEnabled+0x1a>
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_LSE_IsReady>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d101      	bne.n	8004dbc <LL_RCC_LSE_IsReady+0x18>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <LL_RCC_LSE_IsReady+0x1a>
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_SetRFWKPClockSource>:
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <LL_RCC_SetSMPSClockSource>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	f023 0203 	bic.w	r2, r3, #3
 8004e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <LL_RCC_SetSMPSPrescaler>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <LL_RCC_SetUSARTClockSource>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e54:	f023 0203 	bic.w	r2, r3, #3
 8004e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_SetLPUARTClockSource>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_SetI2CClockSource>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_SetLPTIMClockSource>:
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	041b      	lsls	r3, r3, #16
 8004eec:	43db      	mvns	r3, r3
 8004eee:	401a      	ands	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_SetSAIClockSource>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_SetRNGClockSource>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f46:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_SetCLK48ClockSource>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_SetUSBClockSource>:
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff ffe3 	bl	8004f62 <LL_RCC_SetCLK48ClockSource>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <LL_RCC_SetADCClockSource>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_SetRTCClockSource>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <LL_RCC_GetRTCClockSource>:
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_ForceBackupDomainReset>:
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_PLLSAI1_Enable>:
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005068:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506c:	6013      	str	r3, [r2, #0]
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <LL_RCC_PLLSAI1_Disable>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_RCC_PLLSAI1_IsReady>:
{
 8005096:	b480      	push	{r7}
 8005098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a8:	d101      	bne.n	80050ae <LL_RCC_PLLSAI1_IsReady+0x18>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b088      	sub	sp, #32
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80050c2:	2300      	movs	r3, #0
 80050c4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80050c6:	2300      	movs	r3, #0
 80050c8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d034      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050de:	d021      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80050e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e4:	d81b      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ea:	d01d      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f0:	d815      	bhi.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fa:	d110      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80050fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800510c:	e00d      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f947 	bl	80053a6 <RCCEx_PLLSAI1_ConfigNP>
 8005118:	4603      	mov	r3, r0
 800511a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800511c:	e005      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	77fb      	strb	r3, [r7, #31]
        break;
 8005122:	e002      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005124:	bf00      	nop
 8005126:	e000      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fee8 	bl	8004f0a <LL_RCC_SetSAIClockSource>
 800513a:	e001      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7ffb      	ldrb	r3, [r7, #31]
 800513e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	2b00      	cmp	r3, #0
 800514a:	d046      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800514c:	f7ff ff56 	bl	8004ffc <LL_RCC_GetRTCClockSource>
 8005150:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	429a      	cmp	r2, r3
 800515a:	d03c      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800515c:	f7fe fc68 	bl	8003a30 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d105      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff ff30 	bl	8004fd0 <LL_RCC_SetRTCClockSource>
 8005170:	e02e      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800517c:	f7ff ff4b 	bl	8005016 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005180:	f7ff ff5a 	bl	8005038 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800519c:	f7ff fdf0 	bl	8004d80 <LL_RCC_LSE_IsEnabled>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d114      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051a6:	f7fd fd09 	bl	8002bbc <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80051ac:	e00b      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd fd05 	bl	8002bbc <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d902      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	77fb      	strb	r3, [r7, #31]
              break;
 80051c4:	e004      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051c6:	f7ff fded 	bl	8004da4 <LL_RCC_LSE_IsReady>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d1ee      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051d0:	7ffb      	ldrb	r3, [r7, #31]
 80051d2:	77bb      	strb	r3, [r7, #30]
 80051d4:	e001      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
 80051d8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fe2a 	bl	8004e44 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fe35 	bl	8004e70 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fe5d 	bl	8004ed6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fe52 	bl	8004ed6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b00      	cmp	r3, #0
 800523c:	d004      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fe2a 	bl	8004e9c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0308 	and.w	r3, r3, #8
 8005250:	2b00      	cmp	r3, #0
 8005252:	d004      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fe1f 	bl	8004e9c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005266:	2b00      	cmp	r3, #0
 8005268:	d022      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff fe8d 	bl	8004f8e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527c:	d107      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800527e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800528c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005296:	d10b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f8dd 	bl	800545c <RCCEx_PLLSAI1_ConfigNQ>
 80052a2:	4603      	mov	r3, r0
 80052a4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052a6:	7ffb      	ldrb	r3, [r7, #31]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c4:	d008      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ce:	d003      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff fe2a 	bl	8004f36 <LL_RCC_SetRNGClockSource>
 80052e2:	e00a      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7ff fe21 	bl	8004f36 <LL_RCC_SetRNGClockSource>
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fe34 	bl	8004f62 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005302:	d107      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800530e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	2b00      	cmp	r3, #0
 800531e:	d022      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fe3d 	bl	8004fa4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005332:	d107      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800534c:	d10b      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f8dd 	bl	8005512 <RCCEx_PLLSAI1_ConfigNR>
 8005358:	4603      	mov	r3, r0
 800535a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800535c:	7ffb      	ldrb	r3, [r7, #31]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005362:	7ffb      	ldrb	r3, [r7, #31]
 8005364:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fd26 	bl	8004dc8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d009      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fd45 	bl	8004e1c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff fd2c 	bl	8004df4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800539c:	7fbb      	ldrb	r3, [r7, #30]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053b2:	f7ff fe61 	bl	8005078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053b6:	f7fd fc01 	bl	8002bbc <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053bc:	e009      	b.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053be:	f7fd fbfd 	bl	8002bbc <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d902      	bls.n	80053d2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	73fb      	strb	r3, [r7, #15]
      break;
 80053d0:	e004      	b.n	80053dc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053d2:	f7ff fe60 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d137      	bne.n	8005452 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f6:	4313      	orrs	r3, r2
 80053f8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80053fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540c:	4313      	orrs	r3, r2
 800540e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005410:	f7ff fe23 	bl	800505a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005414:	f7fd fbd2 	bl	8002bbc <HAL_GetTick>
 8005418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800541a:	e009      	b.n	8005430 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800541c:	f7fd fbce 	bl	8002bbc <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d902      	bls.n	8005430 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	73fb      	strb	r3, [r7, #15]
        break;
 800542e:	e004      	b.n	800543a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005430:	f7ff fe31 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 8005434:	4603      	mov	r3, r0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d1f0      	bne.n	800541c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800543a:	7bfb      	ldrb	r3, [r7, #15]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005468:	f7ff fe06 	bl	8005078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800546c:	f7fd fba6 	bl	8002bbc <HAL_GetTick>
 8005470:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005472:	e009      	b.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005474:	f7fd fba2 	bl	8002bbc <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	73fb      	strb	r3, [r7, #15]
      break;
 8005486:	e004      	b.n	8005492 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005488:	f7ff fe05 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d137      	bne.n	8005508 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054c6:	f7ff fdc8 	bl	800505a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ca:	f7fd fb77 	bl	8002bbc <HAL_GetTick>
 80054ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054d0:	e009      	b.n	80054e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d2:	f7fd fb73 	bl	8002bbc <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d902      	bls.n	80054e6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	73fb      	strb	r3, [r7, #15]
        break;
 80054e4:	e004      	b.n	80054f0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054e6:	f7ff fdd6 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d1f0      	bne.n	80054d2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d108      	bne.n	8005508 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005504:	4313      	orrs	r3, r2
 8005506:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800551e:	f7ff fdab 	bl	8005078 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005522:	f7fd fb4b 	bl	8002bbc <HAL_GetTick>
 8005526:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005528:	e009      	b.n	800553e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552a:	f7fd fb47 	bl	8002bbc <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d902      	bls.n	800553e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	73fb      	strb	r3, [r7, #15]
      break;
 800553c:	e004      	b.n	8005548 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800553e:	f7ff fdaa 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f0      	bne.n	800552a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d137      	bne.n	80055be <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005562:	4313      	orrs	r3, r2
 8005564:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005578:	4313      	orrs	r3, r2
 800557a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800557c:	f7ff fd6d 	bl	800505a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005580:	f7fd fb1c 	bl	8002bbc <HAL_GetTick>
 8005584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005586:	e009      	b.n	800559c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005588:	f7fd fb18 	bl	8002bbc <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d902      	bls.n	800559c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	73fb      	strb	r3, [r7, #15]
        break;
 800559a:	e004      	b.n	80055a6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800559c:	f7ff fd7b 	bl	8005096 <LL_RCC_PLLSAI1_IsReady>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d1f0      	bne.n	8005588 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	691a      	ldr	r2, [r3, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ba:	4313      	orrs	r3, r2
 80055bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e09f      	b.n	800571a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fd f8b0 	bl	8002754 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055fc:	4b49      	ldr	r3, [pc, #292]	; (8005724 <HAL_RTC_Init+0x15c>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d07e      	beq.n	8005706 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	22ca      	movs	r2, #202	; 0xca
 800560e:	625a      	str	r2, [r3, #36]	; 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2253      	movs	r2, #83	; 0x53
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f8ab 	bl	8005774 <RTC_EnterInitMode>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	22ff      	movs	r2, #255	; 0xff
 800562a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2204      	movs	r2, #4
 8005630:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e067      	b.n	800570a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6899      	ldr	r1, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	68d2      	ldr	r2, [r2, #12]
 8005674:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6919      	ldr	r1, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	041a      	lsls	r2, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005698:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0203 	bic.w	r2, r2, #3
 80056a8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d113      	bne.n	80056f8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f829 	bl	8005728 <HAL_RTC_WaitForSynchro>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00d      	beq.n	80056f8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	22ff      	movs	r2, #255	; 0xff
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2204      	movs	r2, #4
 80056e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e010      	b.n	800571a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
 8005704:	e001      	b.n	800570a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40002800 	.word	0x40002800

08005728 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800573e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005740:	f7fd fa3c 	bl	8002bbc <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005746:	e009      	b.n	800575c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005748:	f7fd fa38 	bl	8002bbc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005756:	d901      	bls.n	800575c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e007      	b.n	800576c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ee      	beq.n	8005748 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005792:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005794:	f7fd fa12 	bl	8002bbc <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800579a:	e009      	b.n	80057b0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800579c:	f7fd fa0e 	bl	8002bbc <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057aa:	d901      	bls.n	80057b0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e007      	b.n	80057c0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057de:	2302      	movs	r3, #2
 80057e0:	e0a8      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ca      	movs	r2, #202	; 0xca
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2253      	movs	r2, #83	; 0x53
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005810:	f7fd f9d4 	bl	8002bbc <HAL_GetTick>
 8005814:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005816:	e015      	b.n	8005844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005818:	f7fd f9d0 	bl	8002bbc <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005826:	d90d      	bls.n	8005844 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e077      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e2      	bne.n	8005818 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005860:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005872:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005874:	f7fd f9a2 	bl	8002bbc <HAL_GetTick>
 8005878:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800587a:	e015      	b.n	80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800587c:	f7fd f99e 	bl	8002bbc <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588a:	d90d      	bls.n	80058a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	22ff      	movs	r2, #255	; 0xff
 8005892:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2203      	movs	r2, #3
 8005898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e045      	b.n	8005934 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0e2      	beq.n	800587c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0207 	bic.w	r2, r2, #7
 80058cc:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005908:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005918:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	22ff      	movs	r2, #255	; 0xff
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	58000800 	.word	0x58000800

08005940 <LL_RCC_GetUSARTClockSource>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4013      	ands	r3, r2
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_RCC_GetLPUARTClockSource>:
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4013      	ands	r3, r2
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e04a      	b.n	8005a28 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	2b00      	cmp	r3, #0
 800599a:	d106      	bne.n	80059aa <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7fc fe5d 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2224      	movs	r2, #36	; 0x24
 80059ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fe1c 	bl	8006608 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fbf1 	bl	80061b8 <UART_SetConfig>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e023      	b.n	8005a28 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80059fe:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0208 	orr.w	r2, r2, #8
 8005a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fe93 	bl	800674c <UART_CheckIdleState>
 8005a26:	4603      	mov	r3, r0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d167      	bne.n	8005b18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Transmit_DMA+0x24>
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e060      	b.n	8005b1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	88fa      	ldrh	r2, [r7, #6]
 8005a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d028      	beq.n	8005ad8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <HAL_UART_Transmit_DMA+0xf4>)
 8005a8c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a92:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <HAL_UART_Transmit_DMA+0xf8>)
 8005a94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9a:	4a24      	ldr	r2, [pc, #144]	; (8005b2c <HAL_UART_Transmit_DMA+0xfc>)
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3328      	adds	r3, #40	; 0x28
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	f7fd fae5 	bl	8003088 <HAL_DMA_Start_IT>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e020      	b.n	8005b1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2240      	movs	r2, #64	; 0x40
 8005ade:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	613b      	str	r3, [r7, #16]
   return(result);
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	623a      	str	r2, [r7, #32]
 8005b02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	6a3a      	ldr	r2, [r7, #32]
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e000      	b.n	8005b1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3728      	adds	r7, #40	; 0x28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08006ac9 	.word	0x08006ac9
 8005b28:	08006b63 	.word	0x08006b63
 8005b2c:	08006b7f 	.word	0x08006b7f

08005b30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b0ba      	sub	sp, #232	; 0xe8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b5e:	4013      	ands	r3, r2
 8005b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0320 	and.w	r3, r3, #32
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d015      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 82e3 	beq.w	8006160 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	4798      	blx	r3
      }
      return;
 8005ba2:	e2dd      	b.n	8006160 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 8123 	beq.w	8005df4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005bae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005bb2:	4b8d      	ldr	r3, [pc, #564]	; (8005de8 <HAL_UART_IRQHandler+0x2b8>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bbe:	4b8b      	ldr	r3, [pc, #556]	; (8005dec <HAL_UART_IRQHandler+0x2bc>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8116 	beq.w	8005df4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d011      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xc8>
 8005bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2201      	movs	r2, #1
 8005be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d011      	beq.n	8005c28 <HAL_UART_IRQHandler+0xf8>
 8005c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2202      	movs	r2, #2
 8005c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1e:	f043 0204 	orr.w	r2, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d011      	beq.n	8005c58 <HAL_UART_IRQHandler+0x128>
 8005c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2204      	movs	r2, #4
 8005c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c68:	f003 0320 	and.w	r3, r3, #32
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d105      	bne.n	8005c7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005c70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c74:	4b5c      	ldr	r3, [pc, #368]	; (8005de8 <HAL_UART_IRQHandler+0x2b8>)
 8005c76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2208      	movs	r2, #8
 8005c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	f043 0208 	orr.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x196>
 8005ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8249 	beq.w	8006164 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d013      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d105      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d005      	beq.n	8005d2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d054      	beq.n	8005dd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fe66 	bl	80069fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	d146      	bne.n	8005dcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3308      	adds	r3, #8
 8005d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1d9      	bne.n	8005d3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d017      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <HAL_UART_IRQHandler+0x2c0>)
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7fd fa49 	bl	800323c <HAL_DMA_Abort_IT>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d019      	beq.n	8005de4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc2:	e00f      	b.n	8005de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f9e1 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dca:	e00b      	b.n	8005de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f9dd 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd2:	e007      	b.n	8005de4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9d9 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005de2:	e1bf      	b.n	8006164 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	bf00      	nop
    return;
 8005de6:	e1bd      	b.n	8006164 <HAL_UART_IRQHandler+0x634>
 8005de8:	10000001 	.word	0x10000001
 8005dec:	04000120 	.word	0x04000120
 8005df0:	08006bff 	.word	0x08006bff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	f040 8153 	bne.w	80060a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 814c 	beq.w	80060a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8145 	beq.w	80060a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2210      	movs	r2, #16
 8005e20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2c:	2b40      	cmp	r3, #64	; 0x40
 8005e2e:	f040 80bb 	bne.w	8005fa8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 818f 	beq.w	8006168 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e54:	429a      	cmp	r2, r3
 8005e56:	f080 8187 	bcs.w	8006168 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f040 8087 	bne.w	8005f86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ea6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1da      	bne.n	8005e78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ed4:	f023 0301 	bic.w	r3, r3, #1
 8005ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ee6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e1      	bne.n	8005ec2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f2a:	e841 2300 	strex	r3, r2, [r1]
 8005f2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1e3      	bne.n	8005efe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	f023 0310 	bic.w	r3, r3, #16
 8005f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e4      	bne.n	8005f44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fd f8fc 	bl	800317e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8fd 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fa6:	e0df      	b.n	8006168 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80d1 	beq.w	800616c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005fca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80cc 	beq.w	800616c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e4      	bne.n	8005fd4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3308      	adds	r3, #8
 8006010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	623b      	str	r3, [r7, #32]
   return(result);
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006032:	633a      	str	r2, [r7, #48]	; 0x30
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e1      	bne.n	800600a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	60fb      	str	r3, [r7, #12]
   return(result);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0310 	bic.w	r3, r3, #16
 800606e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	69b9      	ldr	r1, [r7, #24]
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	617b      	str	r3, [r7, #20]
   return(result);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e4      	bne.n	800605a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f87f 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060a2:	e063      	b.n	800616c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <HAL_UART_IRQHandler+0x59e>
 80060b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80060c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fdda 	bl	8006c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060cc:	e051      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80060ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d014      	beq.n	8006104 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80060da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d105      	bne.n	80060f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80060e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d008      	beq.n	8006104 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d03a      	beq.n	8006170 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
    }
    return;
 8006102:	e035      	b.n	8006170 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d009      	beq.n	8006124 <HAL_UART_IRQHandler+0x5f4>
 8006110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fd84 	bl	8006c2a <UART_EndTransmit_IT>
    return;
 8006122:	e026      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_UART_IRQHandler+0x614>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fdb3 	bl	8006ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006142:	e016      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d010      	beq.n	8006172 <HAL_UART_IRQHandler+0x642>
 8006150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006154:	2b00      	cmp	r3, #0
 8006156:	da0c      	bge.n	8006172 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fd9b 	bl	8006c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800615e:	e008      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
      return;
 8006160:	bf00      	nop
 8006162:	e006      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
    return;
 8006164:	bf00      	nop
 8006166:	e004      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
      return;
 8006168:	bf00      	nop
 800616a:	e002      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
      return;
 800616c:	bf00      	nop
 800616e:	e000      	b.n	8006172 <HAL_UART_IRQHandler+0x642>
    return;
 8006170:	bf00      	nop
  }
}
 8006172:	37e8      	adds	r7, #232	; 0xe8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061bc:	b08c      	sub	sp, #48	; 0x30
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	4313      	orrs	r3, r2
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4baf      	ldr	r3, [pc, #700]	; (80064a4 <UART_SetConfig+0x2ec>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061f0:	430b      	orrs	r3, r1
 80061f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4aa4      	ldr	r2, [pc, #656]	; (80064a8 <UART_SetConfig+0x2f0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006220:	4313      	orrs	r3, r2
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800622e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006238:	430b      	orrs	r3, r1
 800623a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	f023 010f 	bic.w	r1, r3, #15
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a95      	ldr	r2, [pc, #596]	; (80064ac <UART_SetConfig+0x2f4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d125      	bne.n	80062a8 <UART_SetConfig+0xf0>
 800625c:	2003      	movs	r0, #3
 800625e:	f7ff fb6f 	bl	8005940 <LL_RCC_GetUSARTClockSource>
 8006262:	4603      	mov	r3, r0
 8006264:	2b03      	cmp	r3, #3
 8006266:	d81b      	bhi.n	80062a0 <UART_SetConfig+0xe8>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0xb8>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006281 	.word	0x08006281
 8006274:	08006291 	.word	0x08006291
 8006278:	08006289 	.word	0x08006289
 800627c:	08006299 	.word	0x08006299
 8006280:	2301      	movs	r3, #1
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e042      	b.n	800630e <UART_SetConfig+0x156>
 8006288:	2302      	movs	r3, #2
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e03e      	b.n	800630e <UART_SetConfig+0x156>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006296:	e03a      	b.n	800630e <UART_SetConfig+0x156>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800629e:	e036      	b.n	800630e <UART_SetConfig+0x156>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a6:	e032      	b.n	800630e <UART_SetConfig+0x156>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a7e      	ldr	r2, [pc, #504]	; (80064a8 <UART_SetConfig+0x2f0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d12a      	bne.n	8006308 <UART_SetConfig+0x150>
 80062b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80062b6:	f7ff fb53 	bl	8005960 <LL_RCC_GetLPUARTClockSource>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c0:	d01a      	beq.n	80062f8 <UART_SetConfig+0x140>
 80062c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c6:	d81b      	bhi.n	8006300 <UART_SetConfig+0x148>
 80062c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062cc:	d00c      	beq.n	80062e8 <UART_SetConfig+0x130>
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d2:	d815      	bhi.n	8006300 <UART_SetConfig+0x148>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <UART_SetConfig+0x128>
 80062d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062dc:	d008      	beq.n	80062f0 <UART_SetConfig+0x138>
 80062de:	e00f      	b.n	8006300 <UART_SetConfig+0x148>
 80062e0:	2300      	movs	r3, #0
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e012      	b.n	800630e <UART_SetConfig+0x156>
 80062e8:	2302      	movs	r3, #2
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ee:	e00e      	b.n	800630e <UART_SetConfig+0x156>
 80062f0:	2304      	movs	r3, #4
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062f6:	e00a      	b.n	800630e <UART_SetConfig+0x156>
 80062f8:	2308      	movs	r3, #8
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062fe:	e006      	b.n	800630e <UART_SetConfig+0x156>
 8006300:	2310      	movs	r3, #16
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006306:	e002      	b.n	800630e <UART_SetConfig+0x156>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <UART_SetConfig+0x2f0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	f040 8097 	bne.w	8006448 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800631a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800631e:	2b08      	cmp	r3, #8
 8006320:	d823      	bhi.n	800636a <UART_SetConfig+0x1b2>
 8006322:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <UART_SetConfig+0x170>)
 8006324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006328:	0800634d 	.word	0x0800634d
 800632c:	0800636b 	.word	0x0800636b
 8006330:	08006355 	.word	0x08006355
 8006334:	0800636b 	.word	0x0800636b
 8006338:	0800635b 	.word	0x0800635b
 800633c:	0800636b 	.word	0x0800636b
 8006340:	0800636b 	.word	0x0800636b
 8006344:	0800636b 	.word	0x0800636b
 8006348:	08006363 	.word	0x08006363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634c:	f7fe fc38 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8006350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006354:	4b56      	ldr	r3, [pc, #344]	; (80064b0 <UART_SetConfig+0x2f8>)
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006358:	e00d      	b.n	8006376 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800635a:	f7fe fbb1 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 800635e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006360:	e009      	b.n	8006376 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006368:	e005      	b.n	8006376 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006374:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 812b 	beq.w	80065d4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	4a4c      	ldr	r2, [pc, #304]	; (80064b4 <UART_SetConfig+0x2fc>)
 8006384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006388:	461a      	mov	r2, r3
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006390:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	4413      	add	r3, r2
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d305      	bcc.n	80063ae <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d903      	bls.n	80063b6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063b4:	e10e      	b.n	80065d4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	2200      	movs	r2, #0
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	60fa      	str	r2, [r7, #12]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	4a3c      	ldr	r2, [pc, #240]	; (80064b4 <UART_SetConfig+0x2fc>)
 80063c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2200      	movs	r2, #0
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063d8:	f7fa fa10 	bl	80007fc <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4610      	mov	r0, r2
 80063e2:	4619      	mov	r1, r3
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	020b      	lsls	r3, r1, #8
 80063ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063f2:	0202      	lsls	r2, r0, #8
 80063f4:	6979      	ldr	r1, [r7, #20]
 80063f6:	6849      	ldr	r1, [r1, #4]
 80063f8:	0849      	lsrs	r1, r1, #1
 80063fa:	2000      	movs	r0, #0
 80063fc:	460c      	mov	r4, r1
 80063fe:	4605      	mov	r5, r0
 8006400:	eb12 0804 	adds.w	r8, r2, r4
 8006404:	eb43 0905 	adc.w	r9, r3, r5
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	469a      	mov	sl, r3
 8006410:	4693      	mov	fp, r2
 8006412:	4652      	mov	r2, sl
 8006414:	465b      	mov	r3, fp
 8006416:	4640      	mov	r0, r8
 8006418:	4649      	mov	r1, r9
 800641a:	f7fa f9ef 	bl	80007fc <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4613      	mov	r3, r2
 8006424:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800642c:	d308      	bcc.n	8006440 <UART_SetConfig+0x288>
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006434:	d204      	bcs.n	8006440 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	e0c9      	b.n	80065d4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006446:	e0c5      	b.n	80065d4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006450:	d16d      	bne.n	800652e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006456:	3b01      	subs	r3, #1
 8006458:	2b07      	cmp	r3, #7
 800645a:	d82d      	bhi.n	80064b8 <UART_SetConfig+0x300>
 800645c:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <UART_SetConfig+0x2ac>)
 800645e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006462:	bf00      	nop
 8006464:	08006485 	.word	0x08006485
 8006468:	0800648d 	.word	0x0800648d
 800646c:	080064b9 	.word	0x080064b9
 8006470:	08006493 	.word	0x08006493
 8006474:	080064b9 	.word	0x080064b9
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	0800649b 	.word	0x0800649b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006484:	f7fe fbb2 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8006488:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800648a:	e01b      	b.n	80064c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <UART_SetConfig+0x2f8>)
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006490:	e018      	b.n	80064c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006492:	f7fe fb15 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006498:	e014      	b.n	80064c4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800649a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064a0:	e010      	b.n	80064c4 <UART_SetConfig+0x30c>
 80064a2:	bf00      	nop
 80064a4:	cfff69f3 	.word	0xcfff69f3
 80064a8:	40008000 	.word	0x40008000
 80064ac:	40013800 	.word	0x40013800
 80064b0:	00f42400 	.word	0x00f42400
 80064b4:	0800e708 	.word	0x0800e708
      default:
        pclk = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8084 	beq.w	80065d4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d0:	4a4b      	ldr	r2, [pc, #300]	; (8006600 <UART_SetConfig+0x448>)
 80064d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d6:	461a      	mov	r2, r3
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	fbb3 f3f2 	udiv	r3, r3, r2
 80064de:	005a      	lsls	r2, r3, #1
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	441a      	add	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d916      	bls.n	8006526 <UART_SetConfig+0x36e>
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d212      	bcs.n	8006526 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f023 030f 	bic.w	r3, r3, #15
 8006508:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	085b      	lsrs	r3, r3, #1
 800650e:	b29b      	uxth	r3, r3
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	b29a      	uxth	r2, r3
 8006516:	8bfb      	ldrh	r3, [r7, #30]
 8006518:	4313      	orrs	r3, r2
 800651a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	8bfa      	ldrh	r2, [r7, #30]
 8006522:	60da      	str	r2, [r3, #12]
 8006524:	e056      	b.n	80065d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800652c:	e052      	b.n	80065d4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800652e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006532:	3b01      	subs	r3, #1
 8006534:	2b07      	cmp	r3, #7
 8006536:	d822      	bhi.n	800657e <UART_SetConfig+0x3c6>
 8006538:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x388>)
 800653a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653e:	bf00      	nop
 8006540:	08006561 	.word	0x08006561
 8006544:	08006569 	.word	0x08006569
 8006548:	0800657f 	.word	0x0800657f
 800654c:	0800656f 	.word	0x0800656f
 8006550:	0800657f 	.word	0x0800657f
 8006554:	0800657f 	.word	0x0800657f
 8006558:	0800657f 	.word	0x0800657f
 800655c:	08006577 	.word	0x08006577
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006560:	f7fe fb44 	bl	8004bec <HAL_RCC_GetPCLK2Freq>
 8006564:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006566:	e010      	b.n	800658a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006568:	4b26      	ldr	r3, [pc, #152]	; (8006604 <UART_SetConfig+0x44c>)
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800656c:	e00d      	b.n	800658a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656e:	f7fe faa7 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006574:	e009      	b.n	800658a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800657c:	e005      	b.n	800658a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006588:	bf00      	nop
    }

    if (pclk != 0U)
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	2b00      	cmp	r3, #0
 800658e:	d021      	beq.n	80065d4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <UART_SetConfig+0x448>)
 8006596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800659a:	461a      	mov	r2, r3
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	fbb3 f2f2 	udiv	r2, r3, r2
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	441a      	add	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d909      	bls.n	80065ce <UART_SetConfig+0x416>
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d205      	bcs.n	80065ce <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	e002      	b.n	80065d4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2200      	movs	r2, #0
 80065e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065f0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3730      	adds	r7, #48	; 0x30
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	0800e708 	.word	0x0800e708
 8006604:	00f42400 	.word	0x00f42400

08006608 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f003 0308 	and.w	r3, r3, #8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	f003 0320 	and.w	r3, r3, #32
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	430a      	orrs	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01a      	beq.n	800671e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006706:	d10a      	bne.n	800671e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	605a      	str	r2, [r3, #4]
  }
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b098      	sub	sp, #96	; 0x60
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800675c:	f7fc fa2e 	bl	8002bbc <HAL_GetTick>
 8006760:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b08      	cmp	r3, #8
 800676e:	d12f      	bne.n	80067d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006778:	2200      	movs	r2, #0
 800677a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f88e 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d022      	beq.n	80067d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800679e:	653b      	str	r3, [r7, #80]	; 0x50
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	647b      	str	r3, [r7, #68]	; 0x44
 80067aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e6      	bne.n	800678a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e063      	b.n	8006898 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d149      	bne.n	8006872 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e6:	2200      	movs	r2, #0
 80067e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f857 	bl	80068a0 <UART_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d03c      	beq.n	8006872 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	623b      	str	r3, [r7, #32]
   return(result);
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800680c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
 8006818:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800681c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e6      	bne.n	80067f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	60fb      	str	r3, [r7, #12]
   return(result);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684a:	61fa      	str	r2, [r7, #28]
 800684c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	69b9      	ldr	r1, [r7, #24]
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	617b      	str	r3, [r7, #20]
   return(result);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e5      	bne.n	800682a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e012      	b.n	8006898 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3758      	adds	r7, #88	; 0x58
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b0:	e04f      	b.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b8:	d04b      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fc f97f 	bl	8002bbc <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e04e      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d037      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	2b80      	cmp	r3, #128	; 0x80
 80068e6:	d034      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b40      	cmp	r3, #64	; 0x40
 80068ec:	d031      	beq.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d110      	bne.n	800691e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2208      	movs	r2, #8
 8006902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f879 	bl	80069fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2208      	movs	r2, #8
 800690e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e029      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692c:	d111      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f85f 	bl	80069fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e00f      	b.n	8006972 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4013      	ands	r3, r2
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	429a      	cmp	r2, r3
 8006960:	bf0c      	ite	eq
 8006962:	2301      	moveq	r3, #1
 8006964:	2300      	movne	r3, #0
 8006966:	b2db      	uxtb	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	429a      	cmp	r2, r3
 800696e:	d0a0      	beq.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800697a:	b480      	push	{r7}
 800697c:	b08f      	sub	sp, #60	; 0x3c
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069d4:	61ba      	str	r2, [r7, #24]
 80069d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6979      	ldr	r1, [r7, #20]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	613b      	str	r3, [r7, #16]
   return(result);
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e5      	bne.n	80069b4 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80069f0:	bf00      	nop
 80069f2:	373c      	adds	r7, #60	; 0x3c
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b095      	sub	sp, #84	; 0x54
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a22:	643b      	str	r3, [r7, #64]	; 0x40
 8006a24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e6      	bne.n	8006a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3308      	adds	r3, #8
 8006a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e3      	bne.n	8006a36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d118      	bne.n	8006aa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	e853 3f00 	ldrex	r3, [r3]
 8006a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 0310 	bic.w	r3, r3, #16
 8006a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	e841 2300 	strex	r3, r2, [r1]
 8006aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1e6      	bne.n	8006a76 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006abc:	bf00      	nop
 8006abe:	3754      	adds	r7, #84	; 0x54
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b090      	sub	sp, #64	; 0x40
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d137      	bne.n	8006b54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	623b      	str	r3, [r7, #32]
   return(result);
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b0c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e5      	bne.n	8006aec <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	69b9      	ldr	r1, [r7, #24]
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b52:	e002      	b.n	8006b5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006b56:	f7fb fae1 	bl	800211c <HAL_UART_TxCpltCallback>
}
 8006b5a:	bf00      	nop
 8006b5c:	3740      	adds	r7, #64	; 0x40
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff fb01 	bl	8006178 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d109      	bne.n	8006bbe <UART_DMAError+0x40>
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	2b21      	cmp	r3, #33	; 0x21
 8006bae:	d106      	bne.n	8006bbe <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006bb8:	6978      	ldr	r0, [r7, #20]
 8006bba:	f7ff fede 	bl	800697a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	d109      	bne.n	8006be0 <UART_DMAError+0x62>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b22      	cmp	r3, #34	; 0x22
 8006bd0:	d106      	bne.n	8006be0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff ff0e 	bl	80069fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be6:	f043 0210 	orr.w	r2, r3, #16
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bf0:	6978      	ldr	r0, [r7, #20]
 8006bf2:	f7ff facb 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf6:	bf00      	nop
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f7ff fab5 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6979      	ldr	r1, [r7, #20]
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fb fa52 	bl	800211c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c78:	bf00      	nop
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e027      	b.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e02d      	b.n	8006da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f850 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f812 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	0800e720 	.word	0x0800e720
 8006ec0:	0800e728 	.word	0x0800e728

08006ec4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	2218      	movs	r2, #24
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 f8d8 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006edc:	233f      	movs	r3, #63	; 0x3f
 8006ede:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006ee0:	2381      	movs	r3, #129	; 0x81
 8006ee2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006ee4:	1dfb      	adds	r3, r7, #7
 8006ee6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fb54 	bl	80085a0 <hci_send_req>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da01      	bge.n	8006f02 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006efe:	23ff      	movs	r3, #255	; 0xff
 8006f00:	e000      	b.n	8006f04 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006f02:	79fb      	ldrb	r3, [r7, #7]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006f0c:	b5b0      	push	{r4, r5, r7, lr}
 8006f0e:	b0ce      	sub	sp, #312	; 0x138
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4605      	mov	r5, r0
 8006f14:	460c      	mov	r4, r1
 8006f16:	4610      	mov	r0, r2
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f1e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f22:	462a      	mov	r2, r5
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f2a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f2e:	4622      	mov	r2, r4
 8006f30:	801a      	strh	r2, [r3, #0]
 8006f32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f36:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f42:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006f46:	460a      	mov	r2, r1
 8006f48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006f4a:	f107 0310 	add.w	r3, r7, #16
 8006f4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006f52:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006f56:	3308      	adds	r3, #8
 8006f58:	f107 0210 	add.w	r2, r7, #16
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006f62:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006f66:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006f6a:	4413      	add	r3, r2
 8006f6c:	3309      	adds	r3, #9
 8006f6e:	f107 0210 	add.w	r2, r7, #16
 8006f72:	4413      	add	r3, r2
 8006f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006f8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f92:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006fa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fa8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006fb0:	8812      	ldrh	r2, [r2, #0]
 8006fb2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006fb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fba:	3302      	adds	r3, #2
 8006fbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fc4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fc8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006fcc:	8812      	ldrh	r2, [r2, #0]
 8006fce:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006fdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006fe0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fe4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ffa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006ffe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007000:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007004:	3301      	adds	r3, #1
 8007006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800700a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800700e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007012:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007018:	3301      	adds	r3, #1
 800701a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800701e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007022:	3308      	adds	r3, #8
 8007024:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007028:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f81d 	bl	800806c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007032:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007036:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800703a:	4413      	add	r3, r2
 800703c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007040:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007044:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007048:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800704a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007054:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007058:	3301      	adds	r3, #1
 800705a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800705e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f802 	bl	800806c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007068:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800706c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007070:	4413      	add	r3, r2
 8007072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800707e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007080:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007084:	3302      	adds	r3, #2
 8007086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800708a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007092:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007094:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007098:	3302      	adds	r3, #2
 800709a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800709e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070a2:	2218      	movs	r2, #24
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fff0 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80070ac:	233f      	movs	r3, #63	; 0x3f
 80070ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80070b2:	2383      	movs	r3, #131	; 0x83
 80070b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80070b8:	f107 0310 	add.w	r3, r7, #16
 80070bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070c8:	f107 030f 	add.w	r3, r7, #15
 80070cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070d0:	2301      	movs	r3, #1
 80070d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070da:	2100      	movs	r1, #0
 80070dc:	4618      	mov	r0, r3
 80070de:	f001 fa5f 	bl	80085a0 <hci_send_req>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	da01      	bge.n	80070ec <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80070e8:	23ff      	movs	r3, #255	; 0xff
 80070ea:	e004      	b.n	80070f6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80070ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80070f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80070f4:	781b      	ldrb	r3, [r3, #0]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bdb0      	pop	{r4, r5, r7, pc}

08007100 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b0cc      	sub	sp, #304	; 0x130
 8007104:	af00      	add	r7, sp, #0
 8007106:	4602      	mov	r2, r0
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007110:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007112:	f107 0310 	add.w	r3, r7, #16
 8007116:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800711a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007122:	2200      	movs	r2, #0
 8007124:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007134:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800713c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007140:	3301      	adds	r3, #1
 8007142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800714a:	2218      	movs	r2, #24
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f000 ff9c 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007154:	233f      	movs	r3, #63	; 0x3f
 8007156:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800715a:	2385      	movs	r3, #133	; 0x85
 800715c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007160:	f107 0310 	add.w	r3, r7, #16
 8007164:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800716c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007170:	f107 030f 	add.w	r3, r7, #15
 8007174:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007178:	2301      	movs	r3, #1
 800717a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800717e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fa0b 	bl	80085a0 <hci_send_req>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	da01      	bge.n	8007194 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007190:	23ff      	movs	r3, #255	; 0xff
 8007192:	e004      	b.n	800719e <aci_gap_set_io_capability+0x9e>
  return status;
 8007194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007198:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800719c:	781b      	ldrb	r3, [r3, #0]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80071a8:	b5b0      	push	{r4, r5, r7, lr}
 80071aa:	b0cc      	sub	sp, #304	; 0x130
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4605      	mov	r5, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071be:	462a      	mov	r2, r5
 80071c0:	701a      	strb	r2, [r3, #0]
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071ca:	4622      	mov	r2, r4
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80071d6:	4602      	mov	r2, r0
 80071d8:	701a      	strb	r2, [r3, #0]
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e2:	460a      	mov	r2, r1
 80071e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80071e6:	f107 0310 	add.w	r3, r7, #16
 80071ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007208:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007214:	3301      	adds	r3, #1
 8007216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007222:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800722a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007238:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800723c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007248:	3301      	adds	r3, #1
 800724a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800724e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007252:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007256:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800725e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007262:	3301      	adds	r3, #1
 8007264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800726c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007270:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007276:	3301      	adds	r3, #1
 8007278:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800727c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007280:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007284:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800728a:	3301      	adds	r3, #1
 800728c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007294:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007298:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800729a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80072ac:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80072b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b4:	3304      	adds	r3, #4
 80072b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80072c2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80072c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c8:	3301      	adds	r3, #1
 80072ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072d2:	2218      	movs	r2, #24
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 fed8 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80072dc:	233f      	movs	r3, #63	; 0x3f
 80072de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80072e2:	2386      	movs	r3, #134	; 0x86
 80072e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072f8:	f107 030f 	add.w	r3, r7, #15
 80072fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007300:	2301      	movs	r3, #1
 8007302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007306:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800730a:	2100      	movs	r1, #0
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f947 	bl	80085a0 <hci_send_req>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	da01      	bge.n	800731c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007318:	23ff      	movs	r3, #255	; 0xff
 800731a:	e004      	b.n	8007326 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007324:	781b      	ldrb	r3, [r3, #0]
}
 8007326:	4618      	mov	r0, r3
 8007328:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800732c:	46bd      	mov	sp, r7
 800732e:	bdb0      	pop	{r4, r5, r7, pc}

08007330 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b0cc      	sub	sp, #304	; 0x130
 8007334:	af00      	add	r7, sp, #0
 8007336:	4602      	mov	r2, r0
 8007338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007340:	6019      	str	r1, [r3, #0]
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800734a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800734c:	f107 0310 	add.w	r3, r7, #16
 8007350:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800736e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007372:	8812      	ldrh	r2, [r2, #0]
 8007374:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737a:	3302      	adds	r3, #2
 800737c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007384:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007388:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007392:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007396:	3304      	adds	r3, #4
 8007398:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800739c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a0:	2218      	movs	r2, #24
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 fe71 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073aa:	233f      	movs	r3, #63	; 0x3f
 80073ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80073b0:	2388      	movs	r3, #136	; 0x88
 80073b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073b6:	f107 0310 	add.w	r3, r7, #16
 80073ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073c6:	f107 030f 	add.w	r3, r7, #15
 80073ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 f8e0 	bl	80085a0 <hci_send_req>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da01      	bge.n	80073ea <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80073e6:	23ff      	movs	r3, #255	; 0xff
 80073e8:	e004      	b.n	80073f4 <aci_gap_pass_key_resp+0xc4>
  return status;
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073f2:	781b      	ldrb	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80073fe:	b590      	push	{r4, r7, lr}
 8007400:	b0cd      	sub	sp, #308	; 0x134
 8007402:	af00      	add	r7, sp, #0
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800740e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800741c:	4622      	mov	r2, r4
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007428:	4602      	mov	r2, r0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007434:	460a      	mov	r2, r1
 8007436:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007438:	f107 0310 	add.w	r3, r7, #16
 800743c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	2207      	movs	r2, #7
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f000 fe1f 	bl	800808c <Osal_MemSet>
  int index_input = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800745c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007460:	7812      	ldrb	r2, [r2, #0]
 8007462:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007468:	3301      	adds	r3, #1
 800746a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007472:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007476:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800747e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007482:	3301      	adds	r3, #1
 8007484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007490:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800749c:	3301      	adds	r3, #1
 800749e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074a6:	2218      	movs	r2, #24
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fdee 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80074b0:	233f      	movs	r3, #63	; 0x3f
 80074b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80074b6:	238a      	movs	r3, #138	; 0x8a
 80074b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074bc:	f107 0310 	add.w	r3, r7, #16
 80074c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80074cc:	f107 0308 	add.w	r3, r7, #8
 80074d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80074d4:	2307      	movs	r3, #7
 80074d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f001 f85d 	bl	80085a0 <hci_send_req>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da01      	bge.n	80074f0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80074ec:	23ff      	movs	r3, #255	; 0xff
 80074ee:	e02e      	b.n	800754e <aci_gap_init+0x150>
  if ( resp.Status )
 80074f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <aci_gap_init+0x10c>
    return resp.Status;
 80074fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007502:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	e021      	b.n	800754e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007512:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007516:	b29a      	uxth	r2, r3
 8007518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007528:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800752c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007530:	b29a      	uxth	r2, r3
 8007532:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007536:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007540:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007544:	b29a      	uxth	r2, r3
 8007546:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800754a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007554:	46bd      	mov	sp, r7
 8007556:	bd90      	pop	{r4, r7, pc}

08007558 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b0cc      	sub	sp, #304	; 0x130
 800755c:	af00      	add	r7, sp, #0
 800755e:	4602      	mov	r2, r0
 8007560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007568:	6019      	str	r1, [r3, #0]
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007572:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007574:	f107 0310 	add.w	r3, r7, #16
 8007578:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007596:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800759a:	7812      	ldrb	r2, [r2, #0]
 800759c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800759e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075a2:	3301      	adds	r3, #1
 80075a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80075a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ac:	1c58      	adds	r0, r3, #1
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	f000 fd53 	bl	800806c <Osal_MemCpy>
  index_input += AdvDataLen;
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075d4:	4413      	add	r3, r2
 80075d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075de:	2218      	movs	r2, #24
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fd52 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80075e8:	233f      	movs	r3, #63	; 0x3f
 80075ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80075ee:	238e      	movs	r3, #142	; 0x8e
 80075f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075f4:	f107 0310 	add.w	r3, r7, #16
 80075f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007600:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007604:	f107 030f 	add.w	r3, r7, #15
 8007608:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800760c:	2301      	movs	r3, #1
 800760e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007612:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f000 ffc1 	bl	80085a0 <hci_send_req>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	da01      	bge.n	8007628 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8007624:	23ff      	movs	r3, #255	; 0xff
 8007626:	e004      	b.n	8007632 <aci_gap_update_adv_data+0xda>
  return status;
 8007628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007630:	781b      	ldrb	r3, [r3, #0]
}
 8007632:	4618      	mov	r0, r3
 8007634:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	2218      	movs	r2, #24
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fd1c 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007654:	233f      	movs	r3, #63	; 0x3f
 8007656:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007658:	2392      	movs	r3, #146	; 0x92
 800765a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007660:	2301      	movs	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007664:	f107 0308 	add.w	r3, r7, #8
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f000 ff98 	bl	80085a0 <hci_send_req>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	da01      	bge.n	800767a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007676:	23ff      	movs	r3, #255	; 0xff
 8007678:	e000      	b.n	800767c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800767a:	79fb      	ldrb	r3, [r7, #7]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b0cc      	sub	sp, #304	; 0x130
 8007688:	af00      	add	r7, sp, #0
 800768a:	4602      	mov	r2, r0
 800768c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007690:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800769e:	460a      	mov	r2, r1
 80076a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80076a2:	f107 0310 	add.w	r3, r7, #16
 80076a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80076bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076c4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076c8:	8812      	ldrh	r2, [r2, #0]
 80076ca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d0:	3302      	adds	r3, #2
 80076d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80076d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076de:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80076e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ea:	3301      	adds	r3, #1
 80076ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076f4:	2218      	movs	r2, #24
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fcc7 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80076fe:	233f      	movs	r3, #63	; 0x3f
 8007700:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007704:	23a5      	movs	r3, #165	; 0xa5
 8007706:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007716:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800771a:	f107 030f 	add.w	r3, r7, #15
 800771e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007728:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f000 ff36 	bl	80085a0 <hci_send_req>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	da01      	bge.n	800773e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800773a:	23ff      	movs	r3, #255	; 0xff
 800773c:	e004      	b.n	8007748 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007746:	781b      	ldrb	r3, [r3, #0]
}
 8007748:	4618      	mov	r0, r3
 800774a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b088      	sub	sp, #32
 8007756:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	2218      	movs	r2, #24
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f000 fc91 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 800776a:	233f      	movs	r3, #63	; 0x3f
 800776c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800776e:	f240 1301 	movw	r3, #257	; 0x101
 8007772:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007774:	1dfb      	adds	r3, r7, #7
 8007776:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007778:	2301      	movs	r3, #1
 800777a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800777c:	f107 0308 	add.w	r3, r7, #8
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f000 ff0c 	bl	80085a0 <hci_send_req>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	da01      	bge.n	8007792 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800778e:	23ff      	movs	r3, #255	; 0xff
 8007790:	e000      	b.n	8007794 <aci_gatt_init+0x42>
  return status;
 8007792:	79fb      	ldrb	r3, [r7, #7]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b0cf      	sub	sp, #316	; 0x13c
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4604      	mov	r4, r0
 80077a4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80077a8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80077ac:	6001      	str	r1, [r0, #0]
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077b6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80077ba:	4622      	mov	r2, r4
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077c2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80077c6:	4602      	mov	r2, r0
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077ce:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80077d2:	460a      	mov	r2, r1
 80077d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80077d6:	f107 0310 	add.w	r3, r7, #16
 80077da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80077de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077e2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d00a      	beq.n	8007802 <aci_gatt_add_service+0x66>
 80077ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077f0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d101      	bne.n	80077fe <aci_gatt_add_service+0x62>
 80077fa:	2311      	movs	r3, #17
 80077fc:	e002      	b.n	8007804 <aci_gatt_add_service+0x68>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <aci_gatt_add_service+0x68>
 8007802:	2303      	movs	r3, #3
 8007804:	f107 0210 	add.w	r2, r7, #16
 8007808:	4413      	add	r3, r2
 800780a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800780e:	f107 030c 	add.w	r3, r7, #12
 8007812:	2203      	movs	r2, #3
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fc38 	bl	800808c <Osal_MemSet>
  int index_input = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007822:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007826:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800782a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800782e:	7812      	ldrb	r2, [r2, #0]
 8007830:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007836:	3301      	adds	r3, #1
 8007838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800783c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007840:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d002      	beq.n	8007850 <aci_gatt_add_service+0xb4>
 800784a:	2b02      	cmp	r3, #2
 800784c:	d004      	beq.n	8007858 <aci_gatt_add_service+0xbc>
 800784e:	e007      	b.n	8007860 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007850:	2302      	movs	r3, #2
 8007852:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007856:	e005      	b.n	8007864 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007858:	2310      	movs	r3, #16
 800785a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800785e:	e001      	b.n	8007864 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007860:	2397      	movs	r3, #151	; 0x97
 8007862:	e06c      	b.n	800793e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007864:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007868:	1c58      	adds	r0, r3, #1
 800786a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800786e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007872:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007876:	6819      	ldr	r1, [r3, #0]
 8007878:	f000 fbf8 	bl	800806c <Osal_MemCpy>
    index_input += size;
 800787c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007880:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007884:	4413      	add	r3, r2
 8007886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800788a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800788e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007892:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800789a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800789e:	3301      	adds	r3, #1
 80078a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80078a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80078ac:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80078b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078c2:	2218      	movs	r2, #24
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fbe0 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 80078cc:	233f      	movs	r3, #63	; 0x3f
 80078ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80078d2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80078d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80078f2:	2303      	movs	r3, #3
 80078f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078fc:	2100      	movs	r1, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fe4e 	bl	80085a0 <hci_send_req>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	da01      	bge.n	800790e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800790a:	23ff      	movs	r3, #255	; 0xff
 800790c:	e017      	b.n	800793e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800790e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800791c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007920:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	e00a      	b.n	800793e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8007928:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800792c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007930:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800793a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007944:	46bd      	mov	sp, r7
 8007946:	bd90      	pop	{r4, r7, pc}

08007948 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b0d1      	sub	sp, #324	; 0x144
 800794c:	af00      	add	r7, sp, #0
 800794e:	4604      	mov	r4, r0
 8007950:	4608      	mov	r0, r1
 8007952:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007956:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800795a:	600a      	str	r2, [r1, #0]
 800795c:	4619      	mov	r1, r3
 800795e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007962:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007966:	4622      	mov	r2, r4
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800796e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007972:	4602      	mov	r2, r0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800797a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800797e:	460a      	mov	r2, r1
 8007980:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007982:	f107 0318 	add.w	r3, r7, #24
 8007986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800798a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800798e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d00a      	beq.n	80079ae <aci_gatt_add_char+0x66>
 8007998:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800799c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d101      	bne.n	80079aa <aci_gatt_add_char+0x62>
 80079a6:	2313      	movs	r3, #19
 80079a8:	e002      	b.n	80079b0 <aci_gatt_add_char+0x68>
 80079aa:	2303      	movs	r3, #3
 80079ac:	e000      	b.n	80079b0 <aci_gatt_add_char+0x68>
 80079ae:	2305      	movs	r3, #5
 80079b0:	f107 0218 	add.w	r2, r7, #24
 80079b4:	4413      	add	r3, r2
 80079b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80079ba:	f107 0314 	add.w	r3, r7, #20
 80079be:	2203      	movs	r2, #3
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fb62 	bl	800808c <Osal_MemSet>
  int index_input = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80079ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079d2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80079d6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80079da:	8812      	ldrh	r2, [r2, #0]
 80079dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80079de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079e2:	3302      	adds	r3, #2
 80079e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80079e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80079f0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80079f4:	7812      	ldrb	r2, [r2, #0]
 80079f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80079f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079fc:	3301      	adds	r3, #1
 80079fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007a02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a06:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d002      	beq.n	8007a16 <aci_gatt_add_char+0xce>
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d004      	beq.n	8007a1e <aci_gatt_add_char+0xd6>
 8007a14:	e007      	b.n	8007a26 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8007a16:	2302      	movs	r3, #2
 8007a18:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007a1c:	e005      	b.n	8007a2a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007a1e:	2310      	movs	r3, #16
 8007a20:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007a24:	e001      	b.n	8007a2a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8007a26:	2397      	movs	r3, #151	; 0x97
 8007a28:	e091      	b.n	8007b4e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007a2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007a2e:	1cd8      	adds	r0, r3, #3
 8007a30:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007a34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007a38:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	f000 fb15 	bl	800806c <Osal_MemCpy>
    index_input += size;
 8007a42:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007a46:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a54:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007a58:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007a5c:	8812      	ldrh	r2, [r2, #0]
 8007a5e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a64:	3302      	adds	r3, #2
 8007a66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a6e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007a72:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a82:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a86:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a96:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007a9a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007a9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007aaa:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007aae:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007ab0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007abe:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007ac2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007ac4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ace:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ad2:	2218      	movs	r2, #24
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 fad8 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007adc:	233f      	movs	r3, #63	; 0x3f
 8007ade:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007ae2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007ae6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007aea:	f107 0318 	add.w	r3, r7, #24
 8007aee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007af2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007af6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007afa:	f107 0314 	add.w	r3, r7, #20
 8007afe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007b02:	2303      	movs	r3, #3
 8007b04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fd46 	bl	80085a0 <hci_send_req>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da01      	bge.n	8007b1e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8007b1a:	23ff      	movs	r3, #255	; 0xff
 8007b1c:	e017      	b.n	8007b4e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007b1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007b2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	e00a      	b.n	8007b4e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007b38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007b3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b40:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b4a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd90      	pop	{r4, r7, pc}

08007b58 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007b58:	b5b0      	push	{r4, r5, r7, lr}
 8007b5a:	b0cc      	sub	sp, #304	; 0x130
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b6e:	462a      	mov	r2, r5
 8007b70:	801a      	strh	r2, [r3, #0]
 8007b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007b86:	4602      	mov	r2, r0
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007b92:	460a      	mov	r2, r1
 8007b94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007b96:	f107 0310 	add.w	r3, r7, #16
 8007b9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bb8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bbc:	8812      	ldrh	r2, [r2, #0]
 8007bbe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007bd6:	8812      	ldrh	r2, [r2, #0]
 8007bd8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bde:	3302      	adds	r3, #2
 8007be0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007bf0:	7812      	ldrb	r2, [r2, #0]
 8007bf2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c06:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1c:	1d98      	adds	r0, r3, #6
 8007c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c22:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c2e:	f000 fa1d 	bl	800806c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c40:	4413      	add	r3, r2
 8007c42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c4a:	2218      	movs	r2, #24
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa1c 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c54:	233f      	movs	r3, #63	; 0x3f
 8007c56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007c5a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007c5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c62:	f107 0310 	add.w	r3, r7, #16
 8007c66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c72:	f107 030f 	add.w	r3, r7, #15
 8007c76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c84:	2100      	movs	r1, #0
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fc8a 	bl	80085a0 <hci_send_req>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da01      	bge.n	8007c96 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007c92:	23ff      	movs	r3, #255	; 0xff
 8007c94:	e004      	b.n	8007ca0 <aci_gatt_update_char_value+0x148>
  return status;
 8007c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c9e:	781b      	ldrb	r3, [r3, #0]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bdb0      	pop	{r4, r5, r7, pc}

08007caa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b0cc      	sub	sp, #304	; 0x130
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	701a      	strb	r2, [r3, #0]
 8007cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007cce:	460a      	mov	r2, r1
 8007cd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007cd2:	f107 0310 	add.w	r3, r7, #16
 8007cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cf4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d00:	3301      	adds	r3, #1
 8007d02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d24:	1c98      	adds	r0, r3, #2
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d38:	6819      	ldr	r1, [r3, #0]
 8007d3a:	f000 f997 	bl	800806c <Osal_MemCpy>
  index_input += Length;
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d56:	2218      	movs	r2, #24
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f996 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d60:	233f      	movs	r3, #63	; 0x3f
 8007d62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007d66:	230c      	movs	r3, #12
 8007d68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d6c:	f107 0310 	add.w	r3, r7, #16
 8007d70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d7c:	f107 030f 	add.w	r3, r7, #15
 8007d80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fc05 	bl	80085a0 <hci_send_req>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da01      	bge.n	8007da0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007d9c:	23ff      	movs	r3, #255	; 0xff
 8007d9e:	e004      	b.n	8007daa <aci_hal_write_config_data+0x100>
  return status;
 8007da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007da8:	781b      	ldrb	r3, [r3, #0]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b0cc      	sub	sp, #304	; 0x130
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4602      	mov	r2, r0
 8007dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007dce:	460a      	mov	r2, r1
 8007dd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007dd2:	f107 0310 	add.w	r3, r7, #16
 8007dd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007de2:	2200      	movs	r2, #0
 8007de4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007df4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007dfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e00:	3301      	adds	r3, #1
 8007e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e24:	2218      	movs	r2, #24
 8007e26:	2100      	movs	r1, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f92f 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e2e:	233f      	movs	r3, #63	; 0x3f
 8007e30:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007e34:	230f      	movs	r3, #15
 8007e36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e3a:	f107 0310 	add.w	r3, r7, #16
 8007e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e4a:	f107 030f 	add.w	r3, r7, #15
 8007e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e52:	2301      	movs	r3, #1
 8007e54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fb9e 	bl	80085a0 <hci_send_req>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	da01      	bge.n	8007e6e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007e6a:	23ff      	movs	r3, #255	; 0xff
 8007e6c:	e004      	b.n	8007e78 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e76:	781b      	ldrb	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b0cc      	sub	sp, #304	; 0x130
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	4602      	mov	r2, r0
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007e94:	f107 0310 	add.w	r3, r7, #16
 8007e98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007eb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007eba:	8812      	ldrh	r2, [r2, #0]
 8007ebc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ec2:	3302      	adds	r3, #2
 8007ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ec8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ecc:	2218      	movs	r2, #24
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f8db 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ed6:	233f      	movs	r3, #63	; 0x3f
 8007ed8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007edc:	2318      	movs	r3, #24
 8007ede:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ee2:	f107 0310 	add.w	r3, r7, #16
 8007ee6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ef2:	f107 030f 	add.w	r3, r7, #15
 8007ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fb4a 	bl	80085a0 <hci_send_req>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da01      	bge.n	8007f16 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007f12:	23ff      	movs	r3, #255	; 0xff
 8007f14:	e004      	b.n	8007f20 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f1e:	781b      	ldrb	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f34:	f107 0308 	add.w	r3, r7, #8
 8007f38:	2218      	movs	r2, #24
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f8a5 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x03;
 8007f42:	2303      	movs	r3, #3
 8007f44:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007f46:	2303      	movs	r3, #3
 8007f48:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f4a:	1dfb      	adds	r3, r7, #7
 8007f4c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f52:	f107 0308 	add.w	r3, r7, #8
 8007f56:	2100      	movs	r1, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fb21 	bl	80085a0 <hci_send_req>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	da01      	bge.n	8007f68 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f64:	23ff      	movs	r3, #255	; 0xff
 8007f66:	e000      	b.n	8007f6a <hci_reset+0x40>
  return status;
 8007f68:	79fb      	ldrb	r3, [r7, #7]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007f72:	b590      	push	{r4, r7, lr}
 8007f74:	b0cd      	sub	sp, #308	; 0x134
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	4604      	mov	r4, r0
 8007f7a:	4608      	mov	r0, r1
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f86:	4622      	mov	r2, r4
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f92:	4602      	mov	r2, r0
 8007f94:	701a      	strb	r2, [r3, #0]
 8007f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007f9e:	460a      	mov	r2, r1
 8007fa0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007fa2:	f107 0310 	add.w	r3, r7, #16
 8007fa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fc4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fde:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fe2:	7812      	ldrb	r2, [r2, #0]
 8007fe4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fea:	3301      	adds	r3, #1
 8007fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ff8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007ffc:	7812      	ldrb	r2, [r2, #0]
 8007ffe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008000:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008004:	3301      	adds	r3, #1
 8008006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800800a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800800e:	2218      	movs	r2, #24
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f83a 	bl	800808c <Osal_MemSet>
  rq.ogf = 0x08;
 8008018:	2308      	movs	r3, #8
 800801a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800801e:	2331      	movs	r3, #49	; 0x31
 8008020:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008024:	f107 0310 	add.w	r3, r7, #16
 8008028:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800802c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008030:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008034:	f107 030f 	add.w	r3, r7, #15
 8008038:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800803c:	2301      	movs	r3, #1
 800803e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008042:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f000 faa9 	bl	80085a0 <hci_send_req>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	da01      	bge.n	8008058 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008054:	23ff      	movs	r3, #255	; 0xff
 8008056:	e004      	b.n	8008062 <hci_le_set_default_phy+0xf0>
  return status;
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008060:	781b      	ldrb	r3, [r3, #0]
}
 8008062:	4618      	mov	r0, r3
 8008064:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008068:	46bd      	mov	sp, r7
 800806a:	bd90      	pop	{r4, r7, pc}

0800806c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f004 f926 	bl	800c2ce <memcpy>
 8008082:	4603      	mov	r3, r0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f004 f883 	bl	800c1a8 <memset>
 80080a2:	4603      	mov	r3, r0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	af00      	add	r7, sp, #0
  return;
 80080b0:	bf00      	nop
}
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80080ba:	b480      	push	{r7}
 80080bc:	af00      	add	r7, sp, #0
  return;
 80080be:	bf00      	nop
}
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	af00      	add	r7, sp, #0
  return;
 80080cc:	bf00      	nop
}
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80080d6:	b480      	push	{r7}
 80080d8:	af00      	add	r7, sp, #0
  return;
 80080da:	bf00      	nop
}
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  return;
 80080e8:	bf00      	nop
}
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  return;
 80080f6:	bf00      	nop
}
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  return;
 8008104:	bf00      	nop
}
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  return;
 8008112:	bf00      	nop
}
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return;
 8008120:	bf00      	nop
}
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return;
 800812e:	bf00      	nop
}
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  return;
 800813c:	bf00      	nop
}
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  return;
 800814a:	bf00      	nop
}
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
  return;
 8008158:	bf00      	nop
}
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  return;
 8008166:	bf00      	nop
}
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008170:	b480      	push	{r7}
 8008172:	af00      	add	r7, sp, #0
  return;
 8008174:	bf00      	nop
}
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800817e:	b480      	push	{r7}
 8008180:	af00      	add	r7, sp, #0
  return;
 8008182:	bf00      	nop
}
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return;
 8008190:	bf00      	nop
}
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80081a0:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <SVCCTL_Init+0x18>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80081a6:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <SVCCTL_Init+0x1c>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80081ac:	f000 f806 	bl	80081bc <SVCCTL_SvcInit>

  return;
 80081b0:	bf00      	nop
}
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000090 	.word	0x20000090
 80081b8:	200000b0 	.word	0x200000b0

080081bc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  BAS_Init();
 80081c0:	f7ff ff74 	bl	80080ac <BAS_Init>

  BLS_Init();
 80081c4:	f7ff ff79 	bl	80080ba <BLS_Init>

  CRS_STM_Init();
 80081c8:	f7ff ff7e 	bl	80080c8 <CRS_STM_Init>

  DIS_Init();
 80081cc:	f7ff ff83 	bl	80080d6 <DIS_Init>

  EDS_STM_Init();
 80081d0:	f7ff ff88 	bl	80080e4 <EDS_STM_Init>

  HIDS_Init();
 80081d4:	f7ff ff8d 	bl	80080f2 <HIDS_Init>

  HRS_Init();
 80081d8:	f7ff ff92 	bl	8008100 <HRS_Init>

  HTS_Init();
 80081dc:	f7ff ff97 	bl	800810e <HTS_Init>

  IAS_Init();
 80081e0:	f7ff ff9c 	bl	800811c <IAS_Init>

  LLS_Init();
 80081e4:	f7ff ffa1 	bl	800812a <LLS_Init>

  TPS_Init();
 80081e8:	f7ff ffa6 	bl	8008138 <TPS_Init>

  MOTENV_STM_Init();
 80081ec:	f7ff ffab 	bl	8008146 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80081f0:	f7ff ffb0 	bl	8008154 <P2PS_STM_Init>

  ZDD_STM_Init();
 80081f4:	f7ff ffb5 	bl	8008162 <ZDD_STM_Init>

  OTAS_STM_Init();
 80081f8:	f7ff ffba 	bl	8008170 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80081fc:	f7ff ffc6 	bl	800818c <BVOPUS_STM_Init>

  MESH_Init();
 8008200:	f7ff ffbd 	bl	800817e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008204:	f002 fd9e 	bl	800ad44 <SVCCTL_InitCustomSvc>
  
  return;
 8008208:	bf00      	nop
}
 800820a:	bd80      	pop	{r7, pc}

0800820c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008214:	4b09      	ldr	r3, [pc, #36]	; (800823c <SVCCTL_RegisterSvcHandler+0x30>)
 8008216:	7f1b      	ldrb	r3, [r3, #28]
 8008218:	4619      	mov	r1, r3
 800821a:	4a08      	ldr	r2, [pc, #32]	; (800823c <SVCCTL_RegisterSvcHandler+0x30>)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <SVCCTL_RegisterSvcHandler+0x30>)
 8008224:	7f1b      	ldrb	r3, [r3, #28]
 8008226:	3301      	adds	r3, #1
 8008228:	b2da      	uxtb	r2, r3
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <SVCCTL_RegisterSvcHandler+0x30>)
 800822c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800822e:	bf00      	nop
}
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000090 	.word	0x20000090

08008240 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3301      	adds	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800824e:	2300      	movs	r3, #0
 8008250:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2bff      	cmp	r3, #255	; 0xff
 8008258:	d125      	bne.n	80082a6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3302      	adds	r3, #2
 800825e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800826a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800826e:	d118      	bne.n	80082a2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008270:	2300      	movs	r3, #0
 8008272:	757b      	strb	r3, [r7, #21]
 8008274:	e00d      	b.n	8008292 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008276:	7d7b      	ldrb	r3, [r7, #21]
 8008278:	4a1a      	ldr	r2, [pc, #104]	; (80082e4 <SVCCTL_UserEvtRx+0xa4>)
 800827a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800828c:	7d7b      	ldrb	r3, [r7, #21]
 800828e:	3301      	adds	r3, #1
 8008290:	757b      	strb	r3, [r7, #21]
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <SVCCTL_UserEvtRx+0xa4>)
 8008294:	7f1b      	ldrb	r3, [r3, #28]
 8008296:	7d7a      	ldrb	r2, [r7, #21]
 8008298:	429a      	cmp	r2, r3
 800829a:	d3ec      	bcc.n	8008276 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800829c:	e002      	b.n	80082a4 <SVCCTL_UserEvtRx+0x64>
              break;
 800829e:	bf00      	nop
          break;
 80082a0:	e000      	b.n	80082a4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80082a2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80082a4:	e000      	b.n	80082a8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80082a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d00f      	beq.n	80082ce <SVCCTL_UserEvtRx+0x8e>
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	dc10      	bgt.n	80082d4 <SVCCTL_UserEvtRx+0x94>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <SVCCTL_UserEvtRx+0x7c>
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d006      	beq.n	80082c8 <SVCCTL_UserEvtRx+0x88>
 80082ba:	e00b      	b.n	80082d4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 fcb3 	bl	8009c28 <SVCCTL_App_Notification>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75bb      	strb	r3, [r7, #22]
      break;
 80082c6:	e008      	b.n	80082da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75bb      	strb	r3, [r7, #22]
      break;
 80082cc:	e005      	b.n	80082da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75bb      	strb	r3, [r7, #22]
      break;
 80082d2:	e002      	b.n	80082da <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80082d4:	2301      	movs	r3, #1
 80082d6:	75bb      	strb	r3, [r7, #22]
      break;
 80082d8:	bf00      	nop
  }

  return (return_status);
 80082da:	7dbb      	ldrb	r3, [r7, #22]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000090 	.word	0x20000090

080082e8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80082f0:	f107 030c 	add.w	r3, r7, #12
 80082f4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	212e      	movs	r1, #46	; 0x2e
 8008300:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008304:	f000 fae8 	bl	80088d8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	330b      	adds	r3, #11
 800830c:	78db      	ldrb	r3, [r3, #3]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b088      	sub	sp, #32
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800831e:	f107 030c 	add.w	r3, r7, #12
 8008322:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	210f      	movs	r1, #15
 800832e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008332:	f000 fad1 	bl	80088d8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	330b      	adds	r3, #11
 800833a:	78db      	ldrb	r3, [r3, #3]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b088      	sub	sp, #32
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	2110      	movs	r1, #16
 8008358:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800835c:	f000 fabc 	bl	80088d8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	330b      	adds	r3, #11
 8008364:	78db      	ldrb	r3, [r3, #3]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3720      	adds	r7, #32
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008370:	b480      	push	{r7}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008384:	2300      	movs	r3, #0
 8008386:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008398:	4b4a      	ldr	r3, [pc, #296]	; (80084c4 <SHCI_GetWirelessFwInfo+0x154>)
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80083a0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80083aa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a44      	ldr	r2, [pc, #272]	; (80084c8 <SHCI_GetWirelessFwInfo+0x158>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d10f      	bne.n	80083dc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	e01a      	b.n	8008412 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80083e4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80083e8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	0e1b      	lsrs	r3, r3, #24
 8008416:	b2da      	uxtb	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	0a1b      	lsrs	r3, r3, #8
 800842a:	b2da      	uxtb	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	091b      	lsrs	r3, r3, #4
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	b2da      	uxtb	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 030f 	and.w	r3, r3, #15
 8008448:	b2da      	uxtb	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	0e1b      	lsrs	r3, r3, #24
 8008452:	b2da      	uxtb	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	b2da      	uxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	0a1b      	lsrs	r3, r3, #8
 8008466:	b2da      	uxtb	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	b2da      	uxtb	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	0e1b      	lsrs	r3, r3, #24
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	0c1b      	lsrs	r3, r3, #16
 800848a:	b2da      	uxtb	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	0a1b      	lsrs	r3, r3, #8
 8008494:	b2da      	uxtb	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	0e1b      	lsrs	r3, r3, #24
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	0c1b      	lsrs	r3, r3, #16
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	372c      	adds	r7, #44	; 0x2c
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	58004000 	.word	0x58004000
 80084c8:	a94656b9 	.word	0xa94656b9

080084cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	4a08      	ldr	r2, [pc, #32]	; (80084fc <hci_init+0x30>)
 80084dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80084de:	4a08      	ldr	r2, [pc, #32]	; (8008500 <hci_init+0x34>)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80084e4:	4806      	ldr	r0, [pc, #24]	; (8008500 <hci_init+0x34>)
 80084e6:	f000 f979 	bl	80087dc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f8da 	bl	80086a8 <TlInit>

  return;
 80084f4:	bf00      	nop
}
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20000320 	.word	0x20000320
 8008500:	200002f8 	.word	0x200002f8

08008504 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800850a:	4822      	ldr	r0, [pc, #136]	; (8008594 <hci_user_evt_proc+0x90>)
 800850c:	f000 fe10 	bl	8009130 <LST_is_empty>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d12b      	bne.n	800856e <hci_user_evt_proc+0x6a>
 8008516:	4b20      	ldr	r3, [pc, #128]	; (8008598 <hci_user_evt_proc+0x94>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d027      	beq.n	800856e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800851e:	f107 030c 	add.w	r3, r7, #12
 8008522:	4619      	mov	r1, r3
 8008524:	481b      	ldr	r0, [pc, #108]	; (8008594 <hci_user_evt_proc+0x90>)
 8008526:	f000 fe92 	bl	800924e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800852a:	4b1c      	ldr	r3, [pc, #112]	; (800859c <hci_user_evt_proc+0x98>)
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00c      	beq.n	800854c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008536:	2301      	movs	r3, #1
 8008538:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <hci_user_evt_proc+0x98>)
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	1d3a      	adds	r2, r7, #4
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008544:	793a      	ldrb	r2, [r7, #4]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <hci_user_evt_proc+0x94>)
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	e002      	b.n	8008552 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800854c:	4b12      	ldr	r3, [pc, #72]	; (8008598 <hci_user_evt_proc+0x94>)
 800854e:	2201      	movs	r2, #1
 8008550:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <hci_user_evt_proc+0x94>)
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 fc0d 	bl	8008d7c <TL_MM_EvtDone>
 8008562:	e004      	b.n	800856e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4619      	mov	r1, r3
 8008568:	480a      	ldr	r0, [pc, #40]	; (8008594 <hci_user_evt_proc+0x90>)
 800856a:	f000 fe03 	bl	8009174 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800856e:	4809      	ldr	r0, [pc, #36]	; (8008594 <hci_user_evt_proc+0x90>)
 8008570:	f000 fdde 	bl	8009130 <LST_is_empty>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d107      	bne.n	800858a <hci_user_evt_proc+0x86>
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <hci_user_evt_proc+0x94>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008582:	4804      	ldr	r0, [pc, #16]	; (8008594 <hci_user_evt_proc+0x90>)
 8008584:	f002 f9b6 	bl	800a8f4 <hci_notify_asynch_evt>
  }


  return;
 8008588:	bf00      	nop
 800858a:	bf00      	nop
}
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200000b8 	.word	0x200000b8
 8008598:	200000c4 	.word	0x200000c4
 800859c:	200002f8 	.word	0x200002f8

080085a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80085ac:	2000      	movs	r0, #0
 80085ae:	f000 f8d1 	bl	8008754 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	885b      	ldrh	r3, [r3, #2]
 80085ba:	b21b      	sxth	r3, r3
 80085bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c0:	b21a      	sxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	029b      	lsls	r3, r3, #10
 80085c8:	b21b      	sxth	r3, r3
 80085ca:	4313      	orrs	r3, r2
 80085cc:	b21b      	sxth	r3, r3
 80085ce:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80085d0:	4b33      	ldr	r3, [pc, #204]	; (80086a0 <hci_send_req+0x100>)
 80085d2:	2201      	movs	r2, #1
 80085d4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	b2d9      	uxtb	r1, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	8bbb      	ldrh	r3, [r7, #28]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f890 	bl	8008708 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80085e8:	e04e      	b.n	8008688 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80085ea:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80085ee:	f002 f998 	bl	800a922 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80085f2:	e043      	b.n	800867c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	4619      	mov	r1, r3
 80085fa:	482a      	ldr	r0, [pc, #168]	; (80086a4 <hci_send_req+0x104>)
 80085fc:	f000 fe27 	bl	800924e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	7a5b      	ldrb	r3, [r3, #9]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d114      	bne.n	8008632 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	330b      	adds	r3, #11
 800860c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	b29b      	uxth	r3, r3
 8008614:	8bba      	ldrh	r2, [r7, #28]
 8008616:	429a      	cmp	r2, r3
 8008618:	d104      	bne.n	8008624 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	7812      	ldrb	r2, [r2, #0]
 8008622:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d027      	beq.n	800867c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800862c:	2301      	movs	r3, #1
 800862e:	77fb      	strb	r3, [r7, #31]
 8008630:	e024      	b.n	800867c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	330b      	adds	r3, #11
 8008636:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800863e:	b29b      	uxth	r3, r3
 8008640:	8bba      	ldrh	r2, [r7, #28]
 8008642:	429a      	cmp	r2, r3
 8008644:	d114      	bne.n	8008670 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	7a9b      	ldrb	r3, [r3, #10]
 800864a:	3b03      	subs	r3, #3
 800864c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	429a      	cmp	r2, r3
 8008656:	bfa8      	it	ge
 8008658:	461a      	movge	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6918      	ldr	r0, [r3, #16]
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	1cd9      	adds	r1, r3, #3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	461a      	mov	r2, r3
 800866c:	f003 fe2f 	bl	800c2ce <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008678:	2301      	movs	r3, #1
 800867a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800867c:	4809      	ldr	r0, [pc, #36]	; (80086a4 <hci_send_req+0x104>)
 800867e:	f000 fd57 	bl	8009130 <LST_is_empty>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d0b5      	beq.n	80085f4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008688:	7ffb      	ldrb	r3, [r7, #31]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0ad      	beq.n	80085ea <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800868e:	2001      	movs	r0, #1
 8008690:	f000 f860 	bl	8008754 <NotifyCmdStatus>

  return 0;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000324 	.word	0x20000324
 80086a4:	20000318 	.word	0x20000318

080086a8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80086b0:	480f      	ldr	r0, [pc, #60]	; (80086f0 <TlInit+0x48>)
 80086b2:	f000 fd2d 	bl	8009110 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80086b6:	4a0f      	ldr	r2, [pc, #60]	; (80086f4 <TlInit+0x4c>)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80086bc:	480e      	ldr	r0, [pc, #56]	; (80086f8 <TlInit+0x50>)
 80086be:	f000 fd27 	bl	8009110 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <TlInit+0x54>)
 80086c4:	2201      	movs	r2, #1
 80086c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <TlInit+0x58>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00a      	beq.n	80086e6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <TlInit+0x5c>)
 80086d6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80086d8:	4b09      	ldr	r3, [pc, #36]	; (8008700 <TlInit+0x58>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f107 0208 	add.w	r2, r7, #8
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
  }

  return;
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
}
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000318 	.word	0x20000318
 80086f4:	200000c0 	.word	0x200000c0
 80086f8:	200000b8 	.word	0x200000b8
 80086fc:	200000c4 	.word	0x200000c4
 8008700:	200002f8 	.word	0x200002f8
 8008704:	08008795 	.word	0x08008795

08008708 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	603a      	str	r2, [r7, #0]
 8008712:	80fb      	strh	r3, [r7, #6]
 8008714:	460b      	mov	r3, r1
 8008716:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <SendCmd+0x44>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	88fa      	ldrh	r2, [r7, #6]
 800871e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008722:	4b0a      	ldr	r3, [pc, #40]	; (800874c <SendCmd+0x44>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	797a      	ldrb	r2, [r7, #5]
 8008728:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800872a:	4b08      	ldr	r3, [pc, #32]	; (800874c <SendCmd+0x44>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	330c      	adds	r3, #12
 8008730:	797a      	ldrb	r2, [r7, #5]
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f003 fdca 	bl	800c2ce <memcpy>

  hciContext.io.Send(0,0);
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <SendCmd+0x48>)
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	2100      	movs	r1, #0
 8008740:	2000      	movs	r0, #0
 8008742:	4798      	blx	r3

  return;
 8008744:	bf00      	nop
}
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200000c0 	.word	0x200000c0
 8008750:	200002f8 	.word	0x200002f8

08008754 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d108      	bne.n	8008776 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <NotifyCmdStatus+0x3c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00d      	beq.n	8008788 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800876c:	4b08      	ldr	r3, [pc, #32]	; (8008790 <NotifyCmdStatus+0x3c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2000      	movs	r0, #0
 8008772:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008774:	e008      	b.n	8008788 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008776:	4b06      	ldr	r3, [pc, #24]	; (8008790 <NotifyCmdStatus+0x3c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800877e:	4b04      	ldr	r3, [pc, #16]	; (8008790 <NotifyCmdStatus+0x3c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2001      	movs	r0, #1
 8008784:	4798      	blx	r3
  return;
 8008786:	bf00      	nop
 8008788:	bf00      	nop
}
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000320 	.word	0x20000320

08008794 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7a5b      	ldrb	r3, [r3, #9]
 80087a0:	2b0f      	cmp	r3, #15
 80087a2:	d003      	beq.n	80087ac <TlEvtReceived+0x18>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7a5b      	ldrb	r3, [r3, #9]
 80087a8:	2b0e      	cmp	r3, #14
 80087aa:	d107      	bne.n	80087bc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4809      	ldr	r0, [pc, #36]	; (80087d4 <TlEvtReceived+0x40>)
 80087b0:	f000 fd06 	bl	80091c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80087b4:	2000      	movs	r0, #0
 80087b6:	f002 f8a9 	bl	800a90c <hci_cmd_resp_release>
 80087ba:	e006      	b.n	80087ca <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4806      	ldr	r0, [pc, #24]	; (80087d8 <TlEvtReceived+0x44>)
 80087c0:	f000 fcfe 	bl	80091c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80087c4:	4804      	ldr	r0, [pc, #16]	; (80087d8 <TlEvtReceived+0x44>)
 80087c6:	f002 f895 	bl	800a8f4 <hci_notify_asynch_evt>
  }

  return;
 80087ca:	bf00      	nop
}
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000318 	.word	0x20000318
 80087d8:	200000b8 	.word	0x200000b8

080087dc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a05      	ldr	r2, [pc, #20]	; (80087fc <hci_register_io_bus+0x20>)
 80087e8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a04      	ldr	r2, [pc, #16]	; (8008800 <hci_register_io_bus+0x24>)
 80087ee:	611a      	str	r2, [r3, #16]

  return;
 80087f0:	bf00      	nop
}
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	08008af5 	.word	0x08008af5
 8008800:	08008b5d 	.word	0x08008b5d

08008804 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	4a08      	ldr	r2, [pc, #32]	; (8008834 <shci_init+0x30>)
 8008814:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008816:	4a08      	ldr	r2, [pc, #32]	; (8008838 <shci_init+0x34>)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800881c:	4806      	ldr	r0, [pc, #24]	; (8008838 <shci_init+0x34>)
 800881e:	f000 f915 	bl	8008a4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f898 	bl	800895c <TlInit>

  return;
 800882c:	bf00      	nop
}
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000348 	.word	0x20000348
 8008838:	20000328 	.word	0x20000328

0800883c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008842:	4822      	ldr	r0, [pc, #136]	; (80088cc <shci_user_evt_proc+0x90>)
 8008844:	f000 fc74 	bl	8009130 <LST_is_empty>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12b      	bne.n	80088a6 <shci_user_evt_proc+0x6a>
 800884e:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <shci_user_evt_proc+0x94>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d027      	beq.n	80088a6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008856:	f107 030c 	add.w	r3, r7, #12
 800885a:	4619      	mov	r1, r3
 800885c:	481b      	ldr	r0, [pc, #108]	; (80088cc <shci_user_evt_proc+0x90>)
 800885e:	f000 fcf6 	bl	800924e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008862:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <shci_user_evt_proc+0x98>)
 8008864:	69db      	ldr	r3, [r3, #28]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00c      	beq.n	8008884 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800886e:	2301      	movs	r3, #1
 8008870:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008872:	4b18      	ldr	r3, [pc, #96]	; (80088d4 <shci_user_evt_proc+0x98>)
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	1d3a      	adds	r2, r7, #4
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800887c:	793a      	ldrb	r2, [r7, #4]
 800887e:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <shci_user_evt_proc+0x94>)
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	e002      	b.n	800888a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008884:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <shci_user_evt_proc+0x94>)
 8008886:	2201      	movs	r2, #1
 8008888:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800888a:	4b11      	ldr	r3, [pc, #68]	; (80088d0 <shci_user_evt_proc+0x94>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fa71 	bl	8008d7c <TL_MM_EvtDone>
 800889a:	e004      	b.n	80088a6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4619      	mov	r1, r3
 80088a0:	480a      	ldr	r0, [pc, #40]	; (80088cc <shci_user_evt_proc+0x90>)
 80088a2:	f000 fc67 	bl	8009174 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80088a6:	4809      	ldr	r0, [pc, #36]	; (80088cc <shci_user_evt_proc+0x90>)
 80088a8:	f000 fc42 	bl	8009130 <LST_is_empty>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d107      	bne.n	80088c2 <shci_user_evt_proc+0x86>
 80088b2:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <shci_user_evt_proc+0x94>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80088ba:	4804      	ldr	r0, [pc, #16]	; (80088cc <shci_user_evt_proc+0x90>)
 80088bc:	f7f8 fdb0 	bl	8001420 <shci_notify_asynch_evt>
  }


  return;
 80088c0:	bf00      	nop
 80088c2:	bf00      	nop
}
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200000c8 	.word	0x200000c8
 80088d0:	200000d8 	.word	0x200000d8
 80088d4:	20000328 	.word	0x20000328

080088d8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60ba      	str	r2, [r7, #8]
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	4603      	mov	r3, r0
 80088e4:	81fb      	strh	r3, [r7, #14]
 80088e6:	460b      	mov	r3, r1
 80088e8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80088ea:	2000      	movs	r0, #0
 80088ec:	f000 f868 	bl	80089c0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <shci_send+0x78>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	89fa      	ldrh	r2, [r7, #14]
 80088f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <shci_send+0x78>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	7b7a      	ldrb	r2, [r7, #13]
 8008900:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <shci_send+0x78>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	7b7a      	ldrb	r2, [r7, #13]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	4618      	mov	r0, r3
 800890e:	f003 fcde 	bl	800c2ce <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008912:	4b10      	ldr	r3, [pc, #64]	; (8008954 <shci_send+0x7c>)
 8008914:	2201      	movs	r2, #1
 8008916:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8008918:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <shci_send+0x80>)
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2100      	movs	r1, #0
 800891e:	2000      	movs	r0, #0
 8008920:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008922:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008926:	f7f8 fd92 	bl	800144e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f103 0008 	add.w	r0, r3, #8
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <shci_send+0x78>)
 8008932:	6819      	ldr	r1, [r3, #0]
 8008934:	4b06      	ldr	r3, [pc, #24]	; (8008950 <shci_send+0x78>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	789b      	ldrb	r3, [r3, #2]
 800893a:	3303      	adds	r3, #3
 800893c:	461a      	mov	r2, r3
 800893e:	f003 fcc6 	bl	800c2ce <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008942:	2001      	movs	r0, #1
 8008944:	f000 f83c 	bl	80089c0 <Cmd_SetStatus>

  return;
 8008948:	bf00      	nop
}
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200000d4 	.word	0x200000d4
 8008954:	2000034c 	.word	0x2000034c
 8008958:	20000328 	.word	0x20000328

0800895c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008964:	4a10      	ldr	r2, [pc, #64]	; (80089a8 <TlInit+0x4c>)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800896a:	4810      	ldr	r0, [pc, #64]	; (80089ac <TlInit+0x50>)
 800896c:	f000 fbd0 	bl	8009110 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008970:	2001      	movs	r0, #1
 8008972:	f000 f825 	bl	80089c0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008976:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <TlInit+0x54>)
 8008978:	2201      	movs	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <TlInit+0x58>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00c      	beq.n	800899e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008988:	4b0b      	ldr	r3, [pc, #44]	; (80089b8 <TlInit+0x5c>)
 800898a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <TlInit+0x60>)
 800898e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008990:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <TlInit+0x58>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f107 020c 	add.w	r2, r7, #12
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
  }

  return;
 800899c:	bf00      	nop
 800899e:	bf00      	nop
}
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200000d4 	.word	0x200000d4
 80089ac:	200000c8 	.word	0x200000c8
 80089b0:	200000d8 	.word	0x200000d8
 80089b4:	20000328 	.word	0x20000328
 80089b8:	08008a11 	.word	0x08008a11
 80089bc:	08008a29 	.word	0x08008a29

080089c0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10b      	bne.n	80089e8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <Cmd_SetStatus+0x48>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <Cmd_SetStatus+0x48>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2000      	movs	r0, #0
 80089de:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80089e0:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <Cmd_SetStatus+0x4c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80089e6:	e00b      	b.n	8008a00 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80089e8:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <Cmd_SetStatus+0x4c>)
 80089ea:	2201      	movs	r2, #1
 80089ec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <Cmd_SetStatus+0x48>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d004      	beq.n	8008a00 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <Cmd_SetStatus+0x48>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2001      	movs	r0, #1
 80089fc:	4798      	blx	r3
  return;
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
}
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000348 	.word	0x20000348
 8008a0c:	200000d0 	.word	0x200000d0

08008a10 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f7f8 fd0d 	bl	8001438 <shci_cmd_resp_release>

  return;
 8008a1e:	bf00      	nop
}
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	4805      	ldr	r0, [pc, #20]	; (8008a48 <TlUserEvtReceived+0x20>)
 8008a34:	f000 fbc4 	bl	80091c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <TlUserEvtReceived+0x20>)
 8008a3a:	f7f8 fcf1 	bl	8001420 <shci_notify_asynch_evt>

  return;
 8008a3e:	bf00      	nop
}
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	200000c8 	.word	0x200000c8

08008a4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a05      	ldr	r2, [pc, #20]	; (8008a6c <shci_register_io_bus+0x20>)
 8008a58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <shci_register_io_bus+0x24>)
 8008a5e:	611a      	str	r2, [r3, #16]

  return;
 8008a60:	bf00      	nop
}
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	08008c09 	.word	0x08008c09
 8008a70:	08008c5d 	.word	0x08008c5d

08008a74 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008a78:	f002 fe34 	bl	800b6e4 <HW_IPCC_Enable>

  return;
 8008a7c:	bf00      	nop
}
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <TL_Init>:


void TL_Init( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <TL_Init+0x48>)
 8008a86:	4a11      	ldr	r2, [pc, #68]	; (8008acc <TL_Init+0x4c>)
 8008a88:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008a8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <TL_Init+0x48>)
 8008a8c:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <TL_Init+0x50>)
 8008a8e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008a90:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <TL_Init+0x48>)
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <TL_Init+0x54>)
 8008a94:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <TL_Init+0x48>)
 8008a98:	4a0f      	ldr	r2, [pc, #60]	; (8008ad8 <TL_Init+0x58>)
 8008a9a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008a9c:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <TL_Init+0x48>)
 8008a9e:	4a0f      	ldr	r2, [pc, #60]	; (8008adc <TL_Init+0x5c>)
 8008aa0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <TL_Init+0x48>)
 8008aa4:	4a0e      	ldr	r2, [pc, #56]	; (8008ae0 <TL_Init+0x60>)
 8008aa6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008aa8:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <TL_Init+0x48>)
 8008aaa:	4a0e      	ldr	r2, [pc, #56]	; (8008ae4 <TL_Init+0x64>)
 8008aac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <TL_Init+0x48>)
 8008ab0:	4a0d      	ldr	r2, [pc, #52]	; (8008ae8 <TL_Init+0x68>)
 8008ab2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <TL_Init+0x48>)
 8008ab6:	4a0d      	ldr	r2, [pc, #52]	; (8008aec <TL_Init+0x6c>)
 8008ab8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008aba:	4b03      	ldr	r3, [pc, #12]	; (8008ac8 <TL_Init+0x48>)
 8008abc:	4a0c      	ldr	r2, [pc, #48]	; (8008af0 <TL_Init+0x70>)
 8008abe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008ac0:	f002 fe24 	bl	800b70c <HW_IPCC_Init>

  return;
 8008ac4:	bf00      	nop
}
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20030000 	.word	0x20030000
 8008acc:	20030028 	.word	0x20030028
 8008ad0:	20030048 	.word	0x20030048
 8008ad4:	20030058 	.word	0x20030058
 8008ad8:	20030068 	.word	0x20030068
 8008adc:	20030070 	.word	0x20030070
 8008ae0:	20030078 	.word	0x20030078
 8008ae4:	20030080 	.word	0x20030080
 8008ae8:	2003009c 	.word	0x2003009c
 8008aec:	200300a0 	.word	0x200300a0
 8008af0:	200300ac 	.word	0x200300ac

08008af4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008b00:	4811      	ldr	r0, [pc, #68]	; (8008b48 <TL_BLE_Init+0x54>)
 8008b02:	f000 fb05 	bl	8009110 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <TL_BLE_Init+0x58>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <TL_BLE_Init+0x5c>)
 8008b20:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <TL_BLE_Init+0x54>)
 8008b26:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008b28:	f002 fe06 	bl	800b738 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a08      	ldr	r2, [pc, #32]	; (8008b54 <TL_BLE_Init+0x60>)
 8008b32:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4a07      	ldr	r2, [pc, #28]	; (8008b58 <TL_BLE_Init+0x64>)
 8008b3a:	6013      	str	r3, [r2, #0]

  return 0;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200300c8 	.word	0x200300c8
 8008b4c:	20030000 	.word	0x20030000
 8008b50:	20030a58 	.word	0x20030a58
 8008b54:	20000358 	.word	0x20000358
 8008b58:	2000035c 	.word	0x2000035c

08008b5c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008b68:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <TL_BLE_SendCmd+0x34>)
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008b72:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <TL_BLE_SendCmd+0x34>)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	f000 f96c 	bl	8008e58 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008b80:	f002 fde4 	bl	800b74c <HW_IPCC_BLE_SendCmd>

  return 0;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20030000 	.word	0x20030000

08008b94 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008b9a:	e01c      	b.n	8008bd6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008b9c:	1d3b      	adds	r3, r7, #4
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4812      	ldr	r0, [pc, #72]	; (8008bec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008ba2:	f000 fb54 	bl	800924e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	7a5b      	ldrb	r3, [r3, #9]
 8008baa:	2b0f      	cmp	r3, #15
 8008bac:	d003      	beq.n	8008bb6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	7a5b      	ldrb	r3, [r3, #9]
 8008bb2:	2b0e      	cmp	r3, #14
 8008bb4:	d105      	bne.n	8008bc2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	2002      	movs	r0, #2
 8008bbc:	f000 f94c 	bl	8008e58 <OutputDbgTrace>
 8008bc0:	e004      	b.n	8008bcc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	2003      	movs	r0, #3
 8008bc8:	f000 f946 	bl	8008e58 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008bcc:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008bd6:	4805      	ldr	r0, [pc, #20]	; (8008bec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008bd8:	f000 faaa 	bl	8009130 <LST_is_empty>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0dc      	beq.n	8008b9c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008be2:	bf00      	nop
}
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	200300c8 	.word	0x200300c8
 8008bf0:	20000358 	.word	0x20000358

08008bf4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4798      	blx	r3

  return;
 8008bfe:	bf00      	nop
}
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	2000035c 	.word	0x2000035c

08008c08 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008c14:	480d      	ldr	r0, [pc, #52]	; (8008c4c <TL_SYS_Init+0x44>)
 8008c16:	f000 fa7b 	bl	8009110 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	; (8008c50 <TL_SYS_Init+0x48>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	4a08      	ldr	r2, [pc, #32]	; (8008c4c <TL_SYS_Init+0x44>)
 8008c2c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008c2e:	f002 fdaf 	bl	800b790 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a07      	ldr	r2, [pc, #28]	; (8008c54 <TL_SYS_Init+0x4c>)
 8008c38:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	4a06      	ldr	r2, [pc, #24]	; (8008c58 <TL_SYS_Init+0x50>)
 8008c40:	6013      	str	r3, [r2, #0]

  return 0;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	200300d0 	.word	0x200300d0
 8008c50:	20030000 	.word	0x20030000
 8008c54:	20000360 	.word	0x20000360
 8008c58:	20000364 	.word	0x20000364

08008c5c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008c68:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <TL_SYS_SendCmd+0x34>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008c72:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <TL_SYS_SendCmd+0x34>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	2004      	movs	r0, #4
 8008c7c:	f000 f8ec 	bl	8008e58 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008c80:	f002 fd90 	bl	800b7a4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20030000 	.word	0x20030000

08008c94 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	2005      	movs	r0, #5
 8008ca2:	f000 f8d9 	bl	8008e58 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a03      	ldr	r2, [pc, #12]	; (8008cb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008cac:	68d2      	ldr	r2, [r2, #12]
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	4798      	blx	r3

  return;
 8008cb4:	bf00      	nop
}
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	20030000 	.word	0x20030000
 8008cbc:	20000360 	.word	0x20000360

08008cc0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008cc6:	e00e      	b.n	8008ce6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008cc8:	1d3b      	adds	r3, r7, #4
 8008cca:	4619      	mov	r1, r3
 8008ccc:	480b      	ldr	r0, [pc, #44]	; (8008cfc <HW_IPCC_SYS_EvtNot+0x3c>)
 8008cce:	f000 fabe 	bl	800924e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	2006      	movs	r0, #6
 8008cd8:	f000 f8be 	bl	8008e58 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008cdc:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <HW_IPCC_SYS_EvtNot+0x40>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008ce6:	4805      	ldr	r0, [pc, #20]	; (8008cfc <HW_IPCC_SYS_EvtNot+0x3c>)
 8008ce8:	f000 fa22 	bl	8009130 <LST_is_empty>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ea      	beq.n	8008cc8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008cf2:	bf00      	nop
}
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	200300d0 	.word	0x200300d0
 8008d00:	20000364 	.word	0x20000364

08008d04 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008d0c:	4817      	ldr	r0, [pc, #92]	; (8008d6c <TL_MM_Init+0x68>)
 8008d0e:	f000 f9ff 	bl	8009110 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008d12:	4817      	ldr	r0, [pc, #92]	; (8008d70 <TL_MM_Init+0x6c>)
 8008d14:	f000 f9fc 	bl	8009110 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008d18:	4b16      	ldr	r3, [pc, #88]	; (8008d74 <TL_MM_Init+0x70>)
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <TL_MM_Init+0x74>)
 8008d1e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008d20:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <TL_MM_Init+0x74>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6892      	ldr	r2, [r2, #8]
 8008d28:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008d2a:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <TL_MM_Init+0x74>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	68d2      	ldr	r2, [r2, #12]
 8008d32:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008d34:	4b10      	ldr	r3, [pc, #64]	; (8008d78 <TL_MM_Init+0x74>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a0c      	ldr	r2, [pc, #48]	; (8008d6c <TL_MM_Init+0x68>)
 8008d3a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <TL_MM_Init+0x74>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	6812      	ldr	r2, [r2, #0]
 8008d44:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008d46:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <TL_MM_Init+0x74>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6852      	ldr	r2, [r2, #4]
 8008d4e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <TL_MM_Init+0x74>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6912      	ldr	r2, [r2, #16]
 8008d58:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <TL_MM_Init+0x74>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6952      	ldr	r2, [r2, #20]
 8008d62:	619a      	str	r2, [r3, #24]

  return;
 8008d64:	bf00      	nop
}
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	200300b8 	.word	0x200300b8
 8008d70:	20000350 	.word	0x20000350
 8008d74:	20030000 	.word	0x20030000
 8008d78:	20000368 	.word	0x20000368

08008d7c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008d84:	6879      	ldr	r1, [r7, #4]
 8008d86:	4807      	ldr	r0, [pc, #28]	; (8008da4 <TL_MM_EvtDone+0x28>)
 8008d88:	f000 fa1a 	bl	80091c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	2000      	movs	r0, #0
 8008d90:	f000 f862 	bl	8008e58 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008d94:	4804      	ldr	r0, [pc, #16]	; (8008da8 <TL_MM_EvtDone+0x2c>)
 8008d96:	f002 fd2b 	bl	800b7f0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008d9a:	bf00      	nop
}
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	20000350 	.word	0x20000350
 8008da8:	08008dad 	.word	0x08008dad

08008dac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008db2:	e00c      	b.n	8008dce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008db4:	1d3b      	adds	r3, r7, #4
 8008db6:	4619      	mov	r1, r3
 8008db8:	480a      	ldr	r0, [pc, #40]	; (8008de4 <SendFreeBuf+0x38>)
 8008dba:	f000 fa48 	bl	800924e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <SendFreeBuf+0x3c>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 f9f9 	bl	80091c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008dce:	4805      	ldr	r0, [pc, #20]	; (8008de4 <SendFreeBuf+0x38>)
 8008dd0:	f000 f9ae 	bl	8009130 <LST_is_empty>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0ec      	beq.n	8008db4 <SendFreeBuf+0x8>
  }

  return;
 8008dda:	bf00      	nop
}
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	20000350 	.word	0x20000350
 8008de8:	20030000 	.word	0x20030000

08008dec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008df0:	4805      	ldr	r0, [pc, #20]	; (8008e08 <TL_TRACES_Init+0x1c>)
 8008df2:	f000 f98d 	bl	8009110 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <TL_TRACES_Init+0x20>)
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	4a03      	ldr	r2, [pc, #12]	; (8008e08 <TL_TRACES_Init+0x1c>)
 8008dfc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008dfe:	f002 fd2d 	bl	800b85c <HW_IPCC_TRACES_Init>

  return;
 8008e02:	bf00      	nop
}
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	200300c0 	.word	0x200300c0
 8008e0c:	20030000 	.word	0x20030000

08008e10 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008e16:	e008      	b.n	8008e2a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008e18:	1d3b      	adds	r3, r7, #4
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008e1e:	f000 fa16 	bl	800924e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f80d 	bl	8008e44 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008e2c:	f000 f980 	bl	8009130 <LST_is_empty>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0f0      	beq.n	8008e18 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008e36:	bf00      	nop
}
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	200300c0 	.word	0x200300c0

08008e44 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b06      	cmp	r3, #6
 8008e68:	d845      	bhi.n	8008ef6 <OutputDbgTrace+0x9e>
 8008e6a:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <OutputDbgTrace+0x18>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e8d 	.word	0x08008e8d
 8008e74:	08008eb1 	.word	0x08008eb1
 8008e78:	08008eb7 	.word	0x08008eb7
 8008e7c:	08008ecb 	.word	0x08008ecb
 8008e80:	08008ed7 	.word	0x08008ed7
 8008e84:	08008edd 	.word	0x08008edd
 8008e88:	08008eeb 	.word	0x08008eeb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	7a5b      	ldrb	r3, [r3, #9]
 8008e94:	2bff      	cmp	r3, #255	; 0xff
 8008e96:	d005      	beq.n	8008ea4 <OutputDbgTrace+0x4c>
 8008e98:	2bff      	cmp	r3, #255	; 0xff
 8008e9a:	dc05      	bgt.n	8008ea8 <OutputDbgTrace+0x50>
 8008e9c:	2b0e      	cmp	r3, #14
 8008e9e:	d005      	beq.n	8008eac <OutputDbgTrace+0x54>
 8008ea0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008ea2:	e001      	b.n	8008ea8 <OutputDbgTrace+0x50>
          break;
 8008ea4:	bf00      	nop
 8008ea6:	e027      	b.n	8008ef8 <OutputDbgTrace+0xa0>
          break;
 8008ea8:	bf00      	nop
 8008eaa:	e025      	b.n	8008ef8 <OutputDbgTrace+0xa0>
          break;
 8008eac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008eae:	e023      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008eb4:	e020      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	7a5b      	ldrb	r3, [r3, #9]
 8008ebe:	2b0e      	cmp	r3, #14
 8008ec0:	d001      	beq.n	8008ec6 <OutputDbgTrace+0x6e>
 8008ec2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008ec4:	e000      	b.n	8008ec8 <OutputDbgTrace+0x70>
          break;
 8008ec6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ec8:	e016      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	7a5b      	ldrb	r3, [r3, #9]
 8008ed2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ed4:	e010      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008eda:	e00d      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	7a5b      	ldrb	r3, [r3, #9]
 8008ee4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008ee6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ee8:	e006      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7a5b      	ldrb	r3, [r3, #9]
 8008ef2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ef4:	e000      	b.n	8008ef8 <OutputDbgTrace+0xa0>

    default:
      break;
 8008ef6:	bf00      	nop
  }

  return;
 8008ef8:	bf00      	nop
}
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8008f10:	215c      	movs	r1, #92	; 0x5c
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f003 f950 	bl	800c1b8 <strrchr>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d007      	beq.n	8008f2e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8008f1e:	215c      	movs	r1, #92	; 0x5c
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f003 f949 	bl	800c1b8 <strrchr>
 8008f26:	4603      	mov	r3, r0
 8008f28:	3301      	adds	r3, #1
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e00d      	b.n	8008f4a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8008f2e:	212f      	movs	r1, #47	; 0x2f
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f003 f941 	bl	800c1b8 <strrchr>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8008f3c:	212f      	movs	r1, #47	; 0x2f
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f003 f93a 	bl	800c1b8 <strrchr>
 8008f44:	4603      	mov	r3, r0
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f60:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008f62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f64:	b672      	cpsid	i
}
 8008f66:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008f68:	1cbb      	adds	r3, r7, #2
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4812      	ldr	r0, [pc, #72]	; (8008fb8 <DbgTrace_TxCpltCallback+0x64>)
 8008f6e:	f000 fbe6 	bl	800973e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008f72:	1cbb      	adds	r3, r7, #2
 8008f74:	4619      	mov	r1, r3
 8008f76:	4810      	ldr	r0, [pc, #64]	; (8008fb8 <DbgTrace_TxCpltCallback+0x64>)
 8008f78:	f000 fcd2 	bl	8009920 <CircularQueue_Sense>
 8008f7c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00c      	beq.n	8008f9e <DbgTrace_TxCpltCallback+0x4a>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f383 8810 	msr	PRIMASK, r3
}
 8008f8e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008f90:	887b      	ldrh	r3, [r7, #2]
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <DbgTrace_TxCpltCallback+0x68>)
 8008f94:	4619      	mov	r1, r3
 8008f96:	6938      	ldr	r0, [r7, #16]
 8008f98:	f7f7 fed5 	bl	8000d46 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008f9c:	e008      	b.n	8008fb0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008f9e:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <DbgTrace_TxCpltCallback+0x6c>)
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f383 8810 	msr	PRIMASK, r3
}
 8008fae:	bf00      	nop
}
 8008fb0:	bf00      	nop
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2000036c 	.word	0x2000036c
 8008fbc:	08008f55 	.word	0x08008f55
 8008fc0:	20000011 	.word	0x20000011

08008fc4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008fca:	f7f7 feb6 	bl	8000d3a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008fce:	2302      	movs	r3, #2
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008fd8:	4903      	ldr	r1, [pc, #12]	; (8008fe8 <DbgTraceInit+0x24>)
 8008fda:	4804      	ldr	r0, [pc, #16]	; (8008fec <DbgTraceInit+0x28>)
 8008fdc:	f000 f956 	bl	800928c <CircularQueue_Init>
#endif 
#endif
  return;
 8008fe0:	bf00      	nop
}
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	2000038c 	.word	0x2000038c
 8008fec:	2000036c 	.word	0x2000036c

08008ff0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f805 	bl	8009010 <DbgTraceWrite>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009020:	f3ef 8310 	mrs	r3, PRIMASK
 8009024:	61bb      	str	r3, [r7, #24]
  return(result);
 8009026:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009028:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009030:	d102      	bne.n	8009038 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009032:	2300      	movs	r3, #0
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
 8009036:	e037      	b.n	80090a8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d006      	beq.n	800904c <DbgTraceWrite+0x3c>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d003      	beq.n	800904c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009048:	627b      	str	r3, [r7, #36]	; 0x24
 800904a:	e02d      	b.n	80090a8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02a      	beq.n	80090a8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009056:	b672      	cpsid	i
}
 8009058:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	b29a      	uxth	r2, r3
 800905e:	2301      	movs	r3, #1
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	4814      	ldr	r0, [pc, #80]	; (80090b4 <DbgTraceWrite+0xa4>)
 8009064:	f000 f944 	bl	80092f0 <CircularQueue_Add>
 8009068:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d015      	beq.n	800909c <DbgTraceWrite+0x8c>
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <DbgTraceWrite+0xa8>)
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d010      	beq.n	800909c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800907a:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <DbgTraceWrite+0xa8>)
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f383 8810 	msr	PRIMASK, r3
}
 800908a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	b29b      	uxth	r3, r3
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <DbgTraceWrite+0xac>)
 8009092:	4619      	mov	r1, r3
 8009094:	69f8      	ldr	r0, [r7, #28]
 8009096:	f7f7 fe56 	bl	8000d46 <DbgOutputTraces>
 800909a:	e005      	b.n	80090a8 <DbgTraceWrite+0x98>
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	f383 8810 	msr	PRIMASK, r3
}
 80090a6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3728      	adds	r7, #40	; 0x28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	2000036c 	.word	0x2000036c
 80090b8:	20000011 	.word	0x20000011
 80090bc:	08008f55 	.word	0x08008f55

080090c0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80090ca:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <OTP_Read+0x48>)
 80090cc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80090ce:	e002      	b.n	80090d6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3b08      	subs	r3, #8
 80090d4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3307      	adds	r3, #7
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	79fa      	ldrb	r2, [r7, #7]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d003      	beq.n	80090ea <OTP_Read+0x2a>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4a09      	ldr	r2, [pc, #36]	; (800910c <OTP_Read+0x4c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d1f2      	bne.n	80090d0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3307      	adds	r3, #7
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	79fa      	ldrb	r2, [r7, #7]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d001      	beq.n	80090fa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	1fff73f8 	.word	0x1fff73f8
 800910c:	1fff7000 	.word	0x1fff7000

08009110 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	605a      	str	r2, [r3, #4]
}
 8009124:	bf00      	nop
 8009126:	370c      	adds	r7, #12
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009138:	f3ef 8310 	mrs	r3, PRIMASK
 800913c:	60fb      	str	r3, [r7, #12]
  return(result);
 800913e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009142:	b672      	cpsid	i
}
 8009144:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d102      	bne.n	8009156 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009150:	2301      	movs	r3, #1
 8009152:	75fb      	strb	r3, [r7, #23]
 8009154:	e001      	b.n	800915a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f383 8810 	msr	PRIMASK, r3
}
 8009164:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
}
 8009168:	4618      	mov	r0, r3
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917e:	f3ef 8310 	mrs	r3, PRIMASK
 8009182:	60fb      	str	r3, [r7, #12]
  return(result);
 8009184:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009188:	b672      	cpsid	i
}
 800918a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	605a      	str	r2, [r3, #4]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f383 8810 	msr	PRIMASK, r3
}
 80091b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80091b4:	bf00      	nop
 80091b6:	371c      	adds	r7, #28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091ca:	f3ef 8310 	mrs	r3, PRIMASK
 80091ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80091d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091d4:	b672      	cpsid	i
}
 80091d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f383 8810 	msr	PRIMASK, r3
}
 80091fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009200:	bf00      	nop
 8009202:	371c      	adds	r7, #28
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800920c:	b480      	push	{r7}
 800920e:	b087      	sub	sp, #28
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8310 	mrs	r3, PRIMASK
 8009218:	60fb      	str	r3, [r7, #12]
  return(result);
 800921a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800921c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800921e:	b672      	cpsid	i
}
 8009220:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6852      	ldr	r2, [r2, #4]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f383 8810 	msr	PRIMASK, r3
}
 8009240:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009258:	f3ef 8310 	mrs	r3, PRIMASK
 800925c:	60fb      	str	r3, [r7, #12]
  return(result);
 800925e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009262:	b672      	cpsid	i
}
 8009264:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff ffca 	bl	800920c <LST_remove_node>
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f383 8810 	msr	PRIMASK, r3
}
 8009282:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009284:	bf00      	nop
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	887a      	ldrh	r2, [r7, #2]
 80092c2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	7e3a      	ldrb	r2, [r7, #24]
 80092c8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80092ca:	7e3b      	ldrb	r3, [r7, #24]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <CircularQueue_Init+0x56>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	891b      	ldrh	r3, [r3, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80092dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092e0:	e000      	b.n	80092e4 <CircularQueue_Init+0x58>
  }
  return 0;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08e      	sub	sp, #56	; 0x38
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	603b      	str	r3, [r7, #0]
 80092fc:	4613      	mov	r3, r2
 80092fe:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009300:	2300      	movs	r3, #0
 8009302:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009304:	2300      	movs	r3, #0
 8009306:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8009308:	2300      	movs	r3, #0
 800930a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800930c:	2300      	movs	r3, #0
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009310:	2300      	movs	r3, #0
 8009312:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009314:	2300      	movs	r3, #0
 8009316:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009318:	2300      	movs	r3, #0
 800931a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	891b      	ldrh	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <CircularQueue_Add+0x38>
 8009324:	2302      	movs	r3, #2
 8009326:	e000      	b.n	800932a <CircularQueue_Add+0x3a>
 8009328:	2300      	movs	r3, #0
 800932a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d02a      	beq.n	800938a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	891b      	ldrh	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d123      	bne.n	8009384 <CircularQueue_Add+0x94>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4413      	add	r3, r2
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	b29a      	uxth	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	1c58      	adds	r0, r3, #1
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	4298      	cmp	r0, r3
 800935a:	d306      	bcc.n	800936a <CircularQueue_Add+0x7a>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6918      	ldr	r0, [r3, #16]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	1ac3      	subs	r3, r0, r3
 8009366:	3301      	adds	r3, #1
 8009368:	e002      	b.n	8009370 <CircularQueue_Add+0x80>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	3301      	adds	r3, #1
 8009370:	440b      	add	r3, r1
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	b29b      	uxth	r3, r3
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	b29b      	uxth	r3, r3
 800937a:	4413      	add	r3, r2
 800937c:	b29b      	uxth	r3, r3
 800937e:	3302      	adds	r3, #2
 8009380:	b29b      	uxth	r3, r3
 8009382:	e001      	b.n	8009388 <CircularQueue_Add+0x98>
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	891b      	ldrh	r3, [r3, #8]
 8009388:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	891b      	ldrh	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	891b      	ldrh	r3, [r3, #8]
 8009396:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691a      	ldr	r2, [r3, #16]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d307      	bcc.n	80093b4 <CircularQueue_Add+0xc4>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6919      	ldr	r1, [r3, #16]
 80093ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093ae:	440b      	add	r3, r1
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	e000      	b.n	80093b6 <CircularQueue_Add+0xc6>
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	7ffb      	ldrb	r3, [r7, #31]
 80093bc:	4413      	add	r3, r2
 80093be:	461a      	mov	r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	fb02 f303 	mul.w	r3, r2, r3
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d80b      	bhi.n	80093e4 <CircularQueue_Add+0xf4>
 80093cc:	88fa      	ldrh	r2, [r7, #6]
 80093ce:	7ffb      	ldrb	r3, [r7, #31]
 80093d0:	4413      	add	r3, r2
 80093d2:	461a      	mov	r2, r3
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80093da:	fb01 f202 	mul.w	r2, r1, r2
 80093de:	1a9b      	subs	r3, r3, r2
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	e000      	b.n	80093e6 <CircularQueue_Add+0xf6>
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80093e8:	7dfa      	ldrb	r2, [r7, #23]
 80093ea:	7ffb      	ldrb	r3, [r7, #31]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	bf8c      	ite	hi
 80093f0:	2301      	movhi	r3, #1
 80093f2:	2300      	movls	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 80093f8:	7fbb      	ldrb	r3, [r7, #30]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d008      	beq.n	8009410 <CircularQueue_Add+0x120>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	7f1b      	ldrb	r3, [r3, #28]
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <CircularQueue_Add+0x120>
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	b29b      	uxth	r3, r3
 800940e:	e000      	b.n	8009412 <CircularQueue_Add+0x122>
 8009410:	8bbb      	ldrh	r3, [r7, #28]
 8009412:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009414:	7fbb      	ldrb	r3, [r7, #30]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <CircularQueue_Add+0x13c>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	7f1b      	ldrb	r3, [r3, #28]
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <CircularQueue_Add+0x13c>
 8009426:	7ffb      	ldrb	r3, [r7, #31]
 8009428:	b29b      	uxth	r3, r3
 800942a:	e000      	b.n	800942e <CircularQueue_Add+0x13e>
 800942c:	8bbb      	ldrh	r3, [r7, #28]
 800942e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 817e 	beq.w	8009734 <CircularQueue_Add+0x444>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	695a      	ldr	r2, [r3, #20]
 800943c:	88f9      	ldrh	r1, [r7, #6]
 800943e:	7ffb      	ldrb	r3, [r7, #31]
 8009440:	440b      	add	r3, r1
 8009442:	4619      	mov	r1, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	441a      	add	r2, r3
 800944c:	8bbb      	ldrh	r3, [r7, #28]
 800944e:	441a      	add	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	f200 816d 	bhi.w	8009734 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800945a:	2300      	movs	r3, #0
 800945c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800945e:	e14a      	b.n	80096f6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009466:	441a      	add	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	d307      	bcc.n	8009480 <CircularQueue_Add+0x190>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	691a      	ldr	r2, [r3, #16]
 8009474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009476:	441a      	add	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	e003      	b.n	8009488 <CircularQueue_Add+0x198>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	691a      	ldr	r2, [r3, #16]
 8009484:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009486:	4413      	add	r3, r2
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	891b      	ldrh	r3, [r3, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d130      	bne.n	80094fc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	1c59      	adds	r1, r3, #1
 80094a2:	6339      	str	r1, [r7, #48]	; 0x30
 80094a4:	4413      	add	r3, r2
 80094a6:	88fa      	ldrh	r2, [r7, #6]
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d304      	bcc.n	80094c0 <CircularQueue_Add+0x1d0>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	e000      	b.n	80094c2 <CircularQueue_Add+0x1d2>
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	b298      	uxth	r0, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	1c59      	adds	r1, r3, #1
 80094d2:	6339      	str	r1, [r7, #48]	; 0x30
 80094d4:	4413      	add	r3, r2
 80094d6:	b2c2      	uxtb	r2, r0
 80094d8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d304      	bcc.n	80094ee <CircularQueue_Add+0x1fe>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	e000      	b.n	80094f0 <CircularQueue_Add+0x200>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	1c9a      	adds	r2, r3, #2
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80094fc:	88fa      	ldrh	r2, [r7, #6]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	1acb      	subs	r3, r1, r3
 8009506:	4293      	cmp	r3, r2
 8009508:	bf28      	it	cs
 800950a:	4613      	movcs	r3, r2
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009512:	429a      	cmp	r2, r3
 8009514:	d007      	beq.n	8009526 <CircularQueue_Add+0x236>
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800951a:	429a      	cmp	r2, r3
 800951c:	d225      	bcs.n	800956a <CircularQueue_Add+0x27a>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	7f1b      	ldrb	r3, [r3, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d121      	bne.n	800956a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	18d0      	adds	r0, r2, r3
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	4413      	add	r3, r2
 800953a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800953c:	4619      	mov	r1, r3
 800953e:	f002 fec6 	bl	800c2ce <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	441a      	add	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800954e:	2300      	movs	r3, #0
 8009550:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800955e:	7ffb      	ldrb	r3, [r7, #31]
 8009560:	b29a      	uxth	r2, r3
 8009562:	88fb      	ldrh	r3, [r7, #6]
 8009564:	4413      	add	r3, r2
 8009566:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009568:	e0a4      	b.n	80096b4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80a1 	beq.w	80096b4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	7f1b      	ldrb	r3, [r3, #28]
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d03a      	beq.n	80095f4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	891b      	ldrh	r3, [r3, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10d      	bne.n	80095a2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	3b02      	subs	r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	22ff      	movs	r2, #255	; 0xff
 8009592:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	3b01      	subs	r3, #1
 800959c:	4413      	add	r3, r2
 800959e:	22ff      	movs	r2, #255	; 0xff
 80095a0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	695a      	ldr	r2, [r3, #20]
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	441a      	add	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80095b6:	2300      	movs	r3, #0
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	891b      	ldrh	r3, [r3, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d16f      	bne.n	80096a2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	1c59      	adds	r1, r3, #1
 80095ca:	6339      	str	r1, [r7, #48]	; 0x30
 80095cc:	4413      	add	r3, r2
 80095ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d0:	b2d2      	uxtb	r2, r2
 80095d2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	0a18      	lsrs	r0, r3, #8
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	1c59      	adds	r1, r3, #1
 80095e0:	6339      	str	r1, [r7, #48]	; 0x30
 80095e2:	4413      	add	r3, r2
 80095e4:	b2c2      	uxtb	r2, r0
 80095e6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	1c9a      	adds	r2, r3, #2
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	615a      	str	r2, [r3, #20]
 80095f2:	e056      	b.n	80096a2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7f1b      	ldrb	r3, [r3, #28]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d050      	beq.n	80096a2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	891b      	ldrh	r3, [r3, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d14a      	bne.n	800969e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960e:	3b02      	subs	r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009614:	b2d2      	uxtb	r2, r2
 8009616:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	0a19      	lsrs	r1, r3, #8
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	3b01      	subs	r3, #1
 8009624:	4413      	add	r3, r2
 8009626:	b2ca      	uxtb	r2, r1
 8009628:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	18d0      	adds	r0, r2, r3
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009636:	fb02 f303 	mul.w	r3, r2, r3
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009640:	4619      	mov	r1, r3
 8009642:	f002 fe44 	bl	800c2ce <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	695a      	ldr	r2, [r3, #20]
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	441a      	add	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009668:	2300      	movs	r3, #0
 800966a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	6339      	str	r1, [r7, #48]	; 0x30
 8009676:	4413      	add	r3, r2
 8009678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	0a18      	lsrs	r0, r3, #8
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	1c59      	adds	r1, r3, #1
 800968a:	6339      	str	r1, [r7, #48]	; 0x30
 800968c:	4413      	add	r3, r2
 800968e:	b2c2      	uxtb	r2, r0
 8009690:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	1c9a      	adds	r2, r3, #2
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	615a      	str	r2, [r3, #20]
 800969c:	e001      	b.n	80096a2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e049      	b.n	8009736 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80096a2:	7ffb      	ldrb	r3, [r7, #31]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	4413      	add	r3, r2
 80096ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d015      	beq.n	80096e6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	18d0      	adds	r0, r2, r3
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c6:	fb03 f202 	mul.w	r2, r3, r2
 80096ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096cc:	4413      	add	r3, r2
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096d4:	4619      	mov	r1, r3
 80096d6:	f002 fdfa 	bl	800c2ce <memcpy>
        q->byteCount += NbBytesToCopy;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	695a      	ldr	r2, [r3, #20]
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	441a      	add	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	3301      	adds	r3, #1
 80096f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	f4ff aeb0 	bcc.w	8009460 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6919      	ldr	r1, [r3, #16]
 8009708:	7ffb      	ldrb	r3, [r7, #31]
 800970a:	4419      	add	r1, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	4299      	cmp	r1, r3
 8009712:	d307      	bcc.n	8009724 <CircularQueue_Add+0x434>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6919      	ldr	r1, [r3, #16]
 8009718:	7ffb      	ldrb	r3, [r7, #31]
 800971a:	4419      	add	r1, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	1acb      	subs	r3, r1, r3
 8009722:	e003      	b.n	800972c <CircularQueue_Add+0x43c>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6919      	ldr	r1, [r3, #16]
 8009728:	7ffb      	ldrb	r3, [r7, #31]
 800972a:	440b      	add	r3, r1
 800972c:	4413      	add	r3, r2
 800972e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	e000      	b.n	8009736 <CircularQueue_Add+0x446>
    return NULL;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3738      	adds	r7, #56	; 0x38
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009748:	2300      	movs	r3, #0
 800974a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	891b      	ldrh	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <CircularQueue_Remove+0x1e>
 8009758:	2302      	movs	r3, #2
 800975a:	e000      	b.n	800975e <CircularQueue_Remove+0x20>
 800975c:	2300      	movs	r3, #0
 800975e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 80cc 	beq.w	8009906 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	891b      	ldrh	r3, [r3, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d121      	bne.n	80097ba <CircularQueue_Remove+0x7c>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	4413      	add	r3, r2
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6819      	ldr	r1, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	1c58      	adds	r0, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	4298      	cmp	r0, r3
 8009794:	d306      	bcc.n	80097a4 <CircularQueue_Remove+0x66>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68d8      	ldr	r0, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	1ac3      	subs	r3, r0, r3
 80097a0:	3301      	adds	r3, #1
 80097a2:	e002      	b.n	80097aa <CircularQueue_Remove+0x6c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	440b      	add	r3, r1
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	4413      	add	r3, r2
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	e001      	b.n	80097be <CircularQueue_Remove+0x80>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	891b      	ldrh	r3, [r3, #8]
 80097be:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7f1b      	ldrb	r3, [r3, #28]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d057      	beq.n	800987c <CircularQueue_Remove+0x13e>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7f1b      	ldrb	r3, [r3, #28]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d151      	bne.n	800987c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80097d8:	897b      	ldrh	r3, [r7, #10]
 80097da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097de:	4293      	cmp	r3, r2
 80097e0:	d103      	bne.n	80097ea <CircularQueue_Remove+0xac>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	891b      	ldrh	r3, [r3, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d012      	beq.n	8009810 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d942      	bls.n	800987c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	891b      	ldrh	r3, [r3, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d03e      	beq.n	800987c <CircularQueue_Remove+0x13e>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	8912      	ldrh	r2, [r2, #8]
 800980c:	4293      	cmp	r3, r2
 800980e:	d235      	bcs.n	800987c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695a      	ldr	r2, [r3, #20]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68d9      	ldr	r1, [r3, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	1acb      	subs	r3, r1, r3
 800981e:	441a      	add	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	891b      	ldrh	r3, [r3, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d121      	bne.n	8009876 <CircularQueue_Remove+0x138>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	4413      	add	r3, r2
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	1c58      	adds	r0, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4298      	cmp	r0, r3
 8009850:	d306      	bcc.n	8009860 <CircularQueue_Remove+0x122>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68d8      	ldr	r0, [r3, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	1ac3      	subs	r3, r0, r3
 800985c:	3301      	adds	r3, #1
 800985e:	e002      	b.n	8009866 <CircularQueue_Remove+0x128>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	440b      	add	r3, r1
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	021b      	lsls	r3, r3, #8
 800986e:	b29b      	uxth	r3, r3
 8009870:	4413      	add	r3, r2
 8009872:	b29b      	uxth	r3, r3
 8009874:	e001      	b.n	800987a <CircularQueue_Remove+0x13c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	891b      	ldrh	r3, [r3, #8]
 800987a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68d9      	ldr	r1, [r3, #12]
 8009884:	7a7b      	ldrb	r3, [r7, #9]
 8009886:	4419      	add	r1, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	4299      	cmp	r1, r3
 800988e:	d307      	bcc.n	80098a0 <CircularQueue_Remove+0x162>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68d9      	ldr	r1, [r3, #12]
 8009894:	7a7b      	ldrb	r3, [r7, #9]
 8009896:	4419      	add	r1, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	1acb      	subs	r3, r1, r3
 800989e:	e003      	b.n	80098a8 <CircularQueue_Remove+0x16a>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68d9      	ldr	r1, [r3, #12]
 80098a4:	7a7b      	ldrb	r3, [r7, #9]
 80098a6:	440b      	add	r3, r1
 80098a8:	4413      	add	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	8979      	ldrh	r1, [r7, #10]
 80098b2:	7a7a      	ldrb	r2, [r7, #9]
 80098b4:	440a      	add	r2, r1
 80098b6:	1a9a      	subs	r2, r3, r2
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d01b      	beq.n	80098fc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68da      	ldr	r2, [r3, #12]
 80098c8:	897b      	ldrh	r3, [r7, #10]
 80098ca:	441a      	add	r2, r3
 80098cc:	7a7b      	ldrb	r3, [r7, #9]
 80098ce:	441a      	add	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d309      	bcc.n	80098ec <CircularQueue_Remove+0x1ae>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	897b      	ldrh	r3, [r7, #10]
 80098de:	441a      	add	r2, r3
 80098e0:	7a7b      	ldrb	r3, [r7, #9]
 80098e2:	441a      	add	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	e005      	b.n	80098f8 <CircularQueue_Remove+0x1ba>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	897b      	ldrh	r3, [r7, #10]
 80098f2:	441a      	add	r2, r3
 80098f4:	7a7b      	ldrb	r3, [r7, #9]
 80098f6:	4413      	add	r3, r2
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	1e5a      	subs	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	897a      	ldrh	r2, [r7, #10]
 8009910:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009912:	68fb      	ldr	r3, [r7, #12]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3714      	adds	r7, #20
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009920:	b480      	push	{r7}
 8009922:	b087      	sub	sp, #28
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	891b      	ldrh	r3, [r3, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <CircularQueue_Sense+0x1e>
 800993a:	2302      	movs	r3, #2
 800993c:	e000      	b.n	8009940 <CircularQueue_Sense+0x20>
 800993e:	2300      	movs	r3, #0
 8009940:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f000 8090 	beq.w	8009a74 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	891b      	ldrh	r3, [r3, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d121      	bne.n	80099a6 <CircularQueue_Sense+0x86>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	4413      	add	r3, r2
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	b29a      	uxth	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6819      	ldr	r1, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	1c58      	adds	r0, r3, #1
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4298      	cmp	r0, r3
 8009980:	d306      	bcc.n	8009990 <CircularQueue_Sense+0x70>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68d8      	ldr	r0, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	1ac3      	subs	r3, r0, r3
 800998c:	3301      	adds	r3, #1
 800998e:	e002      	b.n	8009996 <CircularQueue_Sense+0x76>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	440b      	add	r3, r1
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	b29b      	uxth	r3, r3
 80099a0:	4413      	add	r3, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	e001      	b.n	80099aa <CircularQueue_Sense+0x8a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	891b      	ldrh	r3, [r3, #8]
 80099aa:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7f1b      	ldrb	r3, [r3, #28]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d048      	beq.n	8009a4a <CircularQueue_Sense+0x12a>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7f1b      	ldrb	r3, [r3, #28]
 80099bc:	f003 0302 	and.w	r3, r3, #2
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d142      	bne.n	8009a4a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80099c4:	8a7b      	ldrh	r3, [r7, #18]
 80099c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d103      	bne.n	80099d6 <CircularQueue_Sense+0xb6>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	891b      	ldrh	r3, [r3, #8]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d012      	beq.n	80099fc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80099de:	429a      	cmp	r2, r3
 80099e0:	d933      	bls.n	8009a4a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	891b      	ldrh	r3, [r3, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d02f      	beq.n	8009a4a <CircularQueue_Sense+0x12a>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	8912      	ldrh	r2, [r2, #8]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d226      	bcs.n	8009a4a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80099fc:	2300      	movs	r3, #0
 80099fe:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	891b      	ldrh	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d11d      	bne.n	8009a44 <CircularQueue_Sense+0x124>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	1c58      	adds	r0, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	4298      	cmp	r0, r3
 8009a22:	d305      	bcc.n	8009a30 <CircularQueue_Sense+0x110>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	1ac3      	subs	r3, r0, r3
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	e001      	b.n	8009a34 <CircularQueue_Sense+0x114>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	3301      	adds	r3, #1
 8009a34:	440b      	add	r3, r1
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4413      	add	r3, r2
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	e001      	b.n	8009a48 <CircularQueue_Sense+0x128>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	891b      	ldrh	r3, [r3, #8]
 8009a48:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	7af9      	ldrb	r1, [r7, #11]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4419      	add	r1, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	d306      	bcc.n	8009a6a <CircularQueue_Sense+0x14a>
 8009a5c:	7af9      	ldrb	r1, [r7, #11]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4419      	add	r1, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	1acb      	subs	r3, r1, r3
 8009a68:	e002      	b.n	8009a70 <CircularQueue_Sense+0x150>
 8009a6a:	7af9      	ldrb	r1, [r7, #11]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	440b      	add	r3, r1
 8009a70:	4413      	add	r3, r2
 8009a72:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	8a7a      	ldrh	r2, [r7, #18]
 8009a7e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8009a80:	697b      	ldr	r3, [r7, #20]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
	...

08009a90 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009a90:	b480      	push	{r7}
 8009a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009a94:	4b03      	ldr	r3, [pc, #12]	; (8009aa4 <LL_FLASH_GetUDN+0x14>)
 8009a96:	681b      	ldr	r3, [r3, #0]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	1fff7580 	.word	0x1fff7580

08009aa8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009aac:	4b03      	ldr	r3, [pc, #12]	; (8009abc <LL_FLASH_GetDeviceID+0x14>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	b2db      	uxtb	r3, r3
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	1fff7584 	.word	0x1fff7584

08009ac0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8009ac4:	4b03      	ldr	r3, [pc, #12]	; (8009ad4 <LL_FLASH_GetSTCompanyID+0x14>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	0a1b      	lsrs	r3, r3, #8
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	1fff7584 	.word	0x1fff7584

08009ad8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8009ad8:	b5b0      	push	{r4, r5, r7, lr}
 8009ada:	b090      	sub	sp, #64	; 0x40
 8009adc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009ade:	2392      	movs	r3, #146	; 0x92
 8009ae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009ae4:	4b45      	ldr	r3, [pc, #276]	; (8009bfc <APP_BLE_Init+0x124>)
 8009ae6:	1d3c      	adds	r4, r7, #4
 8009ae8:	461d      	mov	r5, r3
 8009aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009af6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009afa:	c403      	stmia	r4!, {r0, r1}
 8009afc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8009afe:	f000 fb37 	bl	800a170 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009b02:	2101      	movs	r1, #1
 8009b04:	2002      	movs	r0, #2
 8009b06:	f001 fed1 	bl	800b8ac <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009b0a:	4a3d      	ldr	r2, [pc, #244]	; (8009c00 <APP_BLE_Init+0x128>)
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	2002      	movs	r0, #2
 8009b10:	f001 fff8 	bl	800bb04 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8009b14:	1d3b      	adds	r3, r7, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fbe6 	bl	80082e8 <SHCI_C2_BLE_Init>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8009b22:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d012      	beq.n	8009b50 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8009b2a:	4836      	ldr	r0, [pc, #216]	; (8009c04 <APP_BLE_Init+0x12c>)
 8009b2c:	f7ff f9ea 	bl	8008f04 <DbgTraceGetFileName>
 8009b30:	4601      	mov	r1, r0
 8009b32:	f44f 73a4 	mov.w	r3, #328	; 0x148
 8009b36:	4a34      	ldr	r2, [pc, #208]	; (8009c08 <APP_BLE_Init+0x130>)
 8009b38:	4834      	ldr	r0, [pc, #208]	; (8009c0c <APP_BLE_Init+0x134>)
 8009b3a:	f002 f9e7 	bl	800bf0c <iprintf>
 8009b3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009b42:	4619      	mov	r1, r3
 8009b44:	4832      	ldr	r0, [pc, #200]	; (8009c10 <APP_BLE_Init+0x138>)
 8009b46:	f002 f9e1 	bl	800bf0c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009b4a:	f7f8 fcdd 	bl	8002508 <Error_Handler>
 8009b4e:	e00c      	b.n	8009b6a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8009b50:	482c      	ldr	r0, [pc, #176]	; (8009c04 <APP_BLE_Init+0x12c>)
 8009b52:	f7ff f9d7 	bl	8008f04 <DbgTraceGetFileName>
 8009b56:	4601      	mov	r1, r0
 8009b58:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 8009b5c:	4a2a      	ldr	r2, [pc, #168]	; (8009c08 <APP_BLE_Init+0x130>)
 8009b5e:	482b      	ldr	r0, [pc, #172]	; (8009c0c <APP_BLE_Init+0x134>)
 8009b60:	f002 f9d4 	bl	800bf0c <iprintf>
 8009b64:	482b      	ldr	r0, [pc, #172]	; (8009c14 <APP_BLE_Init+0x13c>)
 8009b66:	f002 f9d1 	bl	800bf0c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009b6a:	f000 fb17 	bl	800a19c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009b6e:	f7fe fb15 	bl	800819c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009b72:	4b29      	ldr	r3, [pc, #164]	; (8009c18 <APP_BLE_Init+0x140>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009b7a:	4b27      	ldr	r3, [pc, #156]	; (8009c18 <APP_BLE_Init+0x140>)
 8009b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b80:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009b82:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <APP_BLE_Init+0x144>)
 8009b84:	2100      	movs	r1, #0
 8009b86:	2001      	movs	r0, #1
 8009b88:	f001 ffbc 	bl	800bb04 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8009b8c:	2006      	movs	r0, #6
 8009b8e:	f7fe f978 	bl	8007e82 <aci_hal_set_radio_activity_mask>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8009b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d010      	beq.n	8009bc2 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8009ba0:	4818      	ldr	r0, [pc, #96]	; (8009c04 <APP_BLE_Init+0x12c>)
 8009ba2:	f7ff f9af 	bl	8008f04 <DbgTraceGetFileName>
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8009bac:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <APP_BLE_Init+0x130>)
 8009bae:	4817      	ldr	r0, [pc, #92]	; (8009c0c <APP_BLE_Init+0x134>)
 8009bb0:	f002 f9ac 	bl	800bf0c <iprintf>
 8009bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4819      	ldr	r0, [pc, #100]	; (8009c20 <APP_BLE_Init+0x148>)
 8009bbc:	f002 f9a6 	bl	800bf0c <iprintf>
 8009bc0:	e00c      	b.n	8009bdc <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8009bc2:	4810      	ldr	r0, [pc, #64]	; (8009c04 <APP_BLE_Init+0x12c>)
 8009bc4:	f7ff f99e 	bl	8008f04 <DbgTraceGetFileName>
 8009bc8:	4601      	mov	r1, r0
 8009bca:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8009bce:	4a0e      	ldr	r2, [pc, #56]	; (8009c08 <APP_BLE_Init+0x130>)
 8009bd0:	480e      	ldr	r0, [pc, #56]	; (8009c0c <APP_BLE_Init+0x134>)
 8009bd2:	f002 f99b 	bl	800bf0c <iprintf>
 8009bd6:	4813      	ldr	r0, [pc, #76]	; (8009c24 <APP_BLE_Init+0x14c>)
 8009bd8:	f002 f998 	bl	800bf0c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009bdc:	f000 ff86 	bl	800aaec <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <APP_BLE_Init+0x140>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009be6:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <APP_BLE_Init+0x140>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009bec:	2001      	movs	r0, #1
 8009bee:	f000 fd69 	bl	800a6c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8009bf2:	bf00      	nop
}
 8009bf4:	3740      	adds	r7, #64	; 0x40
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	0800d264 	.word	0x0800d264
 8009c00:	08008505 	.word	0x08008505
 8009c04:	0800d158 	.word	0x0800d158
 8009c08:	0800e758 	.word	0x0800e758
 8009c0c:	0800d174 	.word	0x0800d174
 8009c10:	0800d188 	.word	0x0800d188
 8009c14:	0800d1c0 	.word	0x0800d1c0
 8009c18:	20001394 	.word	0x20001394
 8009c1c:	0800a849 	.word	0x0800a849
 8009c20:	0800d1e8 	.word	0x0800d1e8
 8009c24:	0800d22c 	.word	0x0800d22c

08009c28 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b08e      	sub	sp, #56	; 0x38
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009c30:	2392      	movs	r3, #146	; 0x92
 8009c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2bff      	cmp	r3, #255	; 0xff
 8009c42:	f000 811d 	beq.w	8009e80 <SVCCTL_App_Notification+0x258>
 8009c46:	2bff      	cmp	r3, #255	; 0xff
 8009c48:	f300 8269 	bgt.w	800a11e <SVCCTL_App_Notification+0x4f6>
 8009c4c:	2b05      	cmp	r3, #5
 8009c4e:	d002      	beq.n	8009c56 <SVCCTL_App_Notification+0x2e>
 8009c50:	2b3e      	cmp	r3, #62	; 0x3e
 8009c52:	d042      	beq.n	8009cda <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009c54:	e263      	b.n	800a11e <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	3302      	adds	r3, #2
 8009c5a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	4bb1      	ldr	r3, [pc, #708]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009c66:	8adb      	ldrh	r3, [r3, #22]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d128      	bne.n	8009cbe <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009c6c:	4baf      	ldr	r3, [pc, #700]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009c72:	4bae      	ldr	r3, [pc, #696]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8009c7a:	48ad      	ldr	r0, [pc, #692]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009c7c:	f7ff f942 	bl	8008f04 <DbgTraceGetFileName>
 8009c80:	4601      	mov	r1, r0
 8009c82:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8009c86:	4aab      	ldr	r2, [pc, #684]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009c88:	48ab      	ldr	r0, [pc, #684]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009c8a:	f002 f93f 	bl	800bf0c <iprintf>
 8009c8e:	48ab      	ldr	r0, [pc, #684]	; (8009f3c <SVCCTL_App_Notification+0x314>)
 8009c90:	f002 f9aa 	bl	800bfe8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8009c94:	48a6      	ldr	r0, [pc, #664]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009c96:	f7ff f935 	bl	8008f04 <DbgTraceGetFileName>
 8009c9a:	4601      	mov	r1, r0
 8009c9c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8009ca0:	4aa4      	ldr	r2, [pc, #656]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009ca2:	48a5      	ldr	r0, [pc, #660]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009ca4:	f002 f932 	bl	800bf0c <iprintf>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	78db      	ldrb	r3, [r3, #3]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	48a1      	ldr	r0, [pc, #644]	; (8009f40 <SVCCTL_App_Notification+0x318>)
 8009cba:	f002 f927 	bl	800bf0c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f000 fd00 	bl	800a6c4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8009cc4:	4b9f      	ldr	r3, [pc, #636]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009cca:	4b98      	ldr	r3, [pc, #608]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009ccc:	8ada      	ldrh	r2, [r3, #22]
 8009cce:	4b9d      	ldr	r3, [pc, #628]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009cd0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8009cd2:	489c      	ldr	r0, [pc, #624]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009cd4:	f000 fef6 	bl	800aac4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009cd8:	e224      	b.n	800a124 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	3302      	adds	r3, #2
 8009cde:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d042      	beq.n	8009d6e <SVCCTL_App_Notification+0x146>
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	f040 80c7 	bne.w	8009e7c <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8009cf4:	488e      	ldr	r0, [pc, #568]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009cf6:	f7ff f905 	bl	8008f04 <DbgTraceGetFileName>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8009d00:	4a8c      	ldr	r2, [pc, #560]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009d02:	488d      	ldr	r0, [pc, #564]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009d04:	f002 f902 	bl	800bf0c <iprintf>
 8009d08:	488f      	ldr	r0, [pc, #572]	; (8009f48 <SVCCTL_App_Notification+0x320>)
 8009d0a:	f002 f96d 	bl	800bfe8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009d0e:	4888      	ldr	r0, [pc, #544]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009d10:	f7ff f8f8 	bl	8008f04 <DbgTraceGetFileName>
 8009d14:	4601      	mov	r1, r0
 8009d16:	f240 13e3 	movw	r3, #483	; 0x1e3
 8009d1a:	4a86      	ldr	r2, [pc, #536]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009d1c:	4886      	ldr	r0, [pc, #536]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009d1e:	f002 f8f5 	bl	800bf0c <iprintf>
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f6 fcfc 	bl	8000728 <__aeabi_i2d>
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	4b85      	ldr	r3, [pc, #532]	; (8009f4c <SVCCTL_App_Notification+0x324>)
 8009d36:	f7f6 fa7b 	bl	8000230 <__aeabi_dmul>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	461a      	mov	r2, r3
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	9400      	str	r4, [sp, #0]
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	487a      	ldr	r0, [pc, #488]	; (8009f50 <SVCCTL_App_Notification+0x328>)
 8009d68:	f002 f8d0 	bl	800bf0c <iprintf>
          break;
 8009d6c:	e087      	b.n	8009e7e <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	3301      	adds	r3, #1
 8009d72:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8009d74:	486e      	ldr	r0, [pc, #440]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009d76:	f7ff f8c5 	bl	8008f04 <DbgTraceGetFileName>
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8009d80:	4a6c      	ldr	r2, [pc, #432]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009d82:	486d      	ldr	r0, [pc, #436]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009d84:	f002 f8c2 	bl	800bf0c <iprintf>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4619      	mov	r1, r3
 8009d92:	4870      	ldr	r0, [pc, #448]	; (8009f54 <SVCCTL_App_Notification+0x32c>)
 8009d94:	f002 f8ba 	bl	800bf0c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8009d98:	4865      	ldr	r0, [pc, #404]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009d9a:	f7ff f8b3 	bl	8008f04 <DbgTraceGetFileName>
 8009d9e:	4601      	mov	r1, r0
 8009da0:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8009da4:	4a63      	ldr	r2, [pc, #396]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009da6:	4864      	ldr	r0, [pc, #400]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009da8:	f002 f8b0 	bl	800bf0c <iprintf>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	7a9b      	ldrb	r3, [r3, #10]
 8009db0:	4618      	mov	r0, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	7a5b      	ldrb	r3, [r3, #9]
 8009db6:	461c      	mov	r4, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	7a1b      	ldrb	r3, [r3, #8]
 8009dbc:	461d      	mov	r5, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	79db      	ldrb	r3, [r3, #7]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	799b      	ldrb	r3, [r3, #6]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	795b      	ldrb	r3, [r3, #5]
 8009dce:	9302      	str	r3, [sp, #8]
 8009dd0:	9101      	str	r1, [sp, #4]
 8009dd2:	9200      	str	r2, [sp, #0]
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	4622      	mov	r2, r4
 8009dd8:	4601      	mov	r1, r0
 8009dda:	485f      	ldr	r0, [pc, #380]	; (8009f58 <SVCCTL_App_Notification+0x330>)
 8009ddc:	f002 f896 	bl	800bf0c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8009de0:	4853      	ldr	r0, [pc, #332]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009de2:	f7ff f88f 	bl	8008f04 <DbgTraceGetFileName>
 8009de6:	4601      	mov	r1, r0
 8009de8:	f240 13fd 	movw	r3, #509	; 0x1fd
 8009dec:	4a51      	ldr	r2, [pc, #324]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009dee:	4852      	ldr	r0, [pc, #328]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009df0:	f002 f88c 	bl	800bf0c <iprintf>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7f6 fc93 	bl	8000728 <__aeabi_i2d>
 8009e02:	f04f 0200 	mov.w	r2, #0
 8009e06:	4b51      	ldr	r3, [pc, #324]	; (8009f4c <SVCCTL_App_Notification+0x324>)
 8009e08:	f7f6 fa12 	bl	8000230 <__aeabi_dmul>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4610      	mov	r0, r2
 8009e12:	4619      	mov	r1, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	9400      	str	r4, [sp, #0]
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4845      	ldr	r0, [pc, #276]	; (8009f50 <SVCCTL_App_Notification+0x328>)
 8009e3a:	f002 f867 	bl	800bf0c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009e3e:	4b3b      	ldr	r3, [pc, #236]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009e40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d104      	bne.n	8009e52 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009e48:	4b38      	ldr	r3, [pc, #224]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009e4a:	2206      	movs	r2, #6
 8009e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009e50:	e003      	b.n	8009e5a <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009e52:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009e54:	2205      	movs	r2, #5
 8009e56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	4b32      	ldr	r3, [pc, #200]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009e64:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009e66:	4b37      	ldr	r3, [pc, #220]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009e6c:	4b2f      	ldr	r3, [pc, #188]	; (8009f2c <SVCCTL_App_Notification+0x304>)
 8009e6e:	8ada      	ldrh	r2, [r3, #22]
 8009e70:	4b34      	ldr	r3, [pc, #208]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009e72:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009e74:	4833      	ldr	r0, [pc, #204]	; (8009f44 <SVCCTL_App_Notification+0x31c>)
 8009e76:	f000 fe25 	bl	800aac4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009e7a:	e000      	b.n	8009e7e <SVCCTL_App_Notification+0x256>
          break;
 8009e7c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8009e7e:	e151      	b.n	800a124 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	3302      	adds	r3, #2
 8009e84:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e90:	f000 8141 	beq.w	800a116 <SVCCTL_App_Notification+0x4ee>
 8009e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e98:	f300 8143 	bgt.w	800a122 <SVCCTL_App_Notification+0x4fa>
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	f000 813c 	beq.w	800a11a <SVCCTL_App_Notification+0x4f2>
 8009ea2:	2b04      	cmp	r3, #4
 8009ea4:	f2c0 813d 	blt.w	800a122 <SVCCTL_App_Notification+0x4fa>
 8009ea8:	f240 420a 	movw	r2, #1034	; 0x40a
 8009eac:	4293      	cmp	r3, r2
 8009eae:	f300 8138 	bgt.w	800a122 <SVCCTL_App_Notification+0x4fa>
 8009eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb6:	f340 8134 	ble.w	800a122 <SVCCTL_App_Notification+0x4fa>
 8009eba:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	f200 812f 	bhi.w	800a122 <SVCCTL_App_Notification+0x4fa>
 8009ec4:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <SVCCTL_App_Notification+0x2a4>)
 8009ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eca:	bf00      	nop
 8009ecc:	0800a091 	.word	0x0800a091
 8009ed0:	08009f65 	.word	0x08009f65
 8009ed4:	0800a123 	.word	0x0800a123
 8009ed8:	0800a123 	.word	0x0800a123
 8009edc:	0800a123 	.word	0x0800a123
 8009ee0:	0800a123 	.word	0x0800a123
 8009ee4:	08009ef5 	.word	0x08009ef5
 8009ee8:	0800a123 	.word	0x0800a123
 8009eec:	08009fd7 	.word	0x08009fd7
 8009ef0:	08009f11 	.word	0x08009f11
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8009ef4:	480e      	ldr	r0, [pc, #56]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009ef6:	f7ff f805 	bl	8008f04 <DbgTraceGetFileName>
 8009efa:	4601      	mov	r1, r0
 8009efc:	f240 233f 	movw	r3, #575	; 0x23f
 8009f00:	4a0c      	ldr	r2, [pc, #48]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009f02:	480d      	ldr	r0, [pc, #52]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009f04:	f002 f802 	bl	800bf0c <iprintf>
 8009f08:	4814      	ldr	r0, [pc, #80]	; (8009f5c <SVCCTL_App_Notification+0x334>)
 8009f0a:	f001 ffff 	bl	800bf0c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009f0e:	e105      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8009f10:	4807      	ldr	r0, [pc, #28]	; (8009f30 <SVCCTL_App_Notification+0x308>)
 8009f12:	f7fe fff7 	bl	8008f04 <DbgTraceGetFileName>
 8009f16:	4601      	mov	r1, r0
 8009f18:	f240 234f 	movw	r3, #591	; 0x24f
 8009f1c:	4a05      	ldr	r2, [pc, #20]	; (8009f34 <SVCCTL_App_Notification+0x30c>)
 8009f1e:	4806      	ldr	r0, [pc, #24]	; (8009f38 <SVCCTL_App_Notification+0x310>)
 8009f20:	f001 fff4 	bl	800bf0c <iprintf>
 8009f24:	480e      	ldr	r0, [pc, #56]	; (8009f60 <SVCCTL_App_Notification+0x338>)
 8009f26:	f002 f85f 	bl	800bfe8 <puts>
          break;
 8009f2a:	e0f7      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
 8009f2c:	20001394 	.word	0x20001394
 8009f30:	0800d158 	.word	0x0800d158
 8009f34:	0800e768 	.word	0x0800e768
 8009f38:	0800d174 	.word	0x0800d174
 8009f3c:	0800d2a0 	.word	0x0800d2a0
 8009f40:	0800d2cc 	.word	0x0800d2cc
 8009f44:	20001418 	.word	0x20001418
 8009f48:	0800d308 	.word	0x0800d308
 8009f4c:	3ff40000 	.word	0x3ff40000
 8009f50:	0800d33c 	.word	0x0800d33c
 8009f54:	0800d3a8 	.word	0x0800d3a8
 8009f58:	0800d3f0 	.word	0x0800d3f0
 8009f5c:	0800d440 	.word	0x0800d440
 8009f60:	0800d468 	.word	0x0800d468
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8009f64:	4872      	ldr	r0, [pc, #456]	; (800a130 <SVCCTL_App_Notification+0x508>)
 8009f66:	f7fe ffcd 	bl	8008f04 <DbgTraceGetFileName>
 8009f6a:	4601      	mov	r1, r0
 8009f6c:	f240 2356 	movw	r3, #598	; 0x256
 8009f70:	4a70      	ldr	r2, [pc, #448]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 8009f72:	4871      	ldr	r0, [pc, #452]	; (800a138 <SVCCTL_App_Notification+0x510>)
 8009f74:	f001 ffca 	bl	800bf0c <iprintf>
 8009f78:	4870      	ldr	r0, [pc, #448]	; (800a13c <SVCCTL_App_Notification+0x514>)
 8009f7a:	f002 f835 	bl	800bfe8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009f7e:	4b70      	ldr	r3, [pc, #448]	; (800a140 <SVCCTL_App_Notification+0x518>)
 8009f80:	8adb      	ldrh	r3, [r3, #22]
 8009f82:	4970      	ldr	r1, [pc, #448]	; (800a144 <SVCCTL_App_Notification+0x51c>)
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fd f9d3 	bl	8007330 <aci_gap_pass_key_resp>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8009f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d010      	beq.n	8009fba <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8009f98:	4865      	ldr	r0, [pc, #404]	; (800a130 <SVCCTL_App_Notification+0x508>)
 8009f9a:	f7fe ffb3 	bl	8008f04 <DbgTraceGetFileName>
 8009f9e:	4601      	mov	r1, r0
 8009fa0:	f240 235b 	movw	r3, #603	; 0x25b
 8009fa4:	4a63      	ldr	r2, [pc, #396]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 8009fa6:	4864      	ldr	r0, [pc, #400]	; (800a138 <SVCCTL_App_Notification+0x510>)
 8009fa8:	f001 ffb0 	bl	800bf0c <iprintf>
 8009fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4865      	ldr	r0, [pc, #404]	; (800a148 <SVCCTL_App_Notification+0x520>)
 8009fb4:	f001 ffaa 	bl	800bf0c <iprintf>
          break;
 8009fb8:	e0b0      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8009fba:	485d      	ldr	r0, [pc, #372]	; (800a130 <SVCCTL_App_Notification+0x508>)
 8009fbc:	f7fe ffa2 	bl	8008f04 <DbgTraceGetFileName>
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	f240 235f 	movw	r3, #607	; 0x25f
 8009fc6:	4a5b      	ldr	r2, [pc, #364]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 8009fc8:	485b      	ldr	r0, [pc, #364]	; (800a138 <SVCCTL_App_Notification+0x510>)
 8009fca:	f001 ff9f 	bl	800bf0c <iprintf>
 8009fce:	485f      	ldr	r0, [pc, #380]	; (800a14c <SVCCTL_App_Notification+0x524>)
 8009fd0:	f002 f80a 	bl	800bfe8 <puts>
          break;
 8009fd4:	e0a2      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8009fd6:	4856      	ldr	r0, [pc, #344]	; (800a130 <SVCCTL_App_Notification+0x508>)
 8009fd8:	f7fe ff94 	bl	8008f04 <DbgTraceGetFileName>
 8009fdc:	4601      	mov	r1, r0
 8009fde:	f240 2367 	movw	r3, #615	; 0x267
 8009fe2:	4a54      	ldr	r2, [pc, #336]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 8009fe4:	4854      	ldr	r0, [pc, #336]	; (800a138 <SVCCTL_App_Notification+0x510>)
 8009fe6:	f001 ff91 	bl	800bf0c <iprintf>
 8009fea:	4859      	ldr	r0, [pc, #356]	; (800a150 <SVCCTL_App_Notification+0x528>)
 8009fec:	f001 fffc 	bl	800bfe8 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8009ff0:	484f      	ldr	r0, [pc, #316]	; (800a130 <SVCCTL_App_Notification+0x508>)
 8009ff2:	f7fe ff87 	bl	8008f04 <DbgTraceGetFileName>
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	f44f 731a 	mov.w	r3, #616	; 0x268
 8009ffc:	4a4d      	ldr	r2, [pc, #308]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 8009ffe:	484e      	ldr	r0, [pc, #312]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a000:	f001 ff84 	bl	800bf0c <iprintf>
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	3302      	adds	r3, #2
 800a008:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a00c:	4619      	mov	r1, r3
 800a00e:	4851      	ldr	r0, [pc, #324]	; (800a154 <SVCCTL_App_Notification+0x52c>)
 800a010:	f001 ff7c 	bl	800bf0c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800a014:	4846      	ldr	r0, [pc, #280]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a016:	f7fe ff75 	bl	8008f04 <DbgTraceGetFileName>
 800a01a:	4601      	mov	r1, r0
 800a01c:	f240 236a 	movw	r3, #618	; 0x26a
 800a020:	4a44      	ldr	r2, [pc, #272]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a022:	4845      	ldr	r0, [pc, #276]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a024:	f001 ff72 	bl	800bf0c <iprintf>
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	3302      	adds	r3, #2
 800a02c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800a030:	4619      	mov	r1, r3
 800a032:	4849      	ldr	r0, [pc, #292]	; (800a158 <SVCCTL_App_Notification+0x530>)
 800a034:	f001 ff6a 	bl	800bf0c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800a038:	4b41      	ldr	r3, [pc, #260]	; (800a140 <SVCCTL_App_Notification+0x518>)
 800a03a:	8adb      	ldrh	r3, [r3, #22]
 800a03c:	2101      	movs	r1, #1
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fd fb20 	bl	8007684 <aci_gap_numeric_comparison_value_confirm_yesno>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800a04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d010      	beq.n	800a074 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800a052:	4837      	ldr	r0, [pc, #220]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a054:	f7fe ff56 	bl	8008f04 <DbgTraceGetFileName>
 800a058:	4601      	mov	r1, r0
 800a05a:	f240 236f 	movw	r3, #623	; 0x26f
 800a05e:	4a35      	ldr	r2, [pc, #212]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a060:	4835      	ldr	r0, [pc, #212]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a062:	f001 ff53 	bl	800bf0c <iprintf>
 800a066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a06a:	4619      	mov	r1, r3
 800a06c:	483b      	ldr	r0, [pc, #236]	; (800a15c <SVCCTL_App_Notification+0x534>)
 800a06e:	f001 ff4d 	bl	800bf0c <iprintf>
          break;
 800a072:	e053      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800a074:	482e      	ldr	r0, [pc, #184]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a076:	f7fe ff45 	bl	8008f04 <DbgTraceGetFileName>
 800a07a:	4601      	mov	r1, r0
 800a07c:	f240 2373 	movw	r3, #627	; 0x273
 800a080:	4a2c      	ldr	r2, [pc, #176]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a082:	482d      	ldr	r0, [pc, #180]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a084:	f001 ff42 	bl	800bf0c <iprintf>
 800a088:	4835      	ldr	r0, [pc, #212]	; (800a160 <SVCCTL_App_Notification+0x538>)
 800a08a:	f001 ffad 	bl	800bfe8 <puts>
          break;
 800a08e:	e045      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	3302      	adds	r3, #2
 800a094:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800a096:	4826      	ldr	r0, [pc, #152]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a098:	f7fe ff34 	bl	8008f04 <DbgTraceGetFileName>
 800a09c:	4601      	mov	r1, r0
 800a09e:	f240 237d 	movw	r3, #637	; 0x27d
 800a0a2:	4a24      	ldr	r2, [pc, #144]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a0a4:	4824      	ldr	r0, [pc, #144]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a0a6:	f001 ff31 	bl	800bf0c <iprintf>
 800a0aa:	482e      	ldr	r0, [pc, #184]	; (800a164 <SVCCTL_App_Notification+0x53c>)
 800a0ac:	f001 ff9c 	bl	800bfe8 <puts>
          if (p_pairing_complete->Status != 0)
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	789b      	ldrb	r3, [r3, #2]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d013      	beq.n	800a0e0 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800a0b8:	481d      	ldr	r0, [pc, #116]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a0ba:	f7fe ff23 	bl	8008f04 <DbgTraceGetFileName>
 800a0be:	4601      	mov	r1, r0
 800a0c0:	f44f 7320 	mov.w	r3, #640	; 0x280
 800a0c4:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a0c6:	481c      	ldr	r0, [pc, #112]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a0c8:	f001 ff20 	bl	800bf0c <iprintf>
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	789b      	ldrb	r3, [r3, #2]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	78db      	ldrb	r3, [r3, #3]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	4823      	ldr	r0, [pc, #140]	; (800a168 <SVCCTL_App_Notification+0x540>)
 800a0da:	f001 ff17 	bl	800bf0c <iprintf>
 800a0de:	e00c      	b.n	800a0fa <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800a0e0:	4813      	ldr	r0, [pc, #76]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a0e2:	f7fe ff0f 	bl	8008f04 <DbgTraceGetFileName>
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	f44f 7321 	mov.w	r3, #644	; 0x284
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a0ee:	4812      	ldr	r0, [pc, #72]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a0f0:	f001 ff0c 	bl	800bf0c <iprintf>
 800a0f4:	481d      	ldr	r0, [pc, #116]	; (800a16c <SVCCTL_App_Notification+0x544>)
 800a0f6:	f001 ff77 	bl	800bfe8 <puts>
          APP_DBG_MSG("\n");
 800a0fa:	480d      	ldr	r0, [pc, #52]	; (800a130 <SVCCTL_App_Notification+0x508>)
 800a0fc:	f7fe ff02 	bl	8008f04 <DbgTraceGetFileName>
 800a100:	4601      	mov	r1, r0
 800a102:	f240 2386 	movw	r3, #646	; 0x286
 800a106:	4a0b      	ldr	r2, [pc, #44]	; (800a134 <SVCCTL_App_Notification+0x50c>)
 800a108:	480b      	ldr	r0, [pc, #44]	; (800a138 <SVCCTL_App_Notification+0x510>)
 800a10a:	f001 feff 	bl	800bf0c <iprintf>
 800a10e:	200a      	movs	r0, #10
 800a110:	f001 ff0e 	bl	800bf30 <putchar>
          break;
 800a114:	e002      	b.n	800a11c <SVCCTL_App_Notification+0x4f4>
          break;
 800a116:	bf00      	nop
 800a118:	e003      	b.n	800a122 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800a11a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a11c:	e001      	b.n	800a122 <SVCCTL_App_Notification+0x4fa>
      break;
 800a11e:	bf00      	nop
 800a120:	e000      	b.n	800a124 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800a122:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800a124:	2301      	movs	r3, #1
}
 800a126:	4618      	mov	r0, r3
 800a128:	3728      	adds	r7, #40	; 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bdb0      	pop	{r4, r5, r7, pc}
 800a12e:	bf00      	nop
 800a130:	0800d158 	.word	0x0800d158
 800a134:	0800e768 	.word	0x0800e768
 800a138:	0800d174 	.word	0x0800d174
 800a13c:	0800d498 	.word	0x0800d498
 800a140:	20001394 	.word	0x20001394
 800a144:	0001b207 	.word	0x0001b207
 800a148:	0800d4c0 	.word	0x0800d4c0
 800a14c:	0800d4f4 	.word	0x0800d4f4
 800a150:	0800d51c 	.word	0x0800d51c
 800a154:	0800d550 	.word	0x0800d550
 800a158:	0800d56c 	.word	0x0800d56c
 800a15c:	0800d584 	.word	0x0800d584
 800a160:	0800d5d4 	.word	0x0800d5d4
 800a164:	0800d61c 	.word	0x0800d61c
 800a168:	0800d648 	.word	0x0800d648
 800a16c:	0800d684 	.word	0x0800d684

0800a170 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <Ble_Tl_Init+0x20>)
 800a178:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800a17a:	4b06      	ldr	r3, [pc, #24]	; (800a194 <Ble_Tl_Init+0x24>)
 800a17c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800a17e:	463b      	mov	r3, r7
 800a180:	4619      	mov	r1, r3
 800a182:	4805      	ldr	r0, [pc, #20]	; (800a198 <Ble_Tl_Init+0x28>)
 800a184:	f7fe f9a2 	bl	80084cc <hci_init>

  return;
 800a188:	bf00      	nop
}
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	200300d8 	.word	0x200300d8
 800a194:	0800a971 	.word	0x0800a971
 800a198:	0800a939 	.word	0x0800a939

0800a19c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19e:	b08d      	sub	sp, #52	; 0x34
 800a1a0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a1a6:	2392      	movs	r3, #146	; 0x92
 800a1a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800a1aa:	48a3      	ldr	r0, [pc, #652]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a1ac:	f7fe feaa 	bl	8008f04 <DbgTraceGetFileName>
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	f240 23c6 	movw	r3, #710	; 0x2c6
 800a1b6:	4aa1      	ldr	r2, [pc, #644]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a1b8:	48a1      	ldr	r0, [pc, #644]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a1ba:	f001 fea7 	bl	800bf0c <iprintf>
 800a1be:	48a1      	ldr	r0, [pc, #644]	; (800a444 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800a1c0:	f001 ff12 	bl	800bfe8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800a1c4:	f7fd feb1 	bl	8007f2a <hci_reset>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00f      	beq.n	800a1f2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800a1d2:	4899      	ldr	r0, [pc, #612]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a1d4:	f7fe fe96 	bl	8008f04 <DbgTraceGetFileName>
 800a1d8:	4601      	mov	r1, r0
 800a1da:	f240 23cf 	movw	r3, #719	; 0x2cf
 800a1de:	4a97      	ldr	r2, [pc, #604]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a1e0:	4897      	ldr	r0, [pc, #604]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a1e2:	f001 fe93 	bl	800bf0c <iprintf>
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4897      	ldr	r0, [pc, #604]	; (800a448 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800a1ec:	f001 fe8e 	bl	800bf0c <iprintf>
 800a1f0:	e00c      	b.n	800a20c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800a1f2:	4891      	ldr	r0, [pc, #580]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a1f4:	f7fe fe86 	bl	8008f04 <DbgTraceGetFileName>
 800a1f8:	4601      	mov	r1, r0
 800a1fa:	f240 23d3 	movw	r3, #723	; 0x2d3
 800a1fe:	4a8f      	ldr	r2, [pc, #572]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a200:	488f      	ldr	r0, [pc, #572]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a202:	f001 fe83 	bl	800bf0c <iprintf>
 800a206:	4891      	ldr	r0, [pc, #580]	; (800a44c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800a208:	f001 feee 	bl	800bfe8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800a20c:	f000 fad8 	bl	800a7c0 <BleGetBdAddress>
 800a210:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	2106      	movs	r1, #6
 800a216:	2000      	movs	r0, #0
 800a218:	f7fd fd47 	bl	8007caa <aci_hal_write_config_data>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00f      	beq.n	800a246 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800a226:	4884      	ldr	r0, [pc, #528]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a228:	f7fe fe6c 	bl	8008f04 <DbgTraceGetFileName>
 800a22c:	4601      	mov	r1, r0
 800a22e:	f240 23dd 	movw	r3, #733	; 0x2dd
 800a232:	4a82      	ldr	r2, [pc, #520]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a234:	4882      	ldr	r0, [pc, #520]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a236:	f001 fe69 	bl	800bf0c <iprintf>
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	4619      	mov	r1, r3
 800a23e:	4884      	ldr	r0, [pc, #528]	; (800a450 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800a240:	f001 fe64 	bl	800bf0c <iprintf>
 800a244:	e035      	b.n	800a2b2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800a246:	487c      	ldr	r0, [pc, #496]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a248:	f7fe fe5c 	bl	8008f04 <DbgTraceGetFileName>
 800a24c:	4601      	mov	r1, r0
 800a24e:	f240 23e1 	movw	r3, #737	; 0x2e1
 800a252:	4a7a      	ldr	r2, [pc, #488]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a254:	487a      	ldr	r0, [pc, #488]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a256:	f001 fe59 	bl	800bf0c <iprintf>
 800a25a:	487e      	ldr	r0, [pc, #504]	; (800a454 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800a25c:	f001 fec4 	bl	800bfe8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800a260:	4875      	ldr	r0, [pc, #468]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a262:	f7fe fe4f 	bl	8008f04 <DbgTraceGetFileName>
 800a266:	4601      	mov	r1, r0
 800a268:	f240 23e2 	movw	r3, #738	; 0x2e2
 800a26c:	4a73      	ldr	r2, [pc, #460]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a26e:	4874      	ldr	r0, [pc, #464]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a270:	f001 fe4c 	bl	800bf0c <iprintf>
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	3305      	adds	r3, #5
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	4618      	mov	r0, r3
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	3304      	adds	r3, #4
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461c      	mov	r4, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	3303      	adds	r3, #3
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	461d      	mov	r5, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	3302      	adds	r3, #2
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	3301      	adds	r3, #1
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	4619      	mov	r1, r3
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	9302      	str	r3, [sp, #8]
 800a2a2:	9101      	str	r1, [sp, #4]
 800a2a4:	9200      	str	r2, [sp, #0]
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	4622      	mov	r2, r4
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	486a      	ldr	r0, [pc, #424]	; (800a458 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800a2ae:	f001 fe2d 	bl	800bf0c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800a2b2:	4a6a      	ldr	r2, [pc, #424]	; (800a45c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800a2b4:	2110      	movs	r1, #16
 800a2b6:	2018      	movs	r0, #24
 800a2b8:	f7fd fcf7 	bl	8007caa <aci_hal_write_config_data>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a2c0:	7dfb      	ldrb	r3, [r7, #23]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00f      	beq.n	800a2e6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800a2c6:	485c      	ldr	r0, [pc, #368]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a2c8:	f7fe fe1c 	bl	8008f04 <DbgTraceGetFileName>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800a2d2:	4a5a      	ldr	r2, [pc, #360]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a2d4:	485a      	ldr	r0, [pc, #360]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a2d6:	f001 fe19 	bl	800bf0c <iprintf>
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4860      	ldr	r0, [pc, #384]	; (800a460 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800a2e0:	f001 fe14 	bl	800bf0c <iprintf>
 800a2e4:	e00c      	b.n	800a300 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800a2e6:	4854      	ldr	r0, [pc, #336]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a2e8:	f7fe fe0c 	bl	8008f04 <DbgTraceGetFileName>
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	f44f 734c 	mov.w	r3, #816	; 0x330
 800a2f2:	4a52      	ldr	r2, [pc, #328]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a2f4:	4852      	ldr	r0, [pc, #328]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a2f6:	f001 fe09 	bl	800bf0c <iprintf>
 800a2fa:	485a      	ldr	r0, [pc, #360]	; (800a464 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800a2fc:	f001 fe74 	bl	800bfe8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800a300:	4a59      	ldr	r2, [pc, #356]	; (800a468 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800a302:	2110      	movs	r1, #16
 800a304:	2008      	movs	r0, #8
 800a306:	f7fd fcd0 	bl	8007caa <aci_hal_write_config_data>
 800a30a:	4603      	mov	r3, r0
 800a30c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00f      	beq.n	800a334 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800a314:	4848      	ldr	r0, [pc, #288]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a316:	f7fe fdf5 	bl	8008f04 <DbgTraceGetFileName>
 800a31a:	4601      	mov	r1, r0
 800a31c:	f240 3339 	movw	r3, #825	; 0x339
 800a320:	4a46      	ldr	r2, [pc, #280]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a322:	4847      	ldr	r0, [pc, #284]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a324:	f001 fdf2 	bl	800bf0c <iprintf>
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	4619      	mov	r1, r3
 800a32c:	484f      	ldr	r0, [pc, #316]	; (800a46c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800a32e:	f001 fded 	bl	800bf0c <iprintf>
 800a332:	e00c      	b.n	800a34e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800a334:	4840      	ldr	r0, [pc, #256]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a336:	f7fe fde5 	bl	8008f04 <DbgTraceGetFileName>
 800a33a:	4601      	mov	r1, r0
 800a33c:	f240 333d 	movw	r3, #829	; 0x33d
 800a340:	4a3e      	ldr	r2, [pc, #248]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a342:	483f      	ldr	r0, [pc, #252]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a344:	f001 fde2 	bl	800bf0c <iprintf>
 800a348:	4849      	ldr	r0, [pc, #292]	; (800a470 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800a34a:	f001 fe4d 	bl	800bfe8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800a34e:	2118      	movs	r1, #24
 800a350:	2001      	movs	r0, #1
 800a352:	f7fd fd2f 	bl	8007db4 <aci_hal_set_tx_power_level>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00f      	beq.n	800a380 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800a360:	4835      	ldr	r0, [pc, #212]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a362:	f7fe fdcf 	bl	8008f04 <DbgTraceGetFileName>
 800a366:	4601      	mov	r1, r0
 800a368:	f240 3346 	movw	r3, #838	; 0x346
 800a36c:	4a33      	ldr	r2, [pc, #204]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a36e:	4834      	ldr	r0, [pc, #208]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a370:	f001 fdcc 	bl	800bf0c <iprintf>
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	4619      	mov	r1, r3
 800a378:	483e      	ldr	r0, [pc, #248]	; (800a474 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800a37a:	f001 fdc7 	bl	800bf0c <iprintf>
 800a37e:	e00c      	b.n	800a39a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800a380:	482d      	ldr	r0, [pc, #180]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a382:	f7fe fdbf 	bl	8008f04 <DbgTraceGetFileName>
 800a386:	4601      	mov	r1, r0
 800a388:	f240 334a 	movw	r3, #842	; 0x34a
 800a38c:	4a2b      	ldr	r2, [pc, #172]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a38e:	482c      	ldr	r0, [pc, #176]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a390:	f001 fdbc 	bl	800bf0c <iprintf>
 800a394:	4838      	ldr	r0, [pc, #224]	; (800a478 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800a396:	f001 fe27 	bl	800bfe8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800a39a:	f7fd f9da 	bl	8007752 <aci_gatt_init>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00f      	beq.n	800a3c8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800a3a8:	4823      	ldr	r0, [pc, #140]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a3aa:	f7fe fdab 	bl	8008f04 <DbgTraceGetFileName>
 800a3ae:	4601      	mov	r1, r0
 800a3b0:	f240 3353 	movw	r3, #851	; 0x353
 800a3b4:	4a21      	ldr	r2, [pc, #132]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a3b6:	4822      	ldr	r0, [pc, #136]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a3b8:	f001 fda8 	bl	800bf0c <iprintf>
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	482e      	ldr	r0, [pc, #184]	; (800a47c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800a3c2:	f001 fda3 	bl	800bf0c <iprintf>
 800a3c6:	e00c      	b.n	800a3e2 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800a3c8:	481b      	ldr	r0, [pc, #108]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a3ca:	f7fe fd9b 	bl	8008f04 <DbgTraceGetFileName>
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	f240 3357 	movw	r3, #855	; 0x357
 800a3d4:	4a19      	ldr	r2, [pc, #100]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a3d6:	481a      	ldr	r0, [pc, #104]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a3d8:	f001 fd98 	bl	800bf0c <iprintf>
 800a3dc:	4828      	ldr	r0, [pc, #160]	; (800a480 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800a3de:	f001 fe03 	bl	800bfe8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800a3e6:	7bfb      	ldrb	r3, [r7, #15]
 800a3e8:	f043 0301 	orr.w	r3, r3, #1
 800a3ec:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d069      	beq.n	800a4c8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800a3f4:	4b23      	ldr	r3, [pc, #140]	; (800a484 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800a3f6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800a3f8:	1dba      	adds	r2, r7, #6
 800a3fa:	7bf8      	ldrb	r0, [r7, #15]
 800a3fc:	1cbb      	adds	r3, r7, #2
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	1d3b      	adds	r3, r7, #4
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4613      	mov	r3, r2
 800a406:	220a      	movs	r2, #10
 800a408:	2100      	movs	r1, #0
 800a40a:	f7fc fff8 	bl	80073fe <aci_gap_init>
 800a40e:	4603      	mov	r3, r0
 800a410:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800a412:	7dfb      	ldrb	r3, [r7, #23]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d039      	beq.n	800a48c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800a418:	4807      	ldr	r0, [pc, #28]	; (800a438 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800a41a:	f7fe fd73 	bl	8008f04 <DbgTraceGetFileName>
 800a41e:	4601      	mov	r1, r0
 800a420:	f240 3377 	movw	r3, #887	; 0x377
 800a424:	4a05      	ldr	r2, [pc, #20]	; (800a43c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800a426:	4806      	ldr	r0, [pc, #24]	; (800a440 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800a428:	f001 fd70 	bl	800bf0c <iprintf>
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	4619      	mov	r1, r3
 800a430:	4815      	ldr	r0, [pc, #84]	; (800a488 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800a432:	f001 fd6b 	bl	800bf0c <iprintf>
 800a436:	e036      	b.n	800a4a6 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800a438:	0800d158 	.word	0x0800d158
 800a43c:	0800e780 	.word	0x0800e780
 800a440:	0800d174 	.word	0x0800d174
 800a444:	0800d69c 	.word	0x0800d69c
 800a448:	0800d6c8 	.word	0x0800d6c8
 800a44c:	0800d6f8 	.word	0x0800d6f8
 800a450:	0800d718 	.word	0x0800d718
 800a454:	0800d774 	.word	0x0800d774
 800a458:	0800d7c0 	.word	0x0800d7c0
 800a45c:	0800e738 	.word	0x0800e738
 800a460:	0800d7fc 	.word	0x0800d7fc
 800a464:	0800d854 	.word	0x0800d854
 800a468:	0800e748 	.word	0x0800e748
 800a46c:	0800d89c 	.word	0x0800d89c
 800a470:	0800d8f4 	.word	0x0800d8f4
 800a474:	0800d93c 	.word	0x0800d93c
 800a478:	0800d97c 	.word	0x0800d97c
 800a47c:	0800d9ac 	.word	0x0800d9ac
 800a480:	0800d9e0 	.word	0x0800d9e0
 800a484:	0800da04 	.word	0x0800da04
 800a488:	0800da10 	.word	0x0800da10
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800a48c:	487e      	ldr	r0, [pc, #504]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a48e:	f7fe fd39 	bl	8008f04 <DbgTraceGetFileName>
 800a492:	4601      	mov	r1, r0
 800a494:	f240 337b 	movw	r3, #891	; 0x37b
 800a498:	4a7c      	ldr	r2, [pc, #496]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a49a:	487d      	ldr	r0, [pc, #500]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a49c:	f001 fd36 	bl	800bf0c <iprintf>
 800a4a0:	487c      	ldr	r0, [pc, #496]	; (800a694 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800a4a2:	f001 fda1 	bl	800bfe8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800a4a6:	88fc      	ldrh	r4, [r7, #6]
 800a4a8:	88bd      	ldrh	r5, [r7, #4]
 800a4aa:	68b8      	ldr	r0, [r7, #8]
 800a4ac:	f7f5 fe68 	bl	8000180 <strlen>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7fd fb4a 	bl	8007b58 <aci_gatt_update_char_value>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800a4c8:	88f8      	ldrh	r0, [r7, #6]
 800a4ca:	8879      	ldrh	r1, [r7, #2]
 800a4cc:	463b      	mov	r3, r7
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f7fd fb40 	bl	8007b58 <aci_gatt_update_char_value>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800a4dc:	2202      	movs	r2, #2
 800a4de:	2102      	movs	r1, #2
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f7fd fd46 	bl	8007f72 <hci_le_set_default_phy>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00f      	beq.n	800a510 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800a4f0:	4865      	ldr	r0, [pc, #404]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a4f2:	f7fe fd07 	bl	8008f04 <DbgTraceGetFileName>
 800a4f6:	4601      	mov	r1, r0
 800a4f8:	f240 339d 	movw	r3, #925	; 0x39d
 800a4fc:	4a63      	ldr	r2, [pc, #396]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a4fe:	4864      	ldr	r0, [pc, #400]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a500:	f001 fd04 	bl	800bf0c <iprintf>
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	4619      	mov	r1, r3
 800a508:	4863      	ldr	r0, [pc, #396]	; (800a698 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800a50a:	f001 fcff 	bl	800bf0c <iprintf>
 800a50e:	e00c      	b.n	800a52a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800a510:	485d      	ldr	r0, [pc, #372]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a512:	f7fe fcf7 	bl	8008f04 <DbgTraceGetFileName>
 800a516:	4601      	mov	r1, r0
 800a518:	f240 33a1 	movw	r3, #929	; 0x3a1
 800a51c:	4a5b      	ldr	r2, [pc, #364]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a51e:	485c      	ldr	r0, [pc, #368]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a520:	f001 fcf4 	bl	800bf0c <iprintf>
 800a524:	485d      	ldr	r0, [pc, #372]	; (800a69c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800a526:	f001 fd5f 	bl	800bfe8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800a52a:	4b5d      	ldr	r3, [pc, #372]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a52c:	2201      	movs	r2, #1
 800a52e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800a530:	4b5b      	ldr	r3, [pc, #364]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f7fc fde3 	bl	8007100 <aci_gap_set_io_capability>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00f      	beq.n	800a564 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800a544:	4850      	ldr	r0, [pc, #320]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a546:	f7fe fcdd 	bl	8008f04 <DbgTraceGetFileName>
 800a54a:	4601      	mov	r1, r0
 800a54c:	f240 33ab 	movw	r3, #939	; 0x3ab
 800a550:	4a4e      	ldr	r2, [pc, #312]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a552:	484f      	ldr	r0, [pc, #316]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a554:	f001 fcda 	bl	800bf0c <iprintf>
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	4619      	mov	r1, r3
 800a55c:	4851      	ldr	r0, [pc, #324]	; (800a6a4 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800a55e:	f001 fcd5 	bl	800bf0c <iprintf>
 800a562:	e00c      	b.n	800a57e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800a564:	4848      	ldr	r0, [pc, #288]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a566:	f7fe fccd 	bl	8008f04 <DbgTraceGetFileName>
 800a56a:	4601      	mov	r1, r0
 800a56c:	f240 33af 	movw	r3, #943	; 0x3af
 800a570:	4a46      	ldr	r2, [pc, #280]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a572:	4847      	ldr	r0, [pc, #284]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a574:	f001 fcca 	bl	800bf0c <iprintf>
 800a578:	484b      	ldr	r0, [pc, #300]	; (800a6a8 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800a57a:	f001 fd35 	bl	800bfe8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800a57e:	4b48      	ldr	r3, [pc, #288]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a580:	2201      	movs	r2, #1
 800a582:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a584:	4b46      	ldr	r3, [pc, #280]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a586:	2208      	movs	r2, #8
 800a588:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a58a:	4b45      	ldr	r3, [pc, #276]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a58c:	2210      	movs	r2, #16
 800a58e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a590:	4b43      	ldr	r3, [pc, #268]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a592:	2200      	movs	r2, #0
 800a594:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a596:	4b42      	ldr	r3, [pc, #264]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a598:	4a44      	ldr	r2, [pc, #272]	; (800a6ac <Ble_Hci_Gap_Gatt_Init+0x510>)
 800a59a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a59c:	4b40      	ldr	r3, [pc, #256]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a5a2:	4b3f      	ldr	r3, [pc, #252]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5a4:	789c      	ldrb	r4, [r3, #2]
 800a5a6:	4b3e      	ldr	r3, [pc, #248]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5a8:	785d      	ldrb	r5, [r3, #1]
 800a5aa:	4b3d      	ldr	r3, [pc, #244]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5ac:	791b      	ldrb	r3, [r3, #4]
 800a5ae:	4a3c      	ldr	r2, [pc, #240]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5b0:	7952      	ldrb	r2, [r2, #5]
 800a5b2:	493b      	ldr	r1, [pc, #236]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5b4:	78c9      	ldrb	r1, [r1, #3]
 800a5b6:	483a      	ldr	r0, [pc, #232]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a5b8:	6880      	ldr	r0, [r0, #8]
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	9604      	str	r6, [sp, #16]
 800a5be:	9003      	str	r0, [sp, #12]
 800a5c0:	9102      	str	r1, [sp, #8]
 800a5c2:	9201      	str	r2, [sp, #4]
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7fc fdeb 	bl	80071a8 <aci_gap_set_authentication_requirement>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00f      	beq.n	800a5fc <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800a5dc:	482a      	ldr	r0, [pc, #168]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a5de:	f7fe fc91 	bl	8008f04 <DbgTraceGetFileName>
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	f240 33ca 	movw	r3, #970	; 0x3ca
 800a5e8:	4a28      	ldr	r2, [pc, #160]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a5ea:	4829      	ldr	r0, [pc, #164]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a5ec:	f001 fc8e 	bl	800bf0c <iprintf>
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	482e      	ldr	r0, [pc, #184]	; (800a6b0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800a5f6:	f001 fc89 	bl	800bf0c <iprintf>
 800a5fa:	e00c      	b.n	800a616 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800a5fc:	4822      	ldr	r0, [pc, #136]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a5fe:	f7fe fc81 	bl	8008f04 <DbgTraceGetFileName>
 800a602:	4601      	mov	r1, r0
 800a604:	f240 33ce 	movw	r3, #974	; 0x3ce
 800a608:	4a20      	ldr	r2, [pc, #128]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a60a:	4821      	ldr	r0, [pc, #132]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a60c:	f001 fc7e 	bl	800bf0c <iprintf>
 800a610:	4828      	ldr	r0, [pc, #160]	; (800a6b4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800a612:	f001 fce9 	bl	800bfe8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a616:	4b22      	ldr	r3, [pc, #136]	; (800a6a0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800a618:	789b      	ldrb	r3, [r3, #2]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d023      	beq.n	800a666 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800a61e:	f7fd f80d 	bl	800763c <aci_gap_configure_filter_accept_list>
 800a622:	4603      	mov	r3, r0
 800a624:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800a626:	7dfb      	ldrb	r3, [r7, #23]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00f      	beq.n	800a64c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800a62c:	4816      	ldr	r0, [pc, #88]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a62e:	f7fe fc69 	bl	8008f04 <DbgTraceGetFileName>
 800a632:	4601      	mov	r1, r0
 800a634:	f240 33d9 	movw	r3, #985	; 0x3d9
 800a638:	4a14      	ldr	r2, [pc, #80]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a63a:	4815      	ldr	r0, [pc, #84]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a63c:	f001 fc66 	bl	800bf0c <iprintf>
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	4619      	mov	r1, r3
 800a644:	481c      	ldr	r0, [pc, #112]	; (800a6b8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800a646:	f001 fc61 	bl	800bf0c <iprintf>
 800a64a:	e00c      	b.n	800a666 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800a64c:	480e      	ldr	r0, [pc, #56]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a64e:	f7fe fc59 	bl	8008f04 <DbgTraceGetFileName>
 800a652:	4601      	mov	r1, r0
 800a654:	f240 33dd 	movw	r3, #989	; 0x3dd
 800a658:	4a0c      	ldr	r2, [pc, #48]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a65a:	480d      	ldr	r0, [pc, #52]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a65c:	f001 fc56 	bl	800bf0c <iprintf>
 800a660:	4816      	ldr	r0, [pc, #88]	; (800a6bc <Ble_Hci_Gap_Gatt_Init+0x520>)
 800a662:	f001 fcc1 	bl	800bfe8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800a666:	4808      	ldr	r0, [pc, #32]	; (800a688 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800a668:	f7fe fc4c 	bl	8008f04 <DbgTraceGetFileName>
 800a66c:	4601      	mov	r1, r0
 800a66e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800a672:	4a06      	ldr	r2, [pc, #24]	; (800a68c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800a674:	4806      	ldr	r0, [pc, #24]	; (800a690 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800a676:	f001 fc49 	bl	800bf0c <iprintf>
 800a67a:	4811      	ldr	r0, [pc, #68]	; (800a6c0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800a67c:	f001 fc46 	bl	800bf0c <iprintf>
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a688:	0800d158 	.word	0x0800d158
 800a68c:	0800e780 	.word	0x0800e780
 800a690:	0800d174 	.word	0x0800d174
 800a694:	0800da40 	.word	0x0800da40
 800a698:	0800da60 	.word	0x0800da60
 800a69c:	0800da9c 	.word	0x0800da9c
 800a6a0:	20001394 	.word	0x20001394
 800a6a4:	0800dac8 	.word	0x0800dac8
 800a6a8:	0800db08 	.word	0x0800db08
 800a6ac:	0001b207 	.word	0x0001b207
 800a6b0:	0800db38 	.word	0x0800db38
 800a6b4:	0800db84 	.word	0x0800db84
 800a6b8:	0800dbc0 	.word	0x0800dbc0
 800a6bc:	0800dc00 	.word	0x0800dc00
 800a6c0:	0800dc30 	.word	0x0800dc30

0800a6c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08c      	sub	sp, #48	; 0x30
 800a6c8:	af08      	add	r7, sp, #32
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a6ce:	2392      	movs	r3, #146	; 0x92
 800a6d0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800a6d2:	4a32      	ldr	r2, [pc, #200]	; (800a79c <Adv_Request+0xd8>)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9306      	str	r3, [sp, #24]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9305      	str	r3, [sp, #20]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9304      	str	r3, [sp, #16]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	22a0      	movs	r2, #160	; 0xa0
 800a6fa:	2180      	movs	r1, #128	; 0x80
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f7fc fc05 	bl	8006f0c <aci_gap_set_discoverable>
 800a702:	4603      	mov	r3, r0
 800a704:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800a706:	7bfb      	ldrb	r3, [r7, #15]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00f      	beq.n	800a72c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800a70c:	4824      	ldr	r0, [pc, #144]	; (800a7a0 <Adv_Request+0xdc>)
 800a70e:	f7fe fbf9 	bl	8008f04 <DbgTraceGetFileName>
 800a712:	4601      	mov	r1, r0
 800a714:	f240 33f6 	movw	r3, #1014	; 0x3f6
 800a718:	4a22      	ldr	r2, [pc, #136]	; (800a7a4 <Adv_Request+0xe0>)
 800a71a:	4823      	ldr	r0, [pc, #140]	; (800a7a8 <Adv_Request+0xe4>)
 800a71c:	f001 fbf6 	bl	800bf0c <iprintf>
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	4619      	mov	r1, r3
 800a724:	4821      	ldr	r0, [pc, #132]	; (800a7ac <Adv_Request+0xe8>)
 800a726:	f001 fbf1 	bl	800bf0c <iprintf>
 800a72a:	e00c      	b.n	800a746 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800a72c:	481c      	ldr	r0, [pc, #112]	; (800a7a0 <Adv_Request+0xdc>)
 800a72e:	f7fe fbe9 	bl	8008f04 <DbgTraceGetFileName>
 800a732:	4601      	mov	r1, r0
 800a734:	f240 33fa 	movw	r3, #1018	; 0x3fa
 800a738:	4a1a      	ldr	r2, [pc, #104]	; (800a7a4 <Adv_Request+0xe0>)
 800a73a:	481b      	ldr	r0, [pc, #108]	; (800a7a8 <Adv_Request+0xe4>)
 800a73c:	f001 fbe6 	bl	800bf0c <iprintf>
 800a740:	481b      	ldr	r0, [pc, #108]	; (800a7b0 <Adv_Request+0xec>)
 800a742:	f001 fc51 	bl	800bfe8 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800a746:	491b      	ldr	r1, [pc, #108]	; (800a7b4 <Adv_Request+0xf0>)
 800a748:	2013      	movs	r0, #19
 800a74a:	f7fc ff05 	bl	8007558 <aci_gap_update_adv_data>
 800a74e:	4603      	mov	r3, r0
 800a750:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800a758:	4811      	ldr	r0, [pc, #68]	; (800a7a0 <Adv_Request+0xdc>)
 800a75a:	f7fe fbd3 	bl	8008f04 <DbgTraceGetFileName>
 800a75e:	4601      	mov	r1, r0
 800a760:	f240 4305 	movw	r3, #1029	; 0x405
 800a764:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <Adv_Request+0xe0>)
 800a766:	4810      	ldr	r0, [pc, #64]	; (800a7a8 <Adv_Request+0xe4>)
 800a768:	f001 fbd0 	bl	800bf0c <iprintf>
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
 800a76e:	4619      	mov	r1, r3
 800a770:	4811      	ldr	r0, [pc, #68]	; (800a7b8 <Adv_Request+0xf4>)
 800a772:	f001 fbcb 	bl	800bf0c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800a776:	e00d      	b.n	800a794 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800a778:	4809      	ldr	r0, [pc, #36]	; (800a7a0 <Adv_Request+0xdc>)
 800a77a:	f7fe fbc3 	bl	8008f04 <DbgTraceGetFileName>
 800a77e:	4601      	mov	r1, r0
 800a780:	f240 4309 	movw	r3, #1033	; 0x409
 800a784:	4a07      	ldr	r2, [pc, #28]	; (800a7a4 <Adv_Request+0xe0>)
 800a786:	4808      	ldr	r0, [pc, #32]	; (800a7a8 <Adv_Request+0xe4>)
 800a788:	f001 fbc0 	bl	800bf0c <iprintf>
 800a78c:	480b      	ldr	r0, [pc, #44]	; (800a7bc <Adv_Request+0xf8>)
 800a78e:	f001 fbbd 	bl	800bf0c <iprintf>
  return;
 800a792:	bf00      	nop
}
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20001394 	.word	0x20001394
 800a7a0:	0800d158 	.word	0x0800d158
 800a7a4:	0800e798 	.word	0x0800e798
 800a7a8:	0800d174 	.word	0x0800d174
 800a7ac:	0800dc5c 	.word	0x0800dc5c
 800a7b0:	0800dc94 	.word	0x0800dc94
 800a7b4:	20000014 	.word	0x20000014
 800a7b8:	0800dcbc 	.word	0x0800dcbc
 800a7bc:	0800dcf0 	.word	0x0800dcf0

0800a7c0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a7c6:	f7ff f963 	bl	8009a90 <LL_FLASH_GetUDN>
 800a7ca:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d2:	d023      	beq.n	800a81c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a7d4:	f7ff f974 	bl	8009ac0 <LL_FLASH_GetSTCompanyID>
 800a7d8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a7da:	f7ff f965 	bl	8009aa8 <LL_FLASH_GetDeviceID>
 800a7de:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	4b16      	ldr	r3, [pc, #88]	; (800a840 <BleGetBdAddress+0x80>)
 800a7e6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	0a1b      	lsrs	r3, r3, #8
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	4b14      	ldr	r3, [pc, #80]	; (800a840 <BleGetBdAddress+0x80>)
 800a7f0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	4b12      	ldr	r3, [pc, #72]	; (800a840 <BleGetBdAddress+0x80>)
 800a7f8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	4b10      	ldr	r3, [pc, #64]	; (800a840 <BleGetBdAddress+0x80>)
 800a800:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	0a1b      	lsrs	r3, r3, #8
 800a806:	b2da      	uxtb	r2, r3
 800a808:	4b0d      	ldr	r3, [pc, #52]	; (800a840 <BleGetBdAddress+0x80>)
 800a80a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	0c1b      	lsrs	r3, r3, #16
 800a810:	b2da      	uxtb	r2, r3
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <BleGetBdAddress+0x80>)
 800a814:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <BleGetBdAddress+0x80>)
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	e00b      	b.n	800a834 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800a81c:	2000      	movs	r0, #0
 800a81e:	f7fe fc4f 	bl	80090c0 <OTP_Read>
 800a822:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	617b      	str	r3, [r7, #20]
 800a82e:	e001      	b.n	800a834 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800a830:	4b04      	ldr	r3, [pc, #16]	; (800a844 <BleGetBdAddress+0x84>)
 800a832:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800a834:	697b      	ldr	r3, [r7, #20]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	2000138c 	.word	0x2000138c
 800a844:	0800e730 	.word	0x0800e730

0800a848 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800a84e:	4b1f      	ldr	r3, [pc, #124]	; (800a8cc <Adv_Cancel+0x84>)
 800a850:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a854:	2b05      	cmp	r3, #5
 800a856:	d035      	beq.n	800a8c4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a858:	2392      	movs	r3, #146	; 0x92
 800a85a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800a85c:	f7fc fb32 	bl	8006ec4 <aci_gap_set_non_discoverable>
 800a860:	4603      	mov	r3, r0
 800a862:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <Adv_Cancel+0x84>)
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00d      	beq.n	800a88e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800a872:	4817      	ldr	r0, [pc, #92]	; (800a8d0 <Adv_Cancel+0x88>)
 800a874:	f7fe fb46 	bl	8008f04 <DbgTraceGetFileName>
 800a878:	4601      	mov	r1, r0
 800a87a:	f240 4357 	movw	r3, #1111	; 0x457
 800a87e:	4a15      	ldr	r2, [pc, #84]	; (800a8d4 <Adv_Cancel+0x8c>)
 800a880:	4815      	ldr	r0, [pc, #84]	; (800a8d8 <Adv_Cancel+0x90>)
 800a882:	f001 fb43 	bl	800bf0c <iprintf>
 800a886:	4815      	ldr	r0, [pc, #84]	; (800a8dc <Adv_Cancel+0x94>)
 800a888:	f001 fb40 	bl	800bf0c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800a88c:	e01a      	b.n	800a8c4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800a88e:	4810      	ldr	r0, [pc, #64]	; (800a8d0 <Adv_Cancel+0x88>)
 800a890:	f7fe fb38 	bl	8008f04 <DbgTraceGetFileName>
 800a894:	4601      	mov	r1, r0
 800a896:	f240 435b 	movw	r3, #1115	; 0x45b
 800a89a:	4a0e      	ldr	r2, [pc, #56]	; (800a8d4 <Adv_Cancel+0x8c>)
 800a89c:	480e      	ldr	r0, [pc, #56]	; (800a8d8 <Adv_Cancel+0x90>)
 800a89e:	f001 fb35 	bl	800bf0c <iprintf>
 800a8a2:	480f      	ldr	r0, [pc, #60]	; (800a8e0 <Adv_Cancel+0x98>)
 800a8a4:	f001 fb32 	bl	800bf0c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800a8a8:	4809      	ldr	r0, [pc, #36]	; (800a8d0 <Adv_Cancel+0x88>)
 800a8aa:	f7fe fb2b 	bl	8008f04 <DbgTraceGetFileName>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	f240 435c 	movw	r3, #1116	; 0x45c
 800a8b4:	4a07      	ldr	r2, [pc, #28]	; (800a8d4 <Adv_Cancel+0x8c>)
 800a8b6:	4808      	ldr	r0, [pc, #32]	; (800a8d8 <Adv_Cancel+0x90>)
 800a8b8:	f001 fb28 	bl	800bf0c <iprintf>
 800a8bc:	4809      	ldr	r0, [pc, #36]	; (800a8e4 <Adv_Cancel+0x9c>)
 800a8be:	f001 fb25 	bl	800bf0c <iprintf>
  return;
 800a8c2:	bf00      	nop
 800a8c4:	bf00      	nop
}
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20001394 	.word	0x20001394
 800a8d0:	0800d158 	.word	0x0800d158
 800a8d4:	0800e7a4 	.word	0x0800e7a4
 800a8d8:	0800d174 	.word	0x0800d174
 800a8dc:	0800dd18 	.word	0x0800dd18
 800a8e0:	0800dd3c 	.word	0x0800dd3c
 800a8e4:	0800dd44 	.word	0x0800dd44

0800a8e8 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800a8ec:	f000 f972 	bl	800abd4 <P2PS_APP_SW1_Button_Action>
}
 800a8f0:	bf00      	nop
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	2002      	movs	r0, #2
 800a900:	f001 f922 	bl	800bb48 <UTIL_SEQ_SetTask>

  return;
 800a904:	bf00      	nop
}
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a914:	2001      	movs	r0, #1
 800a916:	f001 f983 	bl	800bc20 <UTIL_SEQ_SetEvt>

  return;
 800a91a:	bf00      	nop
}
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b082      	sub	sp, #8
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a92a:	2001      	movs	r0, #1
 800a92c:	f001 f998 	bl	800bc60 <UTIL_SEQ_WaitEvt>

  return;
 800a930:	bf00      	nop
}
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	3308      	adds	r3, #8
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fd fc78 	bl	8008240 <SVCCTL_UserEvtRx>
 800a950:	4603      	mov	r3, r0
 800a952:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800a960:	e003      	b.n	800a96a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	701a      	strb	r2, [r3, #0]
  return;
 800a968:	bf00      	nop
}
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <BLE_StatusNot+0x16>
 800a980:	2b01      	cmp	r3, #1
 800a982:	d006      	beq.n	800a992 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800a984:	e00b      	b.n	800a99e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a986:	2307      	movs	r3, #7
 800a988:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f001 f908 	bl	800bba0 <UTIL_SEQ_PauseTask>
      break;
 800a990:	e005      	b.n	800a99e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a992:	2307      	movs	r3, #7
 800a994:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f001 f922 	bl	800bbe0 <UTIL_SEQ_ResumeTask>
      break;
 800a99c:	bf00      	nop
  }

  return;
 800a99e:	bf00      	nop
}
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	d86b      	bhi.n	800aa90 <Custom_STM_App_Notification+0xe8>
 800a9b8:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <Custom_STM_App_Notification+0x18>)
 800a9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9be:	bf00      	nop
 800a9c0:	0800aa91 	.word	0x0800aa91
 800a9c4:	0800a9e1 	.word	0x0800a9e1
 800a9c8:	0800aa51 	.word	0x0800aa51
 800a9cc:	0800aa71 	.word	0x0800aa71
 800a9d0:	0800aa91 	.word	0x0800aa91
 800a9d4:	0800aa91 	.word	0x0800aa91
 800a9d8:	0800aa91 	.word	0x0800aa91
 800a9dc:	0800aa91 	.word	0x0800aa91
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 800a9e0:	482f      	ldr	r0, [pc, #188]	; (800aaa0 <Custom_STM_App_Notification+0xf8>)
 800a9e2:	f7fe fa8f 	bl	8008f04 <DbgTraceGetFileName>
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	2372      	movs	r3, #114	; 0x72
 800a9ea:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <Custom_STM_App_Notification+0xfc>)
 800a9ec:	482e      	ldr	r0, [pc, #184]	; (800aaa8 <Custom_STM_App_Notification+0x100>)
 800a9ee:	f001 fa8d 	bl	800bf0c <iprintf>
 800a9f2:	482e      	ldr	r0, [pc, #184]	; (800aaac <Custom_STM_App_Notification+0x104>)
 800a9f4:	f001 faf8 	bl	800bfe8 <puts>
	  APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800a9f8:	4829      	ldr	r0, [pc, #164]	; (800aaa0 <Custom_STM_App_Notification+0xf8>)
 800a9fa:	f7fe fa83 	bl	8008f04 <DbgTraceGetFileName>
 800a9fe:	4601      	mov	r1, r0
 800aa00:	2373      	movs	r3, #115	; 0x73
 800aa02:	4a28      	ldr	r2, [pc, #160]	; (800aaa4 <Custom_STM_App_Notification+0xfc>)
 800aa04:	4828      	ldr	r0, [pc, #160]	; (800aaa8 <Custom_STM_App_Notification+0x100>)
 800aa06:	f001 fa81 	bl	800bf0c <iprintf>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	4619      	mov	r1, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	3301      	adds	r3, #1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	4824      	ldr	r0, [pc, #144]	; (800aab0 <Custom_STM_App_Notification+0x108>)
 800aa1e:	f001 fa75 	bl	800bf0c <iprintf>
	  if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	3301      	adds	r3, #1
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d104      	bne.n	800aa38 <Custom_STM_App_Notification+0x90>
	  {
		  HAL_GPIO_WritePin(Blue_Led_GPIO_Port,Blue_Led_Pin,GPIO_PIN_SET);
 800aa2e:	2201      	movs	r2, #1
 800aa30:	2120      	movs	r1, #32
 800aa32:	4820      	ldr	r0, [pc, #128]	; (800aab4 <Custom_STM_App_Notification+0x10c>)
 800aa34:	f7f8 ff22 	bl	800387c <HAL_GPIO_WritePin>
	  }
	  if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d127      	bne.n	800aa94 <Custom_STM_App_Notification+0xec>
	  {
		  HAL_GPIO_WritePin(Blue_Led_GPIO_Port,Blue_Led_Pin,GPIO_PIN_RESET);
 800aa44:	2200      	movs	r2, #0
 800aa46:	2120      	movs	r1, #32
 800aa48:	481a      	ldr	r0, [pc, #104]	; (800aab4 <Custom_STM_App_Notification+0x10c>)
 800aa4a:	f7f8 ff17 	bl	800387c <HAL_GPIO_WritePin>
	  }
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 800aa4e:	e021      	b.n	800aa94 <Custom_STM_App_Notification+0xec>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
	  APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 800aa50:	4813      	ldr	r0, [pc, #76]	; (800aaa0 <Custom_STM_App_Notification+0xf8>)
 800aa52:	f7fe fa57 	bl	8008f04 <DbgTraceGetFileName>
 800aa56:	4601      	mov	r1, r0
 800aa58:	2381      	movs	r3, #129	; 0x81
 800aa5a:	4a12      	ldr	r2, [pc, #72]	; (800aaa4 <Custom_STM_App_Notification+0xfc>)
 800aa5c:	4812      	ldr	r0, [pc, #72]	; (800aaa8 <Custom_STM_App_Notification+0x100>)
 800aa5e:	f001 fa55 	bl	800bf0c <iprintf>
 800aa62:	4815      	ldr	r0, [pc, #84]	; (800aab8 <Custom_STM_App_Notification+0x110>)
 800aa64:	f001 fac0 	bl	800bfe8 <puts>
      Custom_App_Context.Switch_c_Notification_Status = 1;
 800aa68:	4b14      	ldr	r3, [pc, #80]	; (800aabc <Custom_STM_App_Notification+0x114>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 800aa6e:	e012      	b.n	800aa96 <Custom_STM_App_Notification+0xee>

    case CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 800aa70:	480b      	ldr	r0, [pc, #44]	; (800aaa0 <Custom_STM_App_Notification+0xf8>)
 800aa72:	f7fe fa47 	bl	8008f04 <DbgTraceGetFileName>
 800aa76:	4601      	mov	r1, r0
 800aa78:	2388      	movs	r3, #136	; 0x88
 800aa7a:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <Custom_STM_App_Notification+0xfc>)
 800aa7c:	480a      	ldr	r0, [pc, #40]	; (800aaa8 <Custom_STM_App_Notification+0x100>)
 800aa7e:	f001 fa45 	bl	800bf0c <iprintf>
 800aa82:	480f      	ldr	r0, [pc, #60]	; (800aac0 <Custom_STM_App_Notification+0x118>)
 800aa84:	f001 fab0 	bl	800bfe8 <puts>
      Custom_App_Context.Switch_c_Notification_Status = 0;
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <Custom_STM_App_Notification+0x114>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT */
      break;
 800aa8e:	e002      	b.n	800aa96 <Custom_STM_App_Notification+0xee>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <Custom_STM_App_Notification+0xee>
      break;
 800aa94:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800aa96:	bf00      	nop
}
 800aa98:	3708      	adds	r7, #8
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800dd60 	.word	0x0800dd60
 800aaa4:	0800e7b0 	.word	0x0800e7b0
 800aaa8:	0800dd80 	.word	0x0800dd80
 800aaac:	0800dd94 	.word	0x0800dd94
 800aab0:	0800ddc0 	.word	0x0800ddc0
 800aab4:	48000400 	.word	0x48000400
 800aab8:	0800dde0 	.word	0x0800dde0
 800aabc:	2000141c 	.word	0x2000141c
 800aac0:	0800de10 	.word	0x0800de10

0800aac4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <Custom_APP_Notification+0x16>
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d002      	beq.n	800aade <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800aad8:	e002      	b.n	800aae0 <Custom_APP_Notification+0x1c>
      break;
 800aada:	bf00      	nop
 800aadc:	e000      	b.n	800aae0 <Custom_APP_Notification+0x1c>
      break;
 800aade:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800aae0:	bf00      	nop
}
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 800aaf0:	4a06      	ldr	r2, [pc, #24]	; (800ab0c <Custom_APP_Init+0x20>)
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2004      	movs	r0, #4
 800aaf6:	f001 f805 	bl	800bb04 <UTIL_SEQ_RegTask>
  Custom_App_Context.Switch_c_Notification_Status = 0;
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <Custom_APP_Init+0x24>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	701a      	strb	r2, [r3, #0]
  Custom_App_Context.SW1_Status = 0;
 800ab00:	4b03      	ldr	r3, [pc, #12]	; (800ab10 <Custom_APP_Init+0x24>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	709a      	strb	r2, [r3, #2]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800ab06:	bf00      	nop
}
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	0800ab15 	.word	0x0800ab15
 800ab10:	2000141c 	.word	0x2000141c

0800ab14 <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_c_NS_1*/
  if(Custom_App_Context.Switch_c_Notification_Status)
 800ab18:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <Custom_Switch_c_Send_Notification+0xa0>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d039      	beq.n	800ab94 <Custom_Switch_c_Send_Notification+0x80>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800ab20:	4925      	ldr	r1, [pc, #148]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab22:	2001      	movs	r0, #1
 800ab24:	f000 fb36 	bl	800b194 <Custom_STM_App_Update_Char>
  /* USER CODE END Switch_c_NS_1*/

  /* USER CODE BEGIN Switch_c_NS_Last*/
  if (Custom_App_Context.SW1_Status == 0)
 800ab28:	4b22      	ldr	r3, [pc, #136]	; (800abb4 <Custom_Switch_c_Send_Notification+0xa0>)
 800ab2a:	789b      	ldrb	r3, [r3, #2]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d109      	bne.n	800ab44 <Custom_Switch_c_Send_Notification+0x30>
     {
       Custom_App_Context.SW1_Status = 1;
 800ab30:	4b20      	ldr	r3, [pc, #128]	; (800abb4 <Custom_Switch_c_Send_Notification+0xa0>)
 800ab32:	2201      	movs	r2, #1
 800ab34:	709a      	strb	r2, [r3, #2]
       NotifyCharData[0] = 0x00;
 800ab36:	4b20      	ldr	r3, [pc, #128]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	701a      	strb	r2, [r3, #0]
       NotifyCharData[1] = 0x01;
 800ab3c:	4b1e      	ldr	r3, [pc, #120]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab3e:	2201      	movs	r2, #1
 800ab40:	705a      	strb	r2, [r3, #1]
 800ab42:	e008      	b.n	800ab56 <Custom_Switch_c_Send_Notification+0x42>
     }
     else
     {
       Custom_App_Context.SW1_Status = 0;
 800ab44:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <Custom_Switch_c_Send_Notification+0xa0>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	709a      	strb	r2, [r3, #2]
       NotifyCharData[0] = 0x00;
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
       NotifyCharData[1] = 0x00;
 800ab50:	4b19      	ldr	r3, [pc, #100]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	705a      	strb	r2, [r3, #1]
     }
     APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n");
 800ab56:	4819      	ldr	r0, [pc, #100]	; (800abbc <Custom_Switch_c_Send_Notification+0xa8>)
 800ab58:	f7fe f9d4 	bl	8008f04 <DbgTraceGetFileName>
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	f44f 738a 	mov.w	r3, #276	; 0x114
 800ab62:	4a17      	ldr	r2, [pc, #92]	; (800abc0 <Custom_Switch_c_Send_Notification+0xac>)
 800ab64:	4817      	ldr	r0, [pc, #92]	; (800abc4 <Custom_Switch_c_Send_Notification+0xb0>)
 800ab66:	f001 f9d1 	bl	800bf0c <iprintf>
 800ab6a:	4817      	ldr	r0, [pc, #92]	; (800abc8 <Custom_Switch_c_Send_Notification+0xb4>)
 800ab6c:	f001 fa3c 	bl	800bfe8 <puts>
     APP_DBG_MSG(" \n\r");
 800ab70:	4812      	ldr	r0, [pc, #72]	; (800abbc <Custom_Switch_c_Send_Notification+0xa8>)
 800ab72:	f7fe f9c7 	bl	8008f04 <DbgTraceGetFileName>
 800ab76:	4601      	mov	r1, r0
 800ab78:	f240 1315 	movw	r3, #277	; 0x115
 800ab7c:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <Custom_Switch_c_Send_Notification+0xac>)
 800ab7e:	4811      	ldr	r0, [pc, #68]	; (800abc4 <Custom_Switch_c_Send_Notification+0xb0>)
 800ab80:	f001 f9c4 	bl	800bf0c <iprintf>
 800ab84:	4811      	ldr	r0, [pc, #68]	; (800abcc <Custom_Switch_c_Send_Notification+0xb8>)
 800ab86:	f001 f9c1 	bl	800bf0c <iprintf>
     Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 800ab8a:	490b      	ldr	r1, [pc, #44]	; (800abb8 <Custom_Switch_c_Send_Notification+0xa4>)
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f000 fb01 	bl	800b194 <Custom_STM_App_Update_Char>
    } else {
        APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
    }
  /* USER CODE END Switch_c_NS_Last*/

  return;
 800ab92:	e00d      	b.n	800abb0 <Custom_Switch_c_Send_Notification+0x9c>
        APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800ab94:	4809      	ldr	r0, [pc, #36]	; (800abbc <Custom_Switch_c_Send_Notification+0xa8>)
 800ab96:	f7fe f9b5 	bl	8008f04 <DbgTraceGetFileName>
 800ab9a:	4601      	mov	r1, r0
 800ab9c:	f240 1319 	movw	r3, #281	; 0x119
 800aba0:	4a07      	ldr	r2, [pc, #28]	; (800abc0 <Custom_Switch_c_Send_Notification+0xac>)
 800aba2:	4808      	ldr	r0, [pc, #32]	; (800abc4 <Custom_Switch_c_Send_Notification+0xb0>)
 800aba4:	f001 f9b2 	bl	800bf0c <iprintf>
 800aba8:	4809      	ldr	r0, [pc, #36]	; (800abd0 <Custom_Switch_c_Send_Notification+0xbc>)
 800abaa:	f001 fa1d 	bl	800bfe8 <puts>
  return;
 800abae:	bf00      	nop
}
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	2000141c 	.word	0x2000141c
 800abb8:	20001424 	.word	0x20001424
 800abbc:	0800dd60 	.word	0x0800dd60
 800abc0:	0800e7cc 	.word	0x0800e7cc
 800abc4:	0800dd80 	.word	0x0800dd80
 800abc8:	0800de40 	.word	0x0800de40
 800abcc:	0800de80 	.word	0x0800de80
 800abd0:	0800de84 	.word	0x0800de84

0800abd4 <P2PS_APP_SW1_Button_Action>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800abd8:	2100      	movs	r1, #0
 800abda:	2004      	movs	r0, #4
 800abdc:	f000 ffb4 	bl	800bb48 <UTIL_SEQ_SetTask>
	return;
 800abe0:	bf00      	nop
}
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08c      	sub	sp, #48	; 0x30
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800abec:	2300      	movs	r3, #0
 800abee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3301      	adds	r3, #1
 800abf6:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (event_pckt->evt)
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2bff      	cmp	r3, #255	; 0xff
 800abfe:	f040 8097 	bne.w	800ad30 <Custom_STM_Event_Handler+0x14c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	3302      	adds	r3, #2
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f640 4214 	movw	r2, #3092	; 0xc14
 800ac12:	4293      	cmp	r3, r2
 800ac14:	f000 8084 	beq.w	800ad20 <Custom_STM_Event_Handler+0x13c>
 800ac18:	f640 4214 	movw	r2, #3092	; 0xc14
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	f300 8081 	bgt.w	800ad24 <Custom_STM_Event_Handler+0x140>
 800ac22:	f640 4201 	movw	r2, #3073	; 0xc01
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <Custom_STM_Event_Handler+0x50>
 800ac2a:	f640 4213 	movw	r2, #3091	; 0xc13
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d066      	beq.n	800ad00 <Custom_STM_Event_Handler+0x11c>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ac32:	e077      	b.n	800ad24 <Custom_STM_Event_Handler+0x140>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	3302      	adds	r3, #2
 800ac38:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b3f      	ldr	r3, [pc, #252]	; (800ad40 <Custom_STM_Event_Handler+0x15c>)
 800ac44:	889b      	ldrh	r3, [r3, #4]
 800ac46:	3302      	adds	r3, #2
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d119      	bne.n	800ac80 <Custom_STM_Event_Handler+0x9c>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            switch (attribute_modified->Attr_Data[0])
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	7a1b      	ldrb	r3, [r3, #8]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <Custom_STM_Event_Handler+0x7c>
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d008      	beq.n	800ac70 <Custom_STM_Event_Handler+0x8c>
              break;
 800ac5e:	e04e      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800ac64:	f107 030c 	add.w	r3, r7, #12
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff fe9d 	bl	800a9a8 <Custom_STM_App_Notification>
                break;
 800ac6e:	e046      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 800ac70:	2302      	movs	r3, #2
 800ac72:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800ac74:	f107 030c 	add.w	r3, r7, #12
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fe95 	bl	800a9a8 <Custom_STM_App_Notification>
                break;
 800ac7e:	e03e      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	4b2d      	ldr	r3, [pc, #180]	; (800ad40 <Custom_STM_Event_Handler+0x15c>)
 800ac8a:	891b      	ldrh	r3, [r3, #8]
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d128      	bne.n	800ace4 <Custom_STM_Event_Handler+0x100>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ac92:	2301      	movs	r3, #1
 800ac94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	733b      	strb	r3, [r7, #12]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	88db      	ldrh	r3, [r3, #6]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	753b      	strb	r3, [r7, #20]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	3308      	adds	r3, #8
 800acaa:	613b      	str	r3, [r7, #16]
			Custom_STM_App_Notification(&Notification);
 800acac:	f107 030c 	add.w	r3, r7, #12
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fe79 	bl	800a9a8 <Custom_STM_App_Notification>
            switch (attribute_modified->Attr_Data[0])
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	7a1b      	ldrb	r3, [r3, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <Custom_STM_Event_Handler+0xe0>
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d008      	beq.n	800acd4 <Custom_STM_Event_Handler+0xf0>
              break;
 800acc2:	e01c      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 800acc4:	2305      	movs	r3, #5
 800acc6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800acc8:	f107 030c 	add.w	r3, r7, #12
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff fe6b 	bl	800a9a8 <Custom_STM_App_Notification>
                break;
 800acd2:	e014      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 800acd4:	2304      	movs	r3, #4
 800acd6:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 800acd8:	f107 030c 	add.w	r3, r7, #12
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fe63 	bl	800a9a8 <Custom_STM_App_Notification>
                break;
 800ace2:	e00c      	b.n	800acfe <Custom_STM_Event_Handler+0x11a>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	885b      	ldrh	r3, [r3, #2]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	461a      	mov	r2, r3
 800acec:	4b14      	ldr	r3, [pc, #80]	; (800ad40 <Custom_STM_Event_Handler+0x15c>)
 800acee:	885b      	ldrh	r3, [r3, #2]
 800acf0:	3301      	adds	r3, #1
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d118      	bne.n	800ad28 <Custom_STM_Event_Handler+0x144>
            return_value = SVCCTL_EvtAckFlowEnable;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800acfc:	e014      	b.n	800ad28 <Custom_STM_Event_Handler+0x144>
 800acfe:	e013      	b.n	800ad28 <Custom_STM_Event_Handler+0x144>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	3302      	adds	r3, #2
 800ad04:	623b      	str	r3, [r7, #32]
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ad06:	6a3b      	ldr	r3, [r7, #32]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <Custom_STM_Event_Handler+0x15c>)
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	3301      	adds	r3, #1
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d109      	bne.n	800ad2c <Custom_STM_Event_Handler+0x148>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 800ad1e:	e005      	b.n	800ad2c <Custom_STM_Event_Handler+0x148>
          break;
 800ad20:	bf00      	nop
 800ad22:	e006      	b.n	800ad32 <Custom_STM_Event_Handler+0x14e>
          break;
 800ad24:	bf00      	nop
 800ad26:	e004      	b.n	800ad32 <Custom_STM_Event_Handler+0x14e>
          break;
 800ad28:	bf00      	nop
 800ad2a:	e002      	b.n	800ad32 <Custom_STM_Event_Handler+0x14e>
          break;
 800ad2c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ad2e:	e000      	b.n	800ad32 <Custom_STM_Event_Handler+0x14e>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800ad30:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800ad32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}/* end Custom_STM_Event_Handler */
 800ad36:	4618      	mov	r0, r3
 800ad38:	3730      	adds	r7, #48	; 0x30
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	2000151c 	.word	0x2000151c

0800ad44 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08c      	sub	sp, #48	; 0x30
 800ad48:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ad4a:	2392      	movs	r3, #146	; 0x92
 800ad4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800ad4e:	48ac      	ldr	r0, [pc, #688]	; (800b000 <SVCCTL_InitCustomSvc+0x2bc>)
 800ad50:	f7fd fa5c 	bl	800820c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800ad54:	2306      	movs	r3, #6
 800ad56:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800ad58:	238f      	movs	r3, #143	; 0x8f
 800ad5a:	713b      	strb	r3, [r7, #4]
 800ad5c:	23e5      	movs	r3, #229	; 0xe5
 800ad5e:	717b      	strb	r3, [r7, #5]
 800ad60:	23b3      	movs	r3, #179	; 0xb3
 800ad62:	71bb      	strb	r3, [r7, #6]
 800ad64:	23d5      	movs	r3, #213	; 0xd5
 800ad66:	71fb      	strb	r3, [r7, #7]
 800ad68:	232e      	movs	r3, #46	; 0x2e
 800ad6a:	723b      	strb	r3, [r7, #8]
 800ad6c:	237f      	movs	r3, #127	; 0x7f
 800ad6e:	727b      	strb	r3, [r7, #9]
 800ad70:	234a      	movs	r3, #74	; 0x4a
 800ad72:	72bb      	strb	r3, [r7, #10]
 800ad74:	2398      	movs	r3, #152	; 0x98
 800ad76:	72fb      	strb	r3, [r7, #11]
 800ad78:	232a      	movs	r3, #42	; 0x2a
 800ad7a:	733b      	strb	r3, [r7, #12]
 800ad7c:	2348      	movs	r3, #72	; 0x48
 800ad7e:	737b      	strb	r3, [r7, #13]
 800ad80:	237a      	movs	r3, #122	; 0x7a
 800ad82:	73bb      	strb	r3, [r7, #14]
 800ad84:	23cc      	movs	r3, #204	; 0xcc
 800ad86:	73fb      	strb	r3, [r7, #15]
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	743b      	strb	r3, [r7, #16]
 800ad8c:	23fe      	movs	r3, #254	; 0xfe
 800ad8e:	747b      	strb	r3, [r7, #17]
 800ad90:	2300      	movs	r3, #0
 800ad92:	74bb      	strb	r3, [r7, #18]
 800ad94:	2300      	movs	r3, #0
 800ad96:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
 800ad9a:	1d39      	adds	r1, r7, #4
 800ad9c:	4a99      	ldr	r2, [pc, #612]	; (800b004 <SVCCTL_InitCustomSvc+0x2c0>)
 800ad9e:	9200      	str	r2, [sp, #0]
 800ada0:	2201      	movs	r2, #1
 800ada2:	2002      	movs	r0, #2
 800ada4:	f7fc fcfa 	bl	800779c <aci_gatt_add_service>
 800ada8:	4603      	mov	r3, r0
 800adaa:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00f      	beq.n	800add2 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 800adb2:	4895      	ldr	r0, [pc, #596]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800adb4:	f7fe f8a6 	bl	8008f04 <DbgTraceGetFileName>
 800adb8:	4601      	mov	r1, r0
 800adba:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800adbe:	4a93      	ldr	r2, [pc, #588]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800adc0:	4893      	ldr	r0, [pc, #588]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800adc2:	f001 f8a3 	bl	800bf0c <iprintf>
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	4619      	mov	r1, r3
 800adca:	4892      	ldr	r0, [pc, #584]	; (800b014 <SVCCTL_InitCustomSvc+0x2d0>)
 800adcc:	f001 f89e 	bl	800bf0c <iprintf>
 800add0:	e00c      	b.n	800adec <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 800add2:	488d      	ldr	r0, [pc, #564]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800add4:	f7fe f896 	bl	8008f04 <DbgTraceGetFileName>
 800add8:	4601      	mov	r1, r0
 800adda:	f44f 73bc 	mov.w	r3, #376	; 0x178
 800adde:	4a8b      	ldr	r2, [pc, #556]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800ade0:	488b      	ldr	r0, [pc, #556]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800ade2:	f001 f893 	bl	800bf0c <iprintf>
 800ade6:	488c      	ldr	r0, [pc, #560]	; (800b018 <SVCCTL_InitCustomSvc+0x2d4>)
 800ade8:	f001 f890 	bl	800bf0c <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800adec:	2319      	movs	r3, #25
 800adee:	713b      	strb	r3, [r7, #4]
 800adf0:	23ed      	movs	r3, #237	; 0xed
 800adf2:	717b      	strb	r3, [r7, #5]
 800adf4:	2382      	movs	r3, #130	; 0x82
 800adf6:	71bb      	strb	r3, [r7, #6]
 800adf8:	23ae      	movs	r3, #174	; 0xae
 800adfa:	71fb      	strb	r3, [r7, #7]
 800adfc:	23ed      	movs	r3, #237	; 0xed
 800adfe:	723b      	strb	r3, [r7, #8]
 800ae00:	2321      	movs	r3, #33	; 0x21
 800ae02:	727b      	strb	r3, [r7, #9]
 800ae04:	234c      	movs	r3, #76	; 0x4c
 800ae06:	72bb      	strb	r3, [r7, #10]
 800ae08:	239d      	movs	r3, #157	; 0x9d
 800ae0a:	72fb      	strb	r3, [r7, #11]
 800ae0c:	2341      	movs	r3, #65	; 0x41
 800ae0e:	733b      	strb	r3, [r7, #12]
 800ae10:	2345      	movs	r3, #69	; 0x45
 800ae12:	737b      	strb	r3, [r7, #13]
 800ae14:	2322      	movs	r3, #34	; 0x22
 800ae16:	73bb      	strb	r3, [r7, #14]
 800ae18:	238e      	movs	r3, #142	; 0x8e
 800ae1a:	73fb      	strb	r3, [r7, #15]
 800ae1c:	2341      	movs	r3, #65	; 0x41
 800ae1e:	743b      	strb	r3, [r7, #16]
 800ae20:	23fe      	movs	r3, #254	; 0xfe
 800ae22:	747b      	strb	r3, [r7, #17]
 800ae24:	2300      	movs	r3, #0
 800ae26:	74bb      	strb	r3, [r7, #18]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800ae2c:	4b75      	ldr	r3, [pc, #468]	; (800b004 <SVCCTL_InitCustomSvc+0x2c0>)
 800ae2e:	8818      	ldrh	r0, [r3, #0]
 800ae30:	4b7a      	ldr	r3, [pc, #488]	; (800b01c <SVCCTL_InitCustomSvc+0x2d8>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	1d3a      	adds	r2, r7, #4
 800ae38:	4979      	ldr	r1, [pc, #484]	; (800b020 <SVCCTL_InitCustomSvc+0x2dc>)
 800ae3a:	9105      	str	r1, [sp, #20]
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	9104      	str	r1, [sp, #16]
 800ae40:	2110      	movs	r1, #16
 800ae42:	9103      	str	r1, [sp, #12]
 800ae44:	2101      	movs	r1, #1
 800ae46:	9102      	str	r1, [sp, #8]
 800ae48:	2100      	movs	r1, #0
 800ae4a:	9101      	str	r1, [sp, #4]
 800ae4c:	2106      	movs	r1, #6
 800ae4e:	9100      	str	r1, [sp, #0]
 800ae50:	2102      	movs	r1, #2
 800ae52:	f7fc fd79 	bl	8007948 <aci_gatt_add_char>
 800ae56:	4603      	mov	r3, r0
 800ae58:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00f      	beq.n	800ae80 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800ae60:	4869      	ldr	r0, [pc, #420]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800ae62:	f7fe f84f 	bl	8008f04 <DbgTraceGetFileName>
 800ae66:	4601      	mov	r1, r0
 800ae68:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 800ae6c:	4a67      	ldr	r2, [pc, #412]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800ae6e:	4868      	ldr	r0, [pc, #416]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800ae70:	f001 f84c 	bl	800bf0c <iprintf>
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	4619      	mov	r1, r3
 800ae78:	486a      	ldr	r0, [pc, #424]	; (800b024 <SVCCTL_InitCustomSvc+0x2e0>)
 800ae7a:	f001 f847 	bl	800bf0c <iprintf>
 800ae7e:	e00c      	b.n	800ae9a <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800ae80:	4861      	ldr	r0, [pc, #388]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800ae82:	f7fe f83f 	bl	8008f04 <DbgTraceGetFileName>
 800ae86:	4601      	mov	r1, r0
 800ae88:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 800ae8c:	4a5f      	ldr	r2, [pc, #380]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800ae8e:	4860      	ldr	r0, [pc, #384]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800ae90:	f001 f83c 	bl	800bf0c <iprintf>
 800ae94:	4864      	ldr	r0, [pc, #400]	; (800b028 <SVCCTL_InitCustomSvc+0x2e4>)
 800ae96:	f001 f839 	bl	800bf0c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 800ae9a:	2319      	movs	r3, #25
 800ae9c:	713b      	strb	r3, [r7, #4]
 800ae9e:	23ed      	movs	r3, #237	; 0xed
 800aea0:	717b      	strb	r3, [r7, #5]
 800aea2:	2382      	movs	r3, #130	; 0x82
 800aea4:	71bb      	strb	r3, [r7, #6]
 800aea6:	23ae      	movs	r3, #174	; 0xae
 800aea8:	71fb      	strb	r3, [r7, #7]
 800aeaa:	23ed      	movs	r3, #237	; 0xed
 800aeac:	723b      	strb	r3, [r7, #8]
 800aeae:	2321      	movs	r3, #33	; 0x21
 800aeb0:	727b      	strb	r3, [r7, #9]
 800aeb2:	234c      	movs	r3, #76	; 0x4c
 800aeb4:	72bb      	strb	r3, [r7, #10]
 800aeb6:	239d      	movs	r3, #157	; 0x9d
 800aeb8:	72fb      	strb	r3, [r7, #11]
 800aeba:	2341      	movs	r3, #65	; 0x41
 800aebc:	733b      	strb	r3, [r7, #12]
 800aebe:	2345      	movs	r3, #69	; 0x45
 800aec0:	737b      	strb	r3, [r7, #13]
 800aec2:	2322      	movs	r3, #34	; 0x22
 800aec4:	73bb      	strb	r3, [r7, #14]
 800aec6:	238e      	movs	r3, #142	; 0x8e
 800aec8:	73fb      	strb	r3, [r7, #15]
 800aeca:	2342      	movs	r3, #66	; 0x42
 800aecc:	743b      	strb	r3, [r7, #16]
 800aece:	23fe      	movs	r3, #254	; 0xfe
 800aed0:	747b      	strb	r3, [r7, #17]
 800aed2:	2300      	movs	r3, #0
 800aed4:	74bb      	strb	r3, [r7, #18]
 800aed6:	2300      	movs	r3, #0
 800aed8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800aeda:	4b4a      	ldr	r3, [pc, #296]	; (800b004 <SVCCTL_InitCustomSvc+0x2c0>)
 800aedc:	8818      	ldrh	r0, [r3, #0]
 800aede:	4b53      	ldr	r3, [pc, #332]	; (800b02c <SVCCTL_InitCustomSvc+0x2e8>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	1d3a      	adds	r2, r7, #4
 800aee6:	4952      	ldr	r1, [pc, #328]	; (800b030 <SVCCTL_InitCustomSvc+0x2ec>)
 800aee8:	9105      	str	r1, [sp, #20]
 800aeea:	2101      	movs	r1, #1
 800aeec:	9104      	str	r1, [sp, #16]
 800aeee:	2110      	movs	r1, #16
 800aef0:	9103      	str	r1, [sp, #12]
 800aef2:	2101      	movs	r1, #1
 800aef4:	9102      	str	r1, [sp, #8]
 800aef6:	2100      	movs	r1, #0
 800aef8:	9101      	str	r1, [sp, #4]
 800aefa:	2110      	movs	r1, #16
 800aefc:	9100      	str	r1, [sp, #0]
 800aefe:	2102      	movs	r1, #2
 800af00:	f7fc fd22 	bl	8007948 <aci_gatt_add_char>
 800af04:	4603      	mov	r3, r0
 800af06:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800af08:	7dfb      	ldrb	r3, [r7, #23]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00f      	beq.n	800af2e <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 800af0e:	483e      	ldr	r0, [pc, #248]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800af10:	f7fd fff8 	bl	8008f04 <DbgTraceGetFileName>
 800af14:	4601      	mov	r1, r0
 800af16:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800af1a:	4a3c      	ldr	r2, [pc, #240]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800af1c:	483c      	ldr	r0, [pc, #240]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800af1e:	f000 fff5 	bl	800bf0c <iprintf>
 800af22:	7dfb      	ldrb	r3, [r7, #23]
 800af24:	4619      	mov	r1, r3
 800af26:	4843      	ldr	r0, [pc, #268]	; (800b034 <SVCCTL_InitCustomSvc+0x2f0>)
 800af28:	f000 fff0 	bl	800bf0c <iprintf>
 800af2c:	e00c      	b.n	800af48 <SVCCTL_InitCustomSvc+0x204>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 800af2e:	4836      	ldr	r0, [pc, #216]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800af30:	f7fd ffe8 	bl	8008f04 <DbgTraceGetFileName>
 800af34:	4601      	mov	r1, r0
 800af36:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800af3a:	4a34      	ldr	r2, [pc, #208]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800af3c:	4834      	ldr	r0, [pc, #208]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800af3e:	f000 ffe5 	bl	800bf0c <iprintf>
 800af42:	483d      	ldr	r0, [pc, #244]	; (800b038 <SVCCTL_InitCustomSvc+0x2f4>)
 800af44:	f000 ffe2 	bl	800bf0c <iprintf>
   *                              = 8
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 8;
 800af48:	2308      	movs	r3, #8
 800af4a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x180d;
 800af4c:	f641 030d 	movw	r3, #6157	; 0x180d
 800af50:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 800af52:	7dbb      	ldrb	r3, [r7, #22]
 800af54:	1d39      	adds	r1, r7, #4
 800af56:	4a39      	ldr	r2, [pc, #228]	; (800b03c <SVCCTL_InitCustomSvc+0x2f8>)
 800af58:	9200      	str	r2, [sp, #0]
 800af5a:	2201      	movs	r2, #1
 800af5c:	2001      	movs	r0, #1
 800af5e:	f7fc fc1d 	bl	800779c <aci_gatt_add_service>
 800af62:	4603      	mov	r3, r0
 800af64:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_HrsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00f      	beq.n	800af8c <SVCCTL_InitCustomSvc+0x248>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_HRS, error code: 0x%x \n\r", ret);
 800af6c:	4826      	ldr	r0, [pc, #152]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800af6e:	f7fd ffc9 	bl	8008f04 <DbgTraceGetFileName>
 800af72:	4601      	mov	r1, r0
 800af74:	f240 13cd 	movw	r3, #461	; 0x1cd
 800af78:	4a24      	ldr	r2, [pc, #144]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800af7a:	4825      	ldr	r0, [pc, #148]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800af7c:	f000 ffc6 	bl	800bf0c <iprintf>
 800af80:	7dfb      	ldrb	r3, [r7, #23]
 800af82:	4619      	mov	r1, r3
 800af84:	482e      	ldr	r0, [pc, #184]	; (800b040 <SVCCTL_InitCustomSvc+0x2fc>)
 800af86:	f000 ffc1 	bl	800bf0c <iprintf>
 800af8a:	e00c      	b.n	800afa6 <SVCCTL_InitCustomSvc+0x262>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_HRS \n\r");
 800af8c:	481e      	ldr	r0, [pc, #120]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800af8e:	f7fd ffb9 	bl	8008f04 <DbgTraceGetFileName>
 800af92:	4601      	mov	r1, r0
 800af94:	f240 13d1 	movw	r3, #465	; 0x1d1
 800af98:	4a1c      	ldr	r2, [pc, #112]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800af9a:	481d      	ldr	r0, [pc, #116]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800af9c:	f000 ffb6 	bl	800bf0c <iprintf>
 800afa0:	4828      	ldr	r0, [pc, #160]	; (800b044 <SVCCTL_InitCustomSvc+0x300>)
 800afa2:	f000 ffb3 	bl	800bf0c <iprintf>
  }

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 800afa6:	f642 2337 	movw	r3, #10807	; 0x2a37
 800afaa:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800afac:	4b15      	ldr	r3, [pc, #84]	; (800b004 <SVCCTL_InitCustomSvc+0x2c0>)
 800afae:	88d8      	ldrh	r0, [r3, #6]
 800afb0:	4b25      	ldr	r3, [pc, #148]	; (800b048 <SVCCTL_InitCustomSvc+0x304>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	1d3a      	adds	r2, r7, #4
 800afb8:	4924      	ldr	r1, [pc, #144]	; (800b04c <SVCCTL_InitCustomSvc+0x308>)
 800afba:	9105      	str	r1, [sp, #20]
 800afbc:	2101      	movs	r1, #1
 800afbe:	9104      	str	r1, [sp, #16]
 800afc0:	2110      	movs	r1, #16
 800afc2:	9103      	str	r1, [sp, #12]
 800afc4:	2100      	movs	r1, #0
 800afc6:	9102      	str	r1, [sp, #8]
 800afc8:	2100      	movs	r1, #0
 800afca:	9101      	str	r1, [sp, #4]
 800afcc:	2110      	movs	r1, #16
 800afce:	9100      	str	r1, [sp, #0]
 800afd0:	2101      	movs	r1, #1
 800afd2:	f7fc fcb9 	bl	8007948 <aci_gatt_add_char>
 800afd6:	4603      	mov	r3, r0
 800afd8:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomHrs_MHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800afda:	7dfb      	ldrb	r3, [r7, #23]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d039      	beq.n	800b054 <SVCCTL_InitCustomSvc+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_M, error code: 0x%x \n\r", ret);
 800afe0:	4809      	ldr	r0, [pc, #36]	; (800b008 <SVCCTL_InitCustomSvc+0x2c4>)
 800afe2:	f7fd ff8f 	bl	8008f04 <DbgTraceGetFileName>
 800afe6:	4601      	mov	r1, r0
 800afe8:	f240 13e3 	movw	r3, #483	; 0x1e3
 800afec:	4a07      	ldr	r2, [pc, #28]	; (800b00c <SVCCTL_InitCustomSvc+0x2c8>)
 800afee:	4808      	ldr	r0, [pc, #32]	; (800b010 <SVCCTL_InitCustomSvc+0x2cc>)
 800aff0:	f000 ff8c 	bl	800bf0c <iprintf>
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	4619      	mov	r1, r3
 800aff8:	4815      	ldr	r0, [pc, #84]	; (800b050 <SVCCTL_InitCustomSvc+0x30c>)
 800affa:	f000 ff87 	bl	800bf0c <iprintf>
 800affe:	e036      	b.n	800b06e <SVCCTL_InitCustomSvc+0x32a>
 800b000:	0800abe5 	.word	0x0800abe5
 800b004:	2000151c 	.word	0x2000151c
 800b008:	0800decc 	.word	0x0800decc
 800b00c:	0800e7f0 	.word	0x0800e7f0
 800b010:	0800deec 	.word	0x0800deec
 800b014:	0800df00 	.word	0x0800df00
 800b018:	0800df48 	.word	0x0800df48
 800b01c:	20000027 	.word	0x20000027
 800b020:	2000151e 	.word	0x2000151e
 800b024:	0800df7c 	.word	0x0800df7c
 800b028:	0800dfc0 	.word	0x0800dfc0
 800b02c:	20000028 	.word	0x20000028
 800b030:	20001520 	.word	0x20001520
 800b034:	0800dff4 	.word	0x0800dff4
 800b038:	0800e03c 	.word	0x0800e03c
 800b03c:	20001522 	.word	0x20001522
 800b040:	0800e074 	.word	0x0800e074
 800b044:	0800e0bc 	.word	0x0800e0bc
 800b048:	20000029 	.word	0x20000029
 800b04c:	20001524 	.word	0x20001524
 800b050:	0800e0f0 	.word	0x0800e0f0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_M \n\r");
 800b054:	4842      	ldr	r0, [pc, #264]	; (800b160 <SVCCTL_InitCustomSvc+0x41c>)
 800b056:	f7fd ff55 	bl	8008f04 <DbgTraceGetFileName>
 800b05a:	4601      	mov	r1, r0
 800b05c:	f240 13e7 	movw	r3, #487	; 0x1e7
 800b060:	4a40      	ldr	r2, [pc, #256]	; (800b164 <SVCCTL_InitCustomSvc+0x420>)
 800b062:	4841      	ldr	r0, [pc, #260]	; (800b168 <SVCCTL_InitCustomSvc+0x424>)
 800b064:	f000 ff52 	bl	800bf0c <iprintf>
 800b068:	4840      	ldr	r0, [pc, #256]	; (800b16c <SVCCTL_InitCustomSvc+0x428>)
 800b06a:	f000 ff4f 	bl	800bf0c <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 800b06e:	f642 2338 	movw	r3, #10808	; 0x2a38
 800b072:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800b074:	4b3e      	ldr	r3, [pc, #248]	; (800b170 <SVCCTL_InitCustomSvc+0x42c>)
 800b076:	88d8      	ldrh	r0, [r3, #6]
 800b078:	4b3e      	ldr	r3, [pc, #248]	; (800b174 <SVCCTL_InitCustomSvc+0x430>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	1d3a      	adds	r2, r7, #4
 800b080:	493d      	ldr	r1, [pc, #244]	; (800b178 <SVCCTL_InitCustomSvc+0x434>)
 800b082:	9105      	str	r1, [sp, #20]
 800b084:	2100      	movs	r1, #0
 800b086:	9104      	str	r1, [sp, #16]
 800b088:	2110      	movs	r1, #16
 800b08a:	9103      	str	r1, [sp, #12]
 800b08c:	2100      	movs	r1, #0
 800b08e:	9102      	str	r1, [sp, #8]
 800b090:	2100      	movs	r1, #0
 800b092:	9101      	str	r1, [sp, #4]
 800b094:	2102      	movs	r1, #2
 800b096:	9100      	str	r1, [sp, #0]
 800b098:	2101      	movs	r1, #1
 800b09a:	f7fc fc55 	bl	8007948 <aci_gatt_add_char>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_SlHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00f      	beq.n	800b0c8 <SVCCTL_InitCustomSvc+0x384>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_SL, error code: 0x%x \n\r", ret);
 800b0a8:	482d      	ldr	r0, [pc, #180]	; (800b160 <SVCCTL_InitCustomSvc+0x41c>)
 800b0aa:	f7fd ff2b 	bl	8008f04 <DbgTraceGetFileName>
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	f240 13fd 	movw	r3, #509	; 0x1fd
 800b0b4:	4a2b      	ldr	r2, [pc, #172]	; (800b164 <SVCCTL_InitCustomSvc+0x420>)
 800b0b6:	482c      	ldr	r0, [pc, #176]	; (800b168 <SVCCTL_InitCustomSvc+0x424>)
 800b0b8:	f000 ff28 	bl	800bf0c <iprintf>
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	482e      	ldr	r0, [pc, #184]	; (800b17c <SVCCTL_InitCustomSvc+0x438>)
 800b0c2:	f000 ff23 	bl	800bf0c <iprintf>
 800b0c6:	e00c      	b.n	800b0e2 <SVCCTL_InitCustomSvc+0x39e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_SL \n\r");
 800b0c8:	4825      	ldr	r0, [pc, #148]	; (800b160 <SVCCTL_InitCustomSvc+0x41c>)
 800b0ca:	f7fd ff1b 	bl	8008f04 <DbgTraceGetFileName>
 800b0ce:	4601      	mov	r1, r0
 800b0d0:	f240 2301 	movw	r3, #513	; 0x201
 800b0d4:	4a23      	ldr	r2, [pc, #140]	; (800b164 <SVCCTL_InitCustomSvc+0x420>)
 800b0d6:	4824      	ldr	r0, [pc, #144]	; (800b168 <SVCCTL_InitCustomSvc+0x424>)
 800b0d8:	f000 ff18 	bl	800bf0c <iprintf>
 800b0dc:	4828      	ldr	r0, [pc, #160]	; (800b180 <SVCCTL_InitCustomSvc+0x43c>)
 800b0de:	f000 ff15 	bl	800bf0c <iprintf>

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  My_HRS_CTRL_Point
   */
  uuid.Char_UUID_16 = 0x2a39;
 800b0e2:	f642 2339 	movw	r3, #10809	; 0x2a39
 800b0e6:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 800b0e8:	4b21      	ldr	r3, [pc, #132]	; (800b170 <SVCCTL_InitCustomSvc+0x42c>)
 800b0ea:	88d8      	ldrh	r0, [r3, #6]
 800b0ec:	4b25      	ldr	r3, [pc, #148]	; (800b184 <SVCCTL_InitCustomSvc+0x440>)
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	1d3a      	adds	r2, r7, #4
 800b0f4:	4924      	ldr	r1, [pc, #144]	; (800b188 <SVCCTL_InitCustomSvc+0x444>)
 800b0f6:	9105      	str	r1, [sp, #20]
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	9104      	str	r1, [sp, #16]
 800b0fc:	2110      	movs	r1, #16
 800b0fe:	9103      	str	r1, [sp, #12]
 800b100:	2102      	movs	r1, #2
 800b102:	9102      	str	r1, [sp, #8]
 800b104:	2100      	movs	r1, #0
 800b106:	9101      	str	r1, [sp, #4]
 800b108:	2108      	movs	r1, #8
 800b10a:	9100      	str	r1, [sp, #0]
 800b10c:	2101      	movs	r1, #1
 800b10e:	f7fc fc1b 	bl	8007948 <aci_gatt_add_char>
 800b112:	4603      	mov	r3, r0
 800b114:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomHrs_CtrlHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00f      	beq.n	800b13c <SVCCTL_InitCustomSvc+0x3f8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : HRS_CTRL, error code: 0x%x \n\r", ret);
 800b11c:	4810      	ldr	r0, [pc, #64]	; (800b160 <SVCCTL_InitCustomSvc+0x41c>)
 800b11e:	f7fd fef1 	bl	8008f04 <DbgTraceGetFileName>
 800b122:	4601      	mov	r1, r0
 800b124:	f240 2317 	movw	r3, #535	; 0x217
 800b128:	4a0e      	ldr	r2, [pc, #56]	; (800b164 <SVCCTL_InitCustomSvc+0x420>)
 800b12a:	480f      	ldr	r0, [pc, #60]	; (800b168 <SVCCTL_InitCustomSvc+0x424>)
 800b12c:	f000 feee 	bl	800bf0c <iprintf>
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	4619      	mov	r1, r3
 800b134:	4815      	ldr	r0, [pc, #84]	; (800b18c <SVCCTL_InitCustomSvc+0x448>)
 800b136:	f000 fee9 	bl	800bf0c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b13a:	e00d      	b.n	800b158 <SVCCTL_InitCustomSvc+0x414>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : HRS_CTRL \n\r");
 800b13c:	4808      	ldr	r0, [pc, #32]	; (800b160 <SVCCTL_InitCustomSvc+0x41c>)
 800b13e:	f7fd fee1 	bl	8008f04 <DbgTraceGetFileName>
 800b142:	4601      	mov	r1, r0
 800b144:	f240 231b 	movw	r3, #539	; 0x21b
 800b148:	4a06      	ldr	r2, [pc, #24]	; (800b164 <SVCCTL_InitCustomSvc+0x420>)
 800b14a:	4807      	ldr	r0, [pc, #28]	; (800b168 <SVCCTL_InitCustomSvc+0x424>)
 800b14c:	f000 fede 	bl	800bf0c <iprintf>
 800b150:	480f      	ldr	r0, [pc, #60]	; (800b190 <SVCCTL_InitCustomSvc+0x44c>)
 800b152:	f000 fedb 	bl	800bf0c <iprintf>
  return;
 800b156:	bf00      	nop
}
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	0800decc 	.word	0x0800decc
 800b164:	0800e7f0 	.word	0x0800e7f0
 800b168:	0800deec 	.word	0x0800deec
 800b16c:	0800e134 	.word	0x0800e134
 800b170:	2000151c 	.word	0x2000151c
 800b174:	2000002a 	.word	0x2000002a
 800b178:	20001526 	.word	0x20001526
 800b17c:	0800e168 	.word	0x0800e168
 800b180:	0800e1b0 	.word	0x0800e1b0
 800b184:	2000002b 	.word	0x2000002b
 800b188:	20001528 	.word	0x20001528
 800b18c:	0800e1e4 	.word	0x0800e1e4
 800b190:	0800e22c 	.word	0x0800e22c

0800b194 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af02      	add	r7, sp, #8
 800b19a:	4603      	mov	r3, r0
 800b19c:	6039      	str	r1, [r7, #0]
 800b19e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b1a0:	2392      	movs	r3, #146	; 0x92
 800b1a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800b1a4:	79fb      	ldrb	r3, [r7, #7]
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	f200 80f9 	bhi.w	800b39e <Custom_STM_App_Update_Char+0x20a>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <Custom_STM_App_Update_Char+0x20>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b1c9 	.word	0x0800b1c9
 800b1b8:	0800b227 	.word	0x0800b227
 800b1bc:	0800b285 	.word	0x0800b285
 800b1c0:	0800b2e3 	.word	0x0800b2e3
 800b1c4:	0800b341 	.word	0x0800b341
  {

    case CUSTOM_STM_LED_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 800b1c8:	4b78      	ldr	r3, [pc, #480]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b1ca:	8818      	ldrh	r0, [r3, #0]
 800b1cc:	4b77      	ldr	r3, [pc, #476]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b1ce:	8859      	ldrh	r1, [r3, #2]
 800b1d0:	4b77      	ldr	r3, [pc, #476]	; (800b3b0 <Custom_STM_App_Update_Char+0x21c>)
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f7fc fcbc 	bl	8007b58 <aci_gatt_update_char_value>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomLed_CHdle,
                                       0, /* charValOffset */
                                       SizeLed_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b1e4:	7bfb      	ldrb	r3, [r7, #15]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00f      	beq.n	800b20a <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value LED_C command, result : 0x%x \n\r", ret);
 800b1ea:	4872      	ldr	r0, [pc, #456]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b1ec:	f7fd fe8a 	bl	8008f04 <DbgTraceGetFileName>
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	f240 2342 	movw	r3, #578	; 0x242
 800b1f6:	4a70      	ldr	r2, [pc, #448]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b1f8:	4870      	ldr	r0, [pc, #448]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b1fa:	f000 fe87 	bl	800bf0c <iprintf>
 800b1fe:	7bfb      	ldrb	r3, [r7, #15]
 800b200:	4619      	mov	r1, r3
 800b202:	486f      	ldr	r0, [pc, #444]	; (800b3c0 <Custom_STM_App_Update_Char+0x22c>)
 800b204:	f000 fe82 	bl	800bf0c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800b208:	e0ca      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
 800b20a:	486a      	ldr	r0, [pc, #424]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b20c:	f7fd fe7a 	bl	8008f04 <DbgTraceGetFileName>
 800b210:	4601      	mov	r1, r0
 800b212:	f240 2346 	movw	r3, #582	; 0x246
 800b216:	4a68      	ldr	r2, [pc, #416]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b218:	4868      	ldr	r0, [pc, #416]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b21a:	f000 fe77 	bl	800bf0c <iprintf>
 800b21e:	4869      	ldr	r0, [pc, #420]	; (800b3c4 <Custom_STM_App_Update_Char+0x230>)
 800b220:	f000 fe74 	bl	800bf0c <iprintf>
      break;
 800b224:	e0bc      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_SWITCH_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 800b226:	4b61      	ldr	r3, [pc, #388]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b228:	8818      	ldrh	r0, [r3, #0]
 800b22a:	4b60      	ldr	r3, [pc, #384]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b22c:	8899      	ldrh	r1, [r3, #4]
 800b22e:	4b66      	ldr	r3, [pc, #408]	; (800b3c8 <Custom_STM_App_Update_Char+0x234>)
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	9300      	str	r3, [sp, #0]
 800b236:	4613      	mov	r3, r2
 800b238:	2200      	movs	r2, #0
 800b23a:	f7fc fc8d 	bl	8007b58 <aci_gatt_update_char_value>
 800b23e:	4603      	mov	r3, r0
 800b240:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomSwitch_CHdle,
                                       0, /* charValOffset */
                                       SizeSwitch_C, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b242:	7bfb      	ldrb	r3, [r7, #15]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00f      	beq.n	800b268 <Custom_STM_App_Update_Char+0xd4>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value SWITCH_C command, result : 0x%x \n\r", ret);
 800b248:	485a      	ldr	r0, [pc, #360]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b24a:	f7fd fe5b 	bl	8008f04 <DbgTraceGetFileName>
 800b24e:	4601      	mov	r1, r0
 800b250:	f240 2355 	movw	r3, #597	; 0x255
 800b254:	4a58      	ldr	r2, [pc, #352]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b256:	4859      	ldr	r0, [pc, #356]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b258:	f000 fe58 	bl	800bf0c <iprintf>
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	4619      	mov	r1, r3
 800b260:	485a      	ldr	r0, [pc, #360]	; (800b3cc <Custom_STM_App_Update_Char+0x238>)
 800b262:	f000 fe53 	bl	800bf0c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800b266:	e09b      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
 800b268:	4852      	ldr	r0, [pc, #328]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b26a:	f7fd fe4b 	bl	8008f04 <DbgTraceGetFileName>
 800b26e:	4601      	mov	r1, r0
 800b270:	f240 2359 	movw	r3, #601	; 0x259
 800b274:	4a50      	ldr	r2, [pc, #320]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b276:	4851      	ldr	r0, [pc, #324]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b278:	f000 fe48 	bl	800bf0c <iprintf>
 800b27c:	4854      	ldr	r0, [pc, #336]	; (800b3d0 <Custom_STM_App_Update_Char+0x23c>)
 800b27e:	f000 fe45 	bl	800bf0c <iprintf>
      break;
 800b282:	e08d      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_M:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800b284:	4b49      	ldr	r3, [pc, #292]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b286:	88d8      	ldrh	r0, [r3, #6]
 800b288:	4b48      	ldr	r3, [pc, #288]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b28a:	8919      	ldrh	r1, [r3, #8]
 800b28c:	4b51      	ldr	r3, [pc, #324]	; (800b3d4 <Custom_STM_App_Update_Char+0x240>)
 800b28e:	781a      	ldrb	r2, [r3, #0]
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	4613      	mov	r3, r2
 800b296:	2200      	movs	r2, #0
 800b298:	f7fc fc5e 	bl	8007b58 <aci_gatt_update_char_value>
 800b29c:	4603      	mov	r3, r0
 800b29e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_MHdle,
                                       0, /* charValOffset */
                                       SizeHrs_M, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00f      	beq.n	800b2c6 <Custom_STM_App_Update_Char+0x132>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_M command, result : 0x%x \n\r", ret);
 800b2a6:	4843      	ldr	r0, [pc, #268]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b2a8:	f7fd fe2c 	bl	8008f04 <DbgTraceGetFileName>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	f44f 731a 	mov.w	r3, #616	; 0x268
 800b2b2:	4a41      	ldr	r2, [pc, #260]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b2b4:	4841      	ldr	r0, [pc, #260]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b2b6:	f000 fe29 	bl	800bf0c <iprintf>
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	4846      	ldr	r0, [pc, #280]	; (800b3d8 <Custom_STM_App_Update_Char+0x244>)
 800b2c0:	f000 fe24 	bl	800bf0c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800b2c4:	e06c      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
 800b2c6:	483b      	ldr	r0, [pc, #236]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b2c8:	f7fd fe1c 	bl	8008f04 <DbgTraceGetFileName>
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	f44f 731b 	mov.w	r3, #620	; 0x26c
 800b2d2:	4a39      	ldr	r2, [pc, #228]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b2d4:	4839      	ldr	r0, [pc, #228]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b2d6:	f000 fe19 	bl	800bf0c <iprintf>
 800b2da:	4840      	ldr	r0, [pc, #256]	; (800b3dc <Custom_STM_App_Update_Char+0x248>)
 800b2dc:	f000 fe16 	bl	800bf0c <iprintf>
      break;
 800b2e0:	e05e      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_SL:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800b2e2:	4b32      	ldr	r3, [pc, #200]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b2e4:	88d8      	ldrh	r0, [r3, #6]
 800b2e6:	4b31      	ldr	r3, [pc, #196]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b2e8:	8959      	ldrh	r1, [r3, #10]
 800b2ea:	4b3d      	ldr	r3, [pc, #244]	; (800b3e0 <Custom_STM_App_Update_Char+0x24c>)
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f7fc fc2f 	bl	8007b58 <aci_gatt_update_char_value>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_SlHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Sl, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00f      	beq.n	800b324 <Custom_STM_App_Update_Char+0x190>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_SL command, result : 0x%x \n\r", ret);
 800b304:	482b      	ldr	r0, [pc, #172]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b306:	f7fd fdfd 	bl	8008f04 <DbgTraceGetFileName>
 800b30a:	4601      	mov	r1, r0
 800b30c:	f240 237b 	movw	r3, #635	; 0x27b
 800b310:	4a29      	ldr	r2, [pc, #164]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b312:	482a      	ldr	r0, [pc, #168]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b314:	f000 fdfa 	bl	800bf0c <iprintf>
 800b318:	7bfb      	ldrb	r3, [r7, #15]
 800b31a:	4619      	mov	r1, r3
 800b31c:	4831      	ldr	r0, [pc, #196]	; (800b3e4 <Custom_STM_App_Update_Char+0x250>)
 800b31e:	f000 fdf5 	bl	800bf0c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 800b322:	e03d      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
 800b324:	4823      	ldr	r0, [pc, #140]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b326:	f7fd fded 	bl	8008f04 <DbgTraceGetFileName>
 800b32a:	4601      	mov	r1, r0
 800b32c:	f240 237f 	movw	r3, #639	; 0x27f
 800b330:	4a21      	ldr	r2, [pc, #132]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b332:	4822      	ldr	r0, [pc, #136]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b334:	f000 fdea 	bl	800bf0c <iprintf>
 800b338:	482b      	ldr	r0, [pc, #172]	; (800b3e8 <Custom_STM_App_Update_Char+0x254>)
 800b33a:	f000 fde7 	bl	800bf0c <iprintf>
      break;
 800b33e:	e02f      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>

    case CUSTOM_STM_HRS_CTRL:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800b340:	4b1a      	ldr	r3, [pc, #104]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b342:	88d8      	ldrh	r0, [r3, #6]
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <Custom_STM_App_Update_Char+0x218>)
 800b346:	8999      	ldrh	r1, [r3, #12]
 800b348:	4b28      	ldr	r3, [pc, #160]	; (800b3ec <Custom_STM_App_Update_Char+0x258>)
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4613      	mov	r3, r2
 800b352:	2200      	movs	r2, #0
 800b354:	f7fc fc00 	bl	8007b58 <aci_gatt_update_char_value>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomHrs_CtrlHdle,
                                       0, /* charValOffset */
                                       SizeHrs_Ctrl, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00f      	beq.n	800b382 <Custom_STM_App_Update_Char+0x1ee>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value HRS_CTRL command, result : 0x%x \n\r", ret);
 800b362:	4814      	ldr	r0, [pc, #80]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b364:	f7fd fdce 	bl	8008f04 <DbgTraceGetFileName>
 800b368:	4601      	mov	r1, r0
 800b36a:	f240 238e 	movw	r3, #654	; 0x28e
 800b36e:	4a12      	ldr	r2, [pc, #72]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b370:	4812      	ldr	r0, [pc, #72]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b372:	f000 fdcb 	bl	800bf0c <iprintf>
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	4619      	mov	r1, r3
 800b37a:	481d      	ldr	r0, [pc, #116]	; (800b3f0 <Custom_STM_App_Update_Char+0x25c>)
 800b37c:	f000 fdc6 	bl	800bf0c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800b380:	e00e      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRL command\n\r");
 800b382:	480c      	ldr	r0, [pc, #48]	; (800b3b4 <Custom_STM_App_Update_Char+0x220>)
 800b384:	f7fd fdbe 	bl	8008f04 <DbgTraceGetFileName>
 800b388:	4601      	mov	r1, r0
 800b38a:	f240 2392 	movw	r3, #658	; 0x292
 800b38e:	4a0a      	ldr	r2, [pc, #40]	; (800b3b8 <Custom_STM_App_Update_Char+0x224>)
 800b390:	480a      	ldr	r0, [pc, #40]	; (800b3bc <Custom_STM_App_Update_Char+0x228>)
 800b392:	f000 fdbb 	bl	800bf0c <iprintf>
 800b396:	4817      	ldr	r0, [pc, #92]	; (800b3f4 <Custom_STM_App_Update_Char+0x260>)
 800b398:	f000 fdb8 	bl	800bf0c <iprintf>
      break;
 800b39c:	e000      	b.n	800b3a0 <Custom_STM_App_Update_Char+0x20c>

    default:
      break;
 800b39e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	2000151c 	.word	0x2000151c
 800b3b0:	20000027 	.word	0x20000027
 800b3b4:	0800decc 	.word	0x0800decc
 800b3b8:	0800e808 	.word	0x0800e808
 800b3bc:	0800deec 	.word	0x0800deec
 800b3c0:	0800e264 	.word	0x0800e264
 800b3c4:	0800e2ac 	.word	0x0800e2ac
 800b3c8:	20000028 	.word	0x20000028
 800b3cc:	0800e2e4 	.word	0x0800e2e4
 800b3d0:	0800e330 	.word	0x0800e330
 800b3d4:	20000029 	.word	0x20000029
 800b3d8:	0800e36c 	.word	0x0800e36c
 800b3dc:	0800e3b4 	.word	0x0800e3b4
 800b3e0:	2000002a 	.word	0x2000002a
 800b3e4:	0800e3ec 	.word	0x0800e3ec
 800b3e8:	0800e434 	.word	0x0800e434
 800b3ec:	2000002b 	.word	0x2000002b
 800b3f0:	0800e46c 	.word	0x0800e46c
 800b3f4:	0800e4b8 	.word	0x0800e4b8

0800b3f8 <LL_PWR_EnableBootC2>:
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <LL_PWR_EnableBootC2+0x1c>)
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	4a04      	ldr	r2, [pc, #16]	; (800b414 <LL_PWR_EnableBootC2+0x1c>)
 800b402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b406:	60d3      	str	r3, [r2, #12]
}
 800b408:	bf00      	nop
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	58000400 	.word	0x58000400

0800b418 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b420:	4b06      	ldr	r3, [pc, #24]	; (800b43c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b422:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b426:	4905      	ldr	r1, [pc, #20]	; (800b43c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4313      	orrs	r3, r2
 800b42c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	58000800 	.word	0x58000800

0800b440 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b44a:	6a1a      	ldr	r2, [r3, #32]
 800b44c:	4904      	ldr	r1, [pc, #16]	; (800b460 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4313      	orrs	r3, r2
 800b452:	620b      	str	r3, [r1, #32]
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	58000800 	.word	0x58000800

0800b464 <LL_AHB3_GRP1_EnableClock>:
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b46c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4313      	orrs	r3, r2
 800b47a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b47c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	4013      	ands	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	bf00      	nop
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b496:	b480      	push	{r7}
 800b498:	b085      	sub	sp, #20
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b49e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b4a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b4b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4013      	ands	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
}
 800b4c2:	bf00      	nop
 800b4c4:	3714      	adds	r7, #20
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	601a      	str	r2, [r3, #0]
}
 800b4e2:	bf00      	nop
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f043 0201 	orr.w	r2, r3, #1
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	601a      	str	r2, [r3, #0]
}
 800b502:	bf00      	nop
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b50e:	b480      	push	{r7}
 800b510:	b083      	sub	sp, #12
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	041b      	lsls	r3, r3, #16
 800b520:	43db      	mvns	r3, r3
 800b522:	401a      	ands	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	605a      	str	r2, [r3, #4]
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	041b      	lsls	r3, r3, #16
 800b546:	431a      	orrs	r2, r3
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	43db      	mvns	r3, r3
 800b56a:	401a      	ands	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	605a      	str	r2, [r3, #4]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr

0800b57c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b083      	sub	sp, #12
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	609a      	str	r2, [r3, #8]
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	041a      	lsls	r2, r3, #16
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	609a      	str	r2, [r3, #8]
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr

0800b5b6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b5b6:	b480      	push	{r7}
 800b5b8:	b083      	sub	sp, #12
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68da      	ldr	r2, [r3, #12]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d101      	bne.n	800b5d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69da      	ldr	r2, [r3, #28]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d101      	bne.n	800b5fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e000      	b.n	800b5fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
	...

0800b60c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b610:	2102      	movs	r1, #2
 800b612:	4818      	ldr	r0, [pc, #96]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b614:	f7ff ffe4 	bl	800b5e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d008      	beq.n	800b630 <HW_IPCC_Rx_Handler+0x24>
 800b61e:	4b15      	ldr	r3, [pc, #84]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f003 0302 	and.w	r3, r3, #2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800b62a:	f000 f8d5 	bl	800b7d8 <HW_IPCC_SYS_EvtHandler>
 800b62e:	e01e      	b.n	800b66e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b630:	2101      	movs	r1, #1
 800b632:	4810      	ldr	r0, [pc, #64]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b634:	f7ff ffd4 	bl	800b5e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d008      	beq.n	800b650 <HW_IPCC_Rx_Handler+0x44>
 800b63e:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d102      	bne.n	800b650 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800b64a:	f000 f889 	bl	800b760 <HW_IPCC_BLE_EvtHandler>
 800b64e:	e00e      	b.n	800b66e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b650:	2108      	movs	r1, #8
 800b652:	4808      	ldr	r0, [pc, #32]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b654:	f7ff ffc4 	bl	800b5e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d008      	beq.n	800b670 <HW_IPCC_Rx_Handler+0x64>
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <HW_IPCC_Rx_Handler+0x68>)
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	f003 0308 	and.w	r3, r3, #8
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b66a:	f000 f901 	bl	800b870 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
}
 800b672:	bd80      	pop	{r7, pc}
 800b674:	58000c00 	.word	0x58000c00

0800b678 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b67c:	2102      	movs	r1, #2
 800b67e:	4818      	ldr	r0, [pc, #96]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b680:	f7ff ff99 	bl	800b5b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d108      	bne.n	800b69c <HW_IPCC_Tx_Handler+0x24>
 800b68a:	4b15      	ldr	r3, [pc, #84]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d102      	bne.n	800b69c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b696:	f000 f893 	bl	800b7c0 <HW_IPCC_SYS_CmdEvtHandler>
 800b69a:	e01e      	b.n	800b6da <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b69c:	2108      	movs	r1, #8
 800b69e:	4810      	ldr	r0, [pc, #64]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b6a0:	f7ff ff89 	bl	800b5b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d108      	bne.n	800b6bc <HW_IPCC_Tx_Handler+0x44>
 800b6aa:	4b0d      	ldr	r3, [pc, #52]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d102      	bne.n	800b6bc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b6b6:	f000 f8bd 	bl	800b834 <HW_IPCC_MM_FreeBufHandler>
 800b6ba:	e00e      	b.n	800b6da <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b6bc:	2120      	movs	r1, #32
 800b6be:	4808      	ldr	r0, [pc, #32]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b6c0:	f7ff ff79 	bl	800b5b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d108      	bne.n	800b6dc <HW_IPCC_Tx_Handler+0x64>
 800b6ca:	4b05      	ldr	r3, [pc, #20]	; (800b6e0 <HW_IPCC_Tx_Handler+0x68>)
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b6d6:	f000 f84f 	bl	800b778 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b6da:	bf00      	nop
 800b6dc:	bf00      	nop
}
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	58000c00 	.word	0x58000c00

0800b6e4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b6e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b6ec:	f7ff fed3 	bl	800b496 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b6f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b6f4:	f7ff fea4 	bl	800b440 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b6f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b6fc:	f7ff fe8c 	bl	800b418 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b700:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b702:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b704:	f7ff fe78 	bl	800b3f8 <LL_PWR_EnableBootC2>

  return;
 800b708:	bf00      	nop
}
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b710:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b714:	f7ff fea6 	bl	800b464 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b718:	4806      	ldr	r0, [pc, #24]	; (800b734 <HW_IPCC_Init+0x28>)
 800b71a:	f7ff fee8 	bl	800b4ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b71e:	4805      	ldr	r0, [pc, #20]	; (800b734 <HW_IPCC_Init+0x28>)
 800b720:	f7ff fed5 	bl	800b4ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b724:	202c      	movs	r0, #44	; 0x2c
 800b726:	f7f7 fbc2 	bl	8002eae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b72a:	202d      	movs	r0, #45	; 0x2d
 800b72c:	f7f7 fbbf 	bl	8002eae <HAL_NVIC_EnableIRQ>

  return;
 800b730:	bf00      	nop
}
 800b732:	bd80      	pop	{r7, pc}
 800b734:	58000c00 	.word	0x58000c00

0800b738 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b73c:	2101      	movs	r1, #1
 800b73e:	4802      	ldr	r0, [pc, #8]	; (800b748 <HW_IPCC_BLE_Init+0x10>)
 800b740:	f7ff ff0a 	bl	800b558 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b744:	bf00      	nop
}
 800b746:	bd80      	pop	{r7, pc}
 800b748:	58000c00 	.word	0x58000c00

0800b74c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b750:	2101      	movs	r1, #1
 800b752:	4802      	ldr	r0, [pc, #8]	; (800b75c <HW_IPCC_BLE_SendCmd+0x10>)
 800b754:	f7ff ff20 	bl	800b598 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b758:	bf00      	nop
}
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	58000c00 	.word	0x58000c00

0800b760 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b764:	f7fd fa16 	bl	8008b94 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b768:	2101      	movs	r1, #1
 800b76a:	4802      	ldr	r0, [pc, #8]	; (800b774 <HW_IPCC_BLE_EvtHandler+0x14>)
 800b76c:	f7ff ff06 	bl	800b57c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b770:	bf00      	nop
}
 800b772:	bd80      	pop	{r7, pc}
 800b774:	58000c00 	.word	0x58000c00

0800b778 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b77c:	2120      	movs	r1, #32
 800b77e:	4803      	ldr	r0, [pc, #12]	; (800b78c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b780:	f7ff fed8 	bl	800b534 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b784:	f7fd fa36 	bl	8008bf4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b788:	bf00      	nop
}
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	58000c00 	.word	0x58000c00

0800b790 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b794:	2102      	movs	r1, #2
 800b796:	4802      	ldr	r0, [pc, #8]	; (800b7a0 <HW_IPCC_SYS_Init+0x10>)
 800b798:	f7ff fede 	bl	800b558 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b79c:	bf00      	nop
}
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	58000c00 	.word	0x58000c00

0800b7a4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	4804      	ldr	r0, [pc, #16]	; (800b7bc <HW_IPCC_SYS_SendCmd+0x18>)
 800b7ac:	f7ff fef4 	bl	800b598 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b7b0:	2102      	movs	r1, #2
 800b7b2:	4802      	ldr	r0, [pc, #8]	; (800b7bc <HW_IPCC_SYS_SendCmd+0x18>)
 800b7b4:	f7ff feab 	bl	800b50e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b7b8:	bf00      	nop
}
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	58000c00 	.word	0x58000c00

0800b7c0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b7c4:	2102      	movs	r1, #2
 800b7c6:	4803      	ldr	r0, [pc, #12]	; (800b7d4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b7c8:	f7ff feb4 	bl	800b534 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b7cc:	f7fd fa62 	bl	8008c94 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b7d0:	bf00      	nop
}
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	58000c00 	.word	0x58000c00

0800b7d8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b7dc:	f7fd fa70 	bl	8008cc0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b7e0:	2102      	movs	r1, #2
 800b7e2:	4802      	ldr	r0, [pc, #8]	; (800b7ec <HW_IPCC_SYS_EvtHandler+0x14>)
 800b7e4:	f7ff feca 	bl	800b57c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b7e8:	bf00      	nop
}
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	58000c00 	.word	0x58000c00

0800b7f0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b7f8:	2108      	movs	r1, #8
 800b7fa:	480c      	ldr	r0, [pc, #48]	; (800b82c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b7fc:	f7ff fedb 	bl	800b5b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d007      	beq.n	800b816 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b806:	4a0a      	ldr	r2, [pc, #40]	; (800b830 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b80c:	2108      	movs	r1, #8
 800b80e:	4807      	ldr	r0, [pc, #28]	; (800b82c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b810:	f7ff fe7d 	bl	800b50e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b814:	e006      	b.n	800b824 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b81a:	2108      	movs	r1, #8
 800b81c:	4803      	ldr	r0, [pc, #12]	; (800b82c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b81e:	f7ff febb 	bl	800b598 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b822:	bf00      	nop
}
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	58000c00 	.word	0x58000c00
 800b830:	2000152c 	.word	0x2000152c

0800b834 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b838:	2108      	movs	r1, #8
 800b83a:	4806      	ldr	r0, [pc, #24]	; (800b854 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b83c:	f7ff fe7a 	bl	800b534 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b840:	4b05      	ldr	r3, [pc, #20]	; (800b858 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b846:	2108      	movs	r1, #8
 800b848:	4802      	ldr	r0, [pc, #8]	; (800b854 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b84a:	f7ff fea5 	bl	800b598 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b84e:	bf00      	nop
}
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	58000c00 	.word	0x58000c00
 800b858:	2000152c 	.word	0x2000152c

0800b85c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b860:	2108      	movs	r1, #8
 800b862:	4802      	ldr	r0, [pc, #8]	; (800b86c <HW_IPCC_TRACES_Init+0x10>)
 800b864:	f7ff fe78 	bl	800b558 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b868:	bf00      	nop
}
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	58000c00 	.word	0x58000c00

0800b870 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b874:	f7fd facc 	bl	8008e10 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b878:	2108      	movs	r1, #8
 800b87a:	4802      	ldr	r0, [pc, #8]	; (800b884 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b87c:	f7ff fe7e 	bl	800b57c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b880:	bf00      	nop
}
 800b882:	bd80      	pop	{r7, pc}
 800b884:	58000c00 	.word	0x58000c00

0800b888 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b88c:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <UTIL_LPM_Init+0x1c>)
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b892:	4b05      	ldr	r3, [pc, #20]	; (800b8a8 <UTIL_LPM_Init+0x20>)
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b898:	bf00      	nop
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	20001530 	.word	0x20001530
 800b8a8:	20001534 	.word	0x20001534

0800b8ac <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b8bc:	613b      	str	r3, [r7, #16]
  return(result);
 800b8be:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b8c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8c2:	b672      	cpsid	i
}
 800b8c4:	bf00      	nop
  
  switch(state)
 800b8c6:	78fb      	ldrb	r3, [r7, #3]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <UTIL_LPM_SetOffMode+0x32>
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d10e      	bne.n	800b8ee <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b8d0:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <UTIL_LPM_SetOffMode+0x5c>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	4a0b      	ldr	r2, [pc, #44]	; (800b908 <UTIL_LPM_SetOffMode+0x5c>)
 800b8da:	6013      	str	r3, [r2, #0]
      break;
 800b8dc:	e008      	b.n	800b8f0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	43da      	mvns	r2, r3
 800b8e2:	4b09      	ldr	r3, [pc, #36]	; (800b908 <UTIL_LPM_SetOffMode+0x5c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4013      	ands	r3, r2
 800b8e8:	4a07      	ldr	r2, [pc, #28]	; (800b908 <UTIL_LPM_SetOffMode+0x5c>)
 800b8ea:	6013      	str	r3, [r2, #0]
      break;
 800b8ec:	e000      	b.n	800b8f0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b8ee:	bf00      	nop
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f383 8810 	msr	PRIMASK, r3
}
 800b8fa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b8fc:	bf00      	nop
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	20001534 	.word	0x20001534

0800b90c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b090      	sub	sp, #64	; 0x40
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b914:	4b73      	ldr	r3, [pc, #460]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b91a:	4b72      	ldr	r3, [pc, #456]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4013      	ands	r3, r2
 800b922:	4a70      	ldr	r2, [pc, #448]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800b924:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b926:	4b70      	ldr	r3, [pc, #448]	; (800bae8 <UTIL_SEQ_Run+0x1dc>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b92c:	4b6f      	ldr	r3, [pc, #444]	; (800baec <UTIL_SEQ_Run+0x1e0>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b932:	4b6f      	ldr	r3, [pc, #444]	; (800baf0 <UTIL_SEQ_Run+0x1e4>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b938:	4b6e      	ldr	r3, [pc, #440]	; (800baf4 <UTIL_SEQ_Run+0x1e8>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b93e:	e08d      	b.n	800ba5c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b944:	e002      	b.n	800b94c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b948:	3301      	adds	r3, #1
 800b94a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b94c:	4a6a      	ldr	r2, [pc, #424]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b950:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	401a      	ands	r2, r3
 800b958:	4b62      	ldr	r3, [pc, #392]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4013      	ands	r3, r2
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0f1      	beq.n	800b946 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b962:	4a65      	ldr	r2, [pc, #404]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b966:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	401a      	ands	r2, r3
 800b96e:	4b5d      	ldr	r3, [pc, #372]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4013      	ands	r3, r2
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b976:	4a60      	ldr	r2, [pc, #384]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	4413      	add	r3, r2
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	4013      	ands	r3, r2
 800b984:	2b00      	cmp	r3, #0
 800b986:	d106      	bne.n	800b996 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b988:	4a5b      	ldr	r2, [pc, #364]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4413      	add	r3, r2
 800b990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b994:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b996:	4a58      	ldr	r2, [pc, #352]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	4413      	add	r3, r2
 800b99e:	685a      	ldr	r2, [r3, #4]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f9b3 	bl	800bd10 <SEQ_BitPosition>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b53      	ldr	r3, [pc, #332]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800b9b0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b9b2:	4a51      	ldr	r2, [pc, #324]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	4413      	add	r3, r2
 800b9ba:	685a      	ldr	r2, [r3, #4]
 800b9bc:	4b4f      	ldr	r3, [pc, #316]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b9c6:	43db      	mvns	r3, r3
 800b9c8:	401a      	ands	r2, r3
 800b9ca:	494b      	ldr	r1, [pc, #300]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800b9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	440b      	add	r3, r1
 800b9d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b9d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b9da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b9dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9de:	b672      	cpsid	i
}
 800b9e0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b9e2:	4b46      	ldr	r3, [pc, #280]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ec:	43da      	mvns	r2, r3
 800b9ee:	4b3e      	ldr	r3, [pc, #248]	; (800bae8 <UTIL_SEQ_Run+0x1dc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	4a3c      	ldr	r2, [pc, #240]	; (800bae8 <UTIL_SEQ_Run+0x1dc>)
 800b9f6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fc:	e013      	b.n	800ba26 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba00:	3b01      	subs	r3, #1
 800ba02:	4a3d      	ldr	r2, [pc, #244]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800ba04:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ba08:	4b3c      	ldr	r3, [pc, #240]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba12:	43da      	mvns	r2, r3
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	3b01      	subs	r3, #1
 800ba18:	400a      	ands	r2, r1
 800ba1a:	4937      	ldr	r1, [pc, #220]	; (800baf8 <UTIL_SEQ_Run+0x1ec>)
 800ba1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	3b01      	subs	r3, #1
 800ba24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e8      	bne.n	800b9fe <UTIL_SEQ_Run+0xf2>
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f383 8810 	msr	PRIMASK, r3
}
 800ba36:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ba38:	4b30      	ldr	r3, [pc, #192]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a30      	ldr	r2, [pc, #192]	; (800bb00 <UTIL_SEQ_Run+0x1f4>)
 800ba3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba42:	4798      	blx	r3

    local_taskset = TaskSet;
 800ba44:	4b28      	ldr	r3, [pc, #160]	; (800bae8 <UTIL_SEQ_Run+0x1dc>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800ba4a:	4b28      	ldr	r3, [pc, #160]	; (800baec <UTIL_SEQ_Run+0x1e0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800ba50:	4b27      	ldr	r3, [pc, #156]	; (800baf0 <UTIL_SEQ_Run+0x1e4>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800ba56:	4b27      	ldr	r3, [pc, #156]	; (800baf4 <UTIL_SEQ_Run+0x1e8>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ba5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba60:	401a      	ands	r2, r3
 800ba62:	4b20      	ldr	r3, [pc, #128]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4013      	ands	r3, r2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d005      	beq.n	800ba78 <UTIL_SEQ_Run+0x16c>
 800ba6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba70:	4013      	ands	r3, r2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f43f af64 	beq.w	800b940 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ba78:	4b20      	ldr	r3, [pc, #128]	; (800bafc <UTIL_SEQ_Run+0x1f0>)
 800ba7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba7e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ba80:	f000 f938 	bl	800bcf4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba84:	f3ef 8310 	mrs	r3, PRIMASK
 800ba88:	613b      	str	r3, [r7, #16]
  return(result);
 800ba8a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ba8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba8e:	b672      	cpsid	i
}
 800ba90:	bf00      	nop
  local_taskset = TaskSet;
 800ba92:	4b15      	ldr	r3, [pc, #84]	; (800bae8 <UTIL_SEQ_Run+0x1dc>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ba98:	4b14      	ldr	r3, [pc, #80]	; (800baec <UTIL_SEQ_Run+0x1e0>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ba9e:	4b14      	ldr	r3, [pc, #80]	; (800baf0 <UTIL_SEQ_Run+0x1e4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800baa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	401a      	ands	r2, r3
 800baaa:	4b0e      	ldr	r3, [pc, #56]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4013      	ands	r3, r2
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d107      	bne.n	800bac4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800bab4:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <UTIL_SEQ_Run+0x1e8>)
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baba:	4013      	ands	r3, r2
 800babc:	2b00      	cmp	r3, #0
 800babe:	d101      	bne.n	800bac4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800bac0:	f7f5 fc9a 	bl	80013f8 <UTIL_SEQ_Idle>
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f383 8810 	msr	PRIMASK, r3
}
 800bace:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800bad0:	f000 f917 	bl	800bd02 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800bad4:	4a03      	ldr	r2, [pc, #12]	; (800bae4 <UTIL_SEQ_Run+0x1d8>)
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	6013      	str	r3, [r2, #0]

  return;
 800bada:	bf00      	nop
}
 800badc:	3740      	adds	r7, #64	; 0x40
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000030 	.word	0x20000030
 800bae8:	20001538 	.word	0x20001538
 800baec:	2000153c 	.word	0x2000153c
 800baf0:	2000002c 	.word	0x2000002c
 800baf4:	20001540 	.word	0x20001540
 800baf8:	200015c8 	.word	0x200015c8
 800bafc:	20001544 	.word	0x20001544
 800bb00:	20001548 	.word	0x20001548

0800bb04 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb10:	f3ef 8310 	mrs	r3, PRIMASK
 800bb14:	617b      	str	r3, [r7, #20]
  return(result);
 800bb16:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800bb18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb1a:	b672      	cpsid	i
}
 800bb1c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 f8f6 	bl	800bd10 <SEQ_BitPosition>
 800bb24:	4603      	mov	r3, r0
 800bb26:	4619      	mov	r1, r3
 800bb28:	4a06      	ldr	r2, [pc, #24]	; (800bb44 <UTIL_SEQ_RegTask+0x40>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	f383 8810 	msr	PRIMASK, r3
}
 800bb3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800bb3c:	bf00      	nop
}
 800bb3e:	3720      	adds	r7, #32
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20001548 	.word	0x20001548

0800bb48 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b087      	sub	sp, #28
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb52:	f3ef 8310 	mrs	r3, PRIMASK
 800bb56:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb58:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bb5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb5c:	b672      	cpsid	i
}
 800bb5e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800bb60:	4b0d      	ldr	r3, [pc, #52]	; (800bb98 <UTIL_SEQ_SetTask+0x50>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	4a0b      	ldr	r2, [pc, #44]	; (800bb98 <UTIL_SEQ_SetTask+0x50>)
 800bb6a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bb6c:	4a0b      	ldr	r2, [pc, #44]	; (800bb9c <UTIL_SEQ_SetTask+0x54>)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	431a      	orrs	r2, r3
 800bb78:	4908      	ldr	r1, [pc, #32]	; (800bb9c <UTIL_SEQ_SetTask+0x54>)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	f383 8810 	msr	PRIMASK, r3
}
 800bb8a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bb8c:	bf00      	nop
}
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	20001538 	.word	0x20001538
 800bb9c:	200015c8 	.word	0x200015c8

0800bba0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bba8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbac:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bbb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbb2:	b672      	cpsid	i
}
 800bbb4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	43da      	mvns	r2, r3
 800bbba:	4b08      	ldr	r3, [pc, #32]	; (800bbdc <UTIL_SEQ_PauseTask+0x3c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	4a06      	ldr	r2, [pc, #24]	; (800bbdc <UTIL_SEQ_PauseTask+0x3c>)
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	f383 8810 	msr	PRIMASK, r3
}
 800bbce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bbd0:	bf00      	nop
}
 800bbd2:	371c      	adds	r7, #28
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	2000002c 	.word	0x2000002c

0800bbe0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbe8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbec:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bbf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbf2:	b672      	cpsid	i
}
 800bbf4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bbf6:	4b09      	ldr	r3, [pc, #36]	; (800bc1c <UTIL_SEQ_ResumeTask+0x3c>)
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	4a07      	ldr	r2, [pc, #28]	; (800bc1c <UTIL_SEQ_ResumeTask+0x3c>)
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f383 8810 	msr	PRIMASK, r3
}
 800bc0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bc0e:	bf00      	nop
}
 800bc10:	371c      	adds	r7, #28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	2000002c 	.word	0x2000002c

0800bc20 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b087      	sub	sp, #28
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc28:	f3ef 8310 	mrs	r3, PRIMASK
 800bc2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bc30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc32:	b672      	cpsid	i
}
 800bc34:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <UTIL_SEQ_SetEvt+0x3c>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	4a07      	ldr	r2, [pc, #28]	; (800bc5c <UTIL_SEQ_SetEvt+0x3c>)
 800bc40:	6013      	str	r3, [r2, #0]
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f383 8810 	msr	PRIMASK, r3
}
 800bc4c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bc4e:	bf00      	nop
}
 800bc50:	371c      	adds	r7, #28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	2000153c 	.word	0x2000153c

0800bc60 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800bc68:	4b1f      	ldr	r3, [pc, #124]	; (800bce8 <UTIL_SEQ_WaitEvt+0x88>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800bc6e:	4b1e      	ldr	r3, [pc, #120]	; (800bce8 <UTIL_SEQ_WaitEvt+0x88>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc76:	d102      	bne.n	800bc7e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61fb      	str	r3, [r7, #28]
 800bc7c:	e005      	b.n	800bc8a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800bc7e:	4b1a      	ldr	r3, [pc, #104]	; (800bce8 <UTIL_SEQ_WaitEvt+0x88>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2201      	movs	r2, #1
 800bc84:	fa02 f303 	lsl.w	r3, r2, r3
 800bc88:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800bc8a:	4b18      	ldr	r3, [pc, #96]	; (800bcec <UTIL_SEQ_WaitEvt+0x8c>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800bc90:	4a16      	ldr	r2, [pc, #88]	; (800bcec <UTIL_SEQ_WaitEvt+0x8c>)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800bc96:	e003      	b.n	800bca0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	69f8      	ldr	r0, [r7, #28]
 800bc9c:	f7f5 fbb3 	bl	8001406 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800bca0:	4b13      	ldr	r3, [pc, #76]	; (800bcf0 <UTIL_SEQ_WaitEvt+0x90>)
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4013      	ands	r3, r2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d0f5      	beq.n	800bc98 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800bcac:	4a0e      	ldr	r2, [pc, #56]	; (800bce8 <UTIL_SEQ_WaitEvt+0x88>)
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcb2:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb6:	60bb      	str	r3, [r7, #8]
  return(result);
 800bcb8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bcba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcbc:	b672      	cpsid	i
}
 800bcbe:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	43da      	mvns	r2, r3
 800bcc4:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <UTIL_SEQ_WaitEvt+0x90>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4013      	ands	r3, r2
 800bcca:	4a09      	ldr	r2, [pc, #36]	; (800bcf0 <UTIL_SEQ_WaitEvt+0x90>)
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f383 8810 	msr	PRIMASK, r3
}
 800bcd8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800bcda:	4a04      	ldr	r2, [pc, #16]	; (800bcec <UTIL_SEQ_WaitEvt+0x8c>)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	6013      	str	r3, [r2, #0]
  return;
 800bce0:	bf00      	nop
}
 800bce2:	3720      	adds	r7, #32
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20001544 	.word	0x20001544
 800bcec:	20001540 	.word	0x20001540
 800bcf0:	2000153c 	.word	0x2000153c

0800bcf4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bcf8:	bf00      	nop
}
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800bd02:	b480      	push	{r7}
 800bd04:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800bd06:	bf00      	nop
}
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	0c1b      	lsrs	r3, r3, #16
 800bd24:	041b      	lsls	r3, r3, #16
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d104      	bne.n	800bd34 <SEQ_BitPosition+0x24>
 800bd2a:	2310      	movs	r3, #16
 800bd2c:	73fb      	strb	r3, [r7, #15]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	041b      	lsls	r3, r3, #16
 800bd32:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <SEQ_BitPosition+0x3a>
 800bd3e:	7bfb      	ldrb	r3, [r7, #15]
 800bd40:	3308      	adds	r3, #8
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d105      	bne.n	800bd60 <SEQ_BitPosition+0x50>
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	3304      	adds	r3, #4
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	011b      	lsls	r3, r3, #4
 800bd5e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	0f1b      	lsrs	r3, r3, #28
 800bd64:	4a07      	ldr	r2, [pc, #28]	; (800bd84 <SEQ_BitPosition+0x74>)
 800bd66:	5cd2      	ldrb	r2, [r2, r3]
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
 800bd70:	f1c3 031f 	rsb	r3, r3, #31
 800bd74:	b2db      	uxtb	r3, r3
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	0800e824 	.word	0x0800e824

0800bd88 <std>:
 800bd88:	2300      	movs	r3, #0
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd96:	6083      	str	r3, [r0, #8]
 800bd98:	8181      	strh	r1, [r0, #12]
 800bd9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd9c:	81c2      	strh	r2, [r0, #14]
 800bd9e:	6183      	str	r3, [r0, #24]
 800bda0:	4619      	mov	r1, r3
 800bda2:	2208      	movs	r2, #8
 800bda4:	305c      	adds	r0, #92	; 0x5c
 800bda6:	f000 f9ff 	bl	800c1a8 <memset>
 800bdaa:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <std+0x58>)
 800bdac:	6263      	str	r3, [r4, #36]	; 0x24
 800bdae:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <std+0x5c>)
 800bdb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdb2:	4b0d      	ldr	r3, [pc, #52]	; (800bde8 <std+0x60>)
 800bdb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdb6:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <std+0x64>)
 800bdb8:	6323      	str	r3, [r4, #48]	; 0x30
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <std+0x68>)
 800bdbc:	6224      	str	r4, [r4, #32]
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d006      	beq.n	800bdd0 <std+0x48>
 800bdc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bdc6:	4294      	cmp	r4, r2
 800bdc8:	d002      	beq.n	800bdd0 <std+0x48>
 800bdca:	33d0      	adds	r3, #208	; 0xd0
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	d105      	bne.n	800bddc <std+0x54>
 800bdd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdd8:	f000 ba76 	b.w	800c2c8 <__retarget_lock_init_recursive>
 800bddc:	bd10      	pop	{r4, pc}
 800bdde:	bf00      	nop
 800bde0:	0800bff9 	.word	0x0800bff9
 800bde4:	0800c01b 	.word	0x0800c01b
 800bde8:	0800c053 	.word	0x0800c053
 800bdec:	0800c077 	.word	0x0800c077
 800bdf0:	200015d8 	.word	0x200015d8

0800bdf4 <stdio_exit_handler>:
 800bdf4:	4a02      	ldr	r2, [pc, #8]	; (800be00 <stdio_exit_handler+0xc>)
 800bdf6:	4903      	ldr	r1, [pc, #12]	; (800be04 <stdio_exit_handler+0x10>)
 800bdf8:	4803      	ldr	r0, [pc, #12]	; (800be08 <stdio_exit_handler+0x14>)
 800bdfa:	f000 b869 	b.w	800bed0 <_fwalk_sglue>
 800bdfe:	bf00      	nop
 800be00:	20000034 	.word	0x20000034
 800be04:	0800cb91 	.word	0x0800cb91
 800be08:	20000040 	.word	0x20000040

0800be0c <cleanup_stdio>:
 800be0c:	6841      	ldr	r1, [r0, #4]
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <cleanup_stdio+0x34>)
 800be10:	4299      	cmp	r1, r3
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	d001      	beq.n	800be1c <cleanup_stdio+0x10>
 800be18:	f000 feba 	bl	800cb90 <_fflush_r>
 800be1c:	68a1      	ldr	r1, [r4, #8]
 800be1e:	4b09      	ldr	r3, [pc, #36]	; (800be44 <cleanup_stdio+0x38>)
 800be20:	4299      	cmp	r1, r3
 800be22:	d002      	beq.n	800be2a <cleanup_stdio+0x1e>
 800be24:	4620      	mov	r0, r4
 800be26:	f000 feb3 	bl	800cb90 <_fflush_r>
 800be2a:	68e1      	ldr	r1, [r4, #12]
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <cleanup_stdio+0x3c>)
 800be2e:	4299      	cmp	r1, r3
 800be30:	d004      	beq.n	800be3c <cleanup_stdio+0x30>
 800be32:	4620      	mov	r0, r4
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f000 beaa 	b.w	800cb90 <_fflush_r>
 800be3c:	bd10      	pop	{r4, pc}
 800be3e:	bf00      	nop
 800be40:	200015d8 	.word	0x200015d8
 800be44:	20001640 	.word	0x20001640
 800be48:	200016a8 	.word	0x200016a8

0800be4c <global_stdio_init.part.0>:
 800be4c:	b510      	push	{r4, lr}
 800be4e:	4b0b      	ldr	r3, [pc, #44]	; (800be7c <global_stdio_init.part.0+0x30>)
 800be50:	4c0b      	ldr	r4, [pc, #44]	; (800be80 <global_stdio_init.part.0+0x34>)
 800be52:	4a0c      	ldr	r2, [pc, #48]	; (800be84 <global_stdio_init.part.0+0x38>)
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	4620      	mov	r0, r4
 800be58:	2200      	movs	r2, #0
 800be5a:	2104      	movs	r1, #4
 800be5c:	f7ff ff94 	bl	800bd88 <std>
 800be60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800be64:	2201      	movs	r2, #1
 800be66:	2109      	movs	r1, #9
 800be68:	f7ff ff8e 	bl	800bd88 <std>
 800be6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800be70:	2202      	movs	r2, #2
 800be72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be76:	2112      	movs	r1, #18
 800be78:	f7ff bf86 	b.w	800bd88 <std>
 800be7c:	20001710 	.word	0x20001710
 800be80:	200015d8 	.word	0x200015d8
 800be84:	0800bdf5 	.word	0x0800bdf5

0800be88 <__sfp_lock_acquire>:
 800be88:	4801      	ldr	r0, [pc, #4]	; (800be90 <__sfp_lock_acquire+0x8>)
 800be8a:	f000 ba1e 	b.w	800c2ca <__retarget_lock_acquire_recursive>
 800be8e:	bf00      	nop
 800be90:	20001719 	.word	0x20001719

0800be94 <__sfp_lock_release>:
 800be94:	4801      	ldr	r0, [pc, #4]	; (800be9c <__sfp_lock_release+0x8>)
 800be96:	f000 ba19 	b.w	800c2cc <__retarget_lock_release_recursive>
 800be9a:	bf00      	nop
 800be9c:	20001719 	.word	0x20001719

0800bea0 <__sinit>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	4604      	mov	r4, r0
 800bea4:	f7ff fff0 	bl	800be88 <__sfp_lock_acquire>
 800bea8:	6a23      	ldr	r3, [r4, #32]
 800beaa:	b11b      	cbz	r3, 800beb4 <__sinit+0x14>
 800beac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb0:	f7ff bff0 	b.w	800be94 <__sfp_lock_release>
 800beb4:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <__sinit+0x28>)
 800beb6:	6223      	str	r3, [r4, #32]
 800beb8:	4b04      	ldr	r3, [pc, #16]	; (800becc <__sinit+0x2c>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f5      	bne.n	800beac <__sinit+0xc>
 800bec0:	f7ff ffc4 	bl	800be4c <global_stdio_init.part.0>
 800bec4:	e7f2      	b.n	800beac <__sinit+0xc>
 800bec6:	bf00      	nop
 800bec8:	0800be0d 	.word	0x0800be0d
 800becc:	20001710 	.word	0x20001710

0800bed0 <_fwalk_sglue>:
 800bed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed4:	4607      	mov	r7, r0
 800bed6:	4688      	mov	r8, r1
 800bed8:	4614      	mov	r4, r2
 800beda:	2600      	movs	r6, #0
 800bedc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bee0:	f1b9 0901 	subs.w	r9, r9, #1
 800bee4:	d505      	bpl.n	800bef2 <_fwalk_sglue+0x22>
 800bee6:	6824      	ldr	r4, [r4, #0]
 800bee8:	2c00      	cmp	r4, #0
 800beea:	d1f7      	bne.n	800bedc <_fwalk_sglue+0xc>
 800beec:	4630      	mov	r0, r6
 800beee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d907      	bls.n	800bf08 <_fwalk_sglue+0x38>
 800bef8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800befc:	3301      	adds	r3, #1
 800befe:	d003      	beq.n	800bf08 <_fwalk_sglue+0x38>
 800bf00:	4629      	mov	r1, r5
 800bf02:	4638      	mov	r0, r7
 800bf04:	47c0      	blx	r8
 800bf06:	4306      	orrs	r6, r0
 800bf08:	3568      	adds	r5, #104	; 0x68
 800bf0a:	e7e9      	b.n	800bee0 <_fwalk_sglue+0x10>

0800bf0c <iprintf>:
 800bf0c:	b40f      	push	{r0, r1, r2, r3}
 800bf0e:	b507      	push	{r0, r1, r2, lr}
 800bf10:	4906      	ldr	r1, [pc, #24]	; (800bf2c <iprintf+0x20>)
 800bf12:	ab04      	add	r3, sp, #16
 800bf14:	6808      	ldr	r0, [r1, #0]
 800bf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1a:	6881      	ldr	r1, [r0, #8]
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	f000 fb07 	bl	800c530 <_vfiprintf_r>
 800bf22:	b003      	add	sp, #12
 800bf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf28:	b004      	add	sp, #16
 800bf2a:	4770      	bx	lr
 800bf2c:	2000008c 	.word	0x2000008c

0800bf30 <putchar>:
 800bf30:	4b02      	ldr	r3, [pc, #8]	; (800bf3c <putchar+0xc>)
 800bf32:	4601      	mov	r1, r0
 800bf34:	6818      	ldr	r0, [r3, #0]
 800bf36:	6882      	ldr	r2, [r0, #8]
 800bf38:	f000 beb4 	b.w	800cca4 <_putc_r>
 800bf3c:	2000008c 	.word	0x2000008c

0800bf40 <_puts_r>:
 800bf40:	6a03      	ldr	r3, [r0, #32]
 800bf42:	b570      	push	{r4, r5, r6, lr}
 800bf44:	6884      	ldr	r4, [r0, #8]
 800bf46:	4605      	mov	r5, r0
 800bf48:	460e      	mov	r6, r1
 800bf4a:	b90b      	cbnz	r3, 800bf50 <_puts_r+0x10>
 800bf4c:	f7ff ffa8 	bl	800bea0 <__sinit>
 800bf50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf52:	07db      	lsls	r3, r3, #31
 800bf54:	d405      	bmi.n	800bf62 <_puts_r+0x22>
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	0598      	lsls	r0, r3, #22
 800bf5a:	d402      	bmi.n	800bf62 <_puts_r+0x22>
 800bf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf5e:	f000 f9b4 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	0719      	lsls	r1, r3, #28
 800bf66:	d513      	bpl.n	800bf90 <_puts_r+0x50>
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	b18b      	cbz	r3, 800bf90 <_puts_r+0x50>
 800bf6c:	3e01      	subs	r6, #1
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf74:	3b01      	subs	r3, #1
 800bf76:	60a3      	str	r3, [r4, #8]
 800bf78:	b9e9      	cbnz	r1, 800bfb6 <_puts_r+0x76>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	da2e      	bge.n	800bfdc <_puts_r+0x9c>
 800bf7e:	4622      	mov	r2, r4
 800bf80:	210a      	movs	r1, #10
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f87b 	bl	800c07e <__swbuf_r>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d007      	beq.n	800bf9c <_puts_r+0x5c>
 800bf8c:	250a      	movs	r5, #10
 800bf8e:	e007      	b.n	800bfa0 <_puts_r+0x60>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f8b0 	bl	800c0f8 <__swsetup_r>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d0e7      	beq.n	800bf6c <_puts_r+0x2c>
 800bf9c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bfa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa2:	07da      	lsls	r2, r3, #31
 800bfa4:	d405      	bmi.n	800bfb2 <_puts_r+0x72>
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	059b      	lsls	r3, r3, #22
 800bfaa:	d402      	bmi.n	800bfb2 <_puts_r+0x72>
 800bfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfae:	f000 f98d 	bl	800c2cc <__retarget_lock_release_recursive>
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	da04      	bge.n	800bfc4 <_puts_r+0x84>
 800bfba:	69a2      	ldr	r2, [r4, #24]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	dc06      	bgt.n	800bfce <_puts_r+0x8e>
 800bfc0:	290a      	cmp	r1, #10
 800bfc2:	d004      	beq.n	800bfce <_puts_r+0x8e>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	6022      	str	r2, [r4, #0]
 800bfca:	7019      	strb	r1, [r3, #0]
 800bfcc:	e7cf      	b.n	800bf6e <_puts_r+0x2e>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f000 f854 	bl	800c07e <__swbuf_r>
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d1c9      	bne.n	800bf6e <_puts_r+0x2e>
 800bfda:	e7df      	b.n	800bf9c <_puts_r+0x5c>
 800bfdc:	6823      	ldr	r3, [r4, #0]
 800bfde:	250a      	movs	r5, #10
 800bfe0:	1c5a      	adds	r2, r3, #1
 800bfe2:	6022      	str	r2, [r4, #0]
 800bfe4:	701d      	strb	r5, [r3, #0]
 800bfe6:	e7db      	b.n	800bfa0 <_puts_r+0x60>

0800bfe8 <puts>:
 800bfe8:	4b02      	ldr	r3, [pc, #8]	; (800bff4 <puts+0xc>)
 800bfea:	4601      	mov	r1, r0
 800bfec:	6818      	ldr	r0, [r3, #0]
 800bfee:	f7ff bfa7 	b.w	800bf40 <_puts_r>
 800bff2:	bf00      	nop
 800bff4:	2000008c 	.word	0x2000008c

0800bff8 <__sread>:
 800bff8:	b510      	push	{r4, lr}
 800bffa:	460c      	mov	r4, r1
 800bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c000:	f000 f914 	bl	800c22c <_read_r>
 800c004:	2800      	cmp	r0, #0
 800c006:	bfab      	itete	ge
 800c008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c00a:	89a3      	ldrhlt	r3, [r4, #12]
 800c00c:	181b      	addge	r3, r3, r0
 800c00e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c012:	bfac      	ite	ge
 800c014:	6563      	strge	r3, [r4, #84]	; 0x54
 800c016:	81a3      	strhlt	r3, [r4, #12]
 800c018:	bd10      	pop	{r4, pc}

0800c01a <__swrite>:
 800c01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c01e:	461f      	mov	r7, r3
 800c020:	898b      	ldrh	r3, [r1, #12]
 800c022:	05db      	lsls	r3, r3, #23
 800c024:	4605      	mov	r5, r0
 800c026:	460c      	mov	r4, r1
 800c028:	4616      	mov	r6, r2
 800c02a:	d505      	bpl.n	800c038 <__swrite+0x1e>
 800c02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c030:	2302      	movs	r3, #2
 800c032:	2200      	movs	r2, #0
 800c034:	f000 f8e8 	bl	800c208 <_lseek_r>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c03e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c042:	81a3      	strh	r3, [r4, #12]
 800c044:	4632      	mov	r2, r6
 800c046:	463b      	mov	r3, r7
 800c048:	4628      	mov	r0, r5
 800c04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	f000 b8ff 	b.w	800c250 <_write_r>

0800c052 <__sseek>:
 800c052:	b510      	push	{r4, lr}
 800c054:	460c      	mov	r4, r1
 800c056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05a:	f000 f8d5 	bl	800c208 <_lseek_r>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	bf15      	itete	ne
 800c064:	6560      	strne	r0, [r4, #84]	; 0x54
 800c066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c06a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c06e:	81a3      	strheq	r3, [r4, #12]
 800c070:	bf18      	it	ne
 800c072:	81a3      	strhne	r3, [r4, #12]
 800c074:	bd10      	pop	{r4, pc}

0800c076 <__sclose>:
 800c076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07a:	f000 b8b5 	b.w	800c1e8 <_close_r>

0800c07e <__swbuf_r>:
 800c07e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c080:	460e      	mov	r6, r1
 800c082:	4614      	mov	r4, r2
 800c084:	4605      	mov	r5, r0
 800c086:	b118      	cbz	r0, 800c090 <__swbuf_r+0x12>
 800c088:	6a03      	ldr	r3, [r0, #32]
 800c08a:	b90b      	cbnz	r3, 800c090 <__swbuf_r+0x12>
 800c08c:	f7ff ff08 	bl	800bea0 <__sinit>
 800c090:	69a3      	ldr	r3, [r4, #24]
 800c092:	60a3      	str	r3, [r4, #8]
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	071a      	lsls	r2, r3, #28
 800c098:	d525      	bpl.n	800c0e6 <__swbuf_r+0x68>
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	b31b      	cbz	r3, 800c0e6 <__swbuf_r+0x68>
 800c09e:	6823      	ldr	r3, [r4, #0]
 800c0a0:	6922      	ldr	r2, [r4, #16]
 800c0a2:	1a98      	subs	r0, r3, r2
 800c0a4:	6963      	ldr	r3, [r4, #20]
 800c0a6:	b2f6      	uxtb	r6, r6
 800c0a8:	4283      	cmp	r3, r0
 800c0aa:	4637      	mov	r7, r6
 800c0ac:	dc04      	bgt.n	800c0b8 <__swbuf_r+0x3a>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f000 fd6d 	bl	800cb90 <_fflush_r>
 800c0b6:	b9e0      	cbnz	r0, 800c0f2 <__swbuf_r+0x74>
 800c0b8:	68a3      	ldr	r3, [r4, #8]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	60a3      	str	r3, [r4, #8]
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	6022      	str	r2, [r4, #0]
 800c0c4:	701e      	strb	r6, [r3, #0]
 800c0c6:	6962      	ldr	r2, [r4, #20]
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d004      	beq.n	800c0d8 <__swbuf_r+0x5a>
 800c0ce:	89a3      	ldrh	r3, [r4, #12]
 800c0d0:	07db      	lsls	r3, r3, #31
 800c0d2:	d506      	bpl.n	800c0e2 <__swbuf_r+0x64>
 800c0d4:	2e0a      	cmp	r6, #10
 800c0d6:	d104      	bne.n	800c0e2 <__swbuf_r+0x64>
 800c0d8:	4621      	mov	r1, r4
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f000 fd58 	bl	800cb90 <_fflush_r>
 800c0e0:	b938      	cbnz	r0, 800c0f2 <__swbuf_r+0x74>
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f000 f805 	bl	800c0f8 <__swsetup_r>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d0d5      	beq.n	800c09e <__swbuf_r+0x20>
 800c0f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c0f6:	e7f4      	b.n	800c0e2 <__swbuf_r+0x64>

0800c0f8 <__swsetup_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4b2a      	ldr	r3, [pc, #168]	; (800c1a4 <__swsetup_r+0xac>)
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	6818      	ldr	r0, [r3, #0]
 800c100:	460c      	mov	r4, r1
 800c102:	b118      	cbz	r0, 800c10c <__swsetup_r+0x14>
 800c104:	6a03      	ldr	r3, [r0, #32]
 800c106:	b90b      	cbnz	r3, 800c10c <__swsetup_r+0x14>
 800c108:	f7ff feca 	bl	800bea0 <__sinit>
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c112:	0718      	lsls	r0, r3, #28
 800c114:	d422      	bmi.n	800c15c <__swsetup_r+0x64>
 800c116:	06d9      	lsls	r1, r3, #27
 800c118:	d407      	bmi.n	800c12a <__swsetup_r+0x32>
 800c11a:	2309      	movs	r3, #9
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c128:	e034      	b.n	800c194 <__swsetup_r+0x9c>
 800c12a:	0758      	lsls	r0, r3, #29
 800c12c:	d512      	bpl.n	800c154 <__swsetup_r+0x5c>
 800c12e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c130:	b141      	cbz	r1, 800c144 <__swsetup_r+0x4c>
 800c132:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c136:	4299      	cmp	r1, r3
 800c138:	d002      	beq.n	800c140 <__swsetup_r+0x48>
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 f8d6 	bl	800c2ec <_free_r>
 800c140:	2300      	movs	r3, #0
 800c142:	6363      	str	r3, [r4, #52]	; 0x34
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c14a:	81a3      	strh	r3, [r4, #12]
 800c14c:	2300      	movs	r3, #0
 800c14e:	6063      	str	r3, [r4, #4]
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	f043 0308 	orr.w	r3, r3, #8
 800c15a:	81a3      	strh	r3, [r4, #12]
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	b94b      	cbnz	r3, 800c174 <__swsetup_r+0x7c>
 800c160:	89a3      	ldrh	r3, [r4, #12]
 800c162:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c16a:	d003      	beq.n	800c174 <__swsetup_r+0x7c>
 800c16c:	4621      	mov	r1, r4
 800c16e:	4628      	mov	r0, r5
 800c170:	f000 fd5c 	bl	800cc2c <__smakebuf_r>
 800c174:	89a0      	ldrh	r0, [r4, #12]
 800c176:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c17a:	f010 0301 	ands.w	r3, r0, #1
 800c17e:	d00a      	beq.n	800c196 <__swsetup_r+0x9e>
 800c180:	2300      	movs	r3, #0
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	6963      	ldr	r3, [r4, #20]
 800c186:	425b      	negs	r3, r3
 800c188:	61a3      	str	r3, [r4, #24]
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	b943      	cbnz	r3, 800c1a0 <__swsetup_r+0xa8>
 800c18e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c192:	d1c4      	bne.n	800c11e <__swsetup_r+0x26>
 800c194:	bd38      	pop	{r3, r4, r5, pc}
 800c196:	0781      	lsls	r1, r0, #30
 800c198:	bf58      	it	pl
 800c19a:	6963      	ldrpl	r3, [r4, #20]
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	e7f4      	b.n	800c18a <__swsetup_r+0x92>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	e7f7      	b.n	800c194 <__swsetup_r+0x9c>
 800c1a4:	2000008c 	.word	0x2000008c

0800c1a8 <memset>:
 800c1a8:	4402      	add	r2, r0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d100      	bne.n	800c1b2 <memset+0xa>
 800c1b0:	4770      	bx	lr
 800c1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b6:	e7f9      	b.n	800c1ac <memset+0x4>

0800c1b8 <strrchr>:
 800c1b8:	b513      	push	{r0, r1, r4, lr}
 800c1ba:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c1be:	4603      	mov	r3, r0
 800c1c0:	d110      	bne.n	800c1e4 <strrchr+0x2c>
 800c1c2:	b002      	add	sp, #8
 800c1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c8:	f000 bda0 	b.w	800cd0c <strchr>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	9101      	str	r1, [sp, #4]
 800c1d4:	f000 fd9a 	bl	800cd0c <strchr>
 800c1d8:	9901      	ldr	r1, [sp, #4]
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d1f6      	bne.n	800c1cc <strrchr+0x14>
 800c1de:	4620      	mov	r0, r4
 800c1e0:	b002      	add	sp, #8
 800c1e2:	bd10      	pop	{r4, pc}
 800c1e4:	2400      	movs	r4, #0
 800c1e6:	e7f3      	b.n	800c1d0 <strrchr+0x18>

0800c1e8 <_close_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d06      	ldr	r5, [pc, #24]	; (800c204 <_close_r+0x1c>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f6 fb5d 	bl	80028b2 <_close>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_close_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_close_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20001714 	.word	0x20001714

0800c208 <_lseek_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	; (800c228 <_lseek_r+0x20>)
 800c20c:	4604      	mov	r4, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	4611      	mov	r1, r2
 800c212:	2200      	movs	r2, #0
 800c214:	602a      	str	r2, [r5, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	f7f6 fb72 	bl	8002900 <_lseek>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_lseek_r+0x1e>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_lseek_r+0x1e>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	20001714 	.word	0x20001714

0800c22c <_read_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_read_r+0x20>)
 800c230:	4604      	mov	r4, r0
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	2200      	movs	r2, #0
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7f6 fb1c 	bl	8002878 <_read>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_read_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_read_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	20001714 	.word	0x20001714

0800c250 <_write_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d07      	ldr	r5, [pc, #28]	; (800c270 <_write_r+0x20>)
 800c254:	4604      	mov	r4, r0
 800c256:	4608      	mov	r0, r1
 800c258:	4611      	mov	r1, r2
 800c25a:	2200      	movs	r2, #0
 800c25c:	602a      	str	r2, [r5, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	f7fc fec6 	bl	8008ff0 <_write>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_write_r+0x1e>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_write_r+0x1e>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20001714 	.word	0x20001714

0800c274 <__errno>:
 800c274:	4b01      	ldr	r3, [pc, #4]	; (800c27c <__errno+0x8>)
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	2000008c 	.word	0x2000008c

0800c280 <__libc_init_array>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	4d0d      	ldr	r5, [pc, #52]	; (800c2b8 <__libc_init_array+0x38>)
 800c284:	4c0d      	ldr	r4, [pc, #52]	; (800c2bc <__libc_init_array+0x3c>)
 800c286:	1b64      	subs	r4, r4, r5
 800c288:	10a4      	asrs	r4, r4, #2
 800c28a:	2600      	movs	r6, #0
 800c28c:	42a6      	cmp	r6, r4
 800c28e:	d109      	bne.n	800c2a4 <__libc_init_array+0x24>
 800c290:	4d0b      	ldr	r5, [pc, #44]	; (800c2c0 <__libc_init_array+0x40>)
 800c292:	4c0c      	ldr	r4, [pc, #48]	; (800c2c4 <__libc_init_array+0x44>)
 800c294:	f000 fd7a 	bl	800cd8c <_init>
 800c298:	1b64      	subs	r4, r4, r5
 800c29a:	10a4      	asrs	r4, r4, #2
 800c29c:	2600      	movs	r6, #0
 800c29e:	42a6      	cmp	r6, r4
 800c2a0:	d105      	bne.n	800c2ae <__libc_init_array+0x2e>
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}
 800c2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a8:	4798      	blx	r3
 800c2aa:	3601      	adds	r6, #1
 800c2ac:	e7ee      	b.n	800c28c <__libc_init_array+0xc>
 800c2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2b2:	4798      	blx	r3
 800c2b4:	3601      	adds	r6, #1
 800c2b6:	e7f2      	b.n	800c29e <__libc_init_array+0x1e>
 800c2b8:	0800e870 	.word	0x0800e870
 800c2bc:	0800e870 	.word	0x0800e870
 800c2c0:	0800e870 	.word	0x0800e870
 800c2c4:	0800e874 	.word	0x0800e874

0800c2c8 <__retarget_lock_init_recursive>:
 800c2c8:	4770      	bx	lr

0800c2ca <__retarget_lock_acquire_recursive>:
 800c2ca:	4770      	bx	lr

0800c2cc <__retarget_lock_release_recursive>:
 800c2cc:	4770      	bx	lr

0800c2ce <memcpy>:
 800c2ce:	440a      	add	r2, r1
 800c2d0:	4291      	cmp	r1, r2
 800c2d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c2d6:	d100      	bne.n	800c2da <memcpy+0xc>
 800c2d8:	4770      	bx	lr
 800c2da:	b510      	push	{r4, lr}
 800c2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2e4:	4291      	cmp	r1, r2
 800c2e6:	d1f9      	bne.n	800c2dc <memcpy+0xe>
 800c2e8:	bd10      	pop	{r4, pc}
	...

0800c2ec <_free_r>:
 800c2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ee:	2900      	cmp	r1, #0
 800c2f0:	d044      	beq.n	800c37c <_free_r+0x90>
 800c2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2f6:	9001      	str	r0, [sp, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	f1a1 0404 	sub.w	r4, r1, #4
 800c2fe:	bfb8      	it	lt
 800c300:	18e4      	addlt	r4, r4, r3
 800c302:	f000 f8df 	bl	800c4c4 <__malloc_lock>
 800c306:	4a1e      	ldr	r2, [pc, #120]	; (800c380 <_free_r+0x94>)
 800c308:	9801      	ldr	r0, [sp, #4]
 800c30a:	6813      	ldr	r3, [r2, #0]
 800c30c:	b933      	cbnz	r3, 800c31c <_free_r+0x30>
 800c30e:	6063      	str	r3, [r4, #4]
 800c310:	6014      	str	r4, [r2, #0]
 800c312:	b003      	add	sp, #12
 800c314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c318:	f000 b8da 	b.w	800c4d0 <__malloc_unlock>
 800c31c:	42a3      	cmp	r3, r4
 800c31e:	d908      	bls.n	800c332 <_free_r+0x46>
 800c320:	6825      	ldr	r5, [r4, #0]
 800c322:	1961      	adds	r1, r4, r5
 800c324:	428b      	cmp	r3, r1
 800c326:	bf01      	itttt	eq
 800c328:	6819      	ldreq	r1, [r3, #0]
 800c32a:	685b      	ldreq	r3, [r3, #4]
 800c32c:	1949      	addeq	r1, r1, r5
 800c32e:	6021      	streq	r1, [r4, #0]
 800c330:	e7ed      	b.n	800c30e <_free_r+0x22>
 800c332:	461a      	mov	r2, r3
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	b10b      	cbz	r3, 800c33c <_free_r+0x50>
 800c338:	42a3      	cmp	r3, r4
 800c33a:	d9fa      	bls.n	800c332 <_free_r+0x46>
 800c33c:	6811      	ldr	r1, [r2, #0]
 800c33e:	1855      	adds	r5, r2, r1
 800c340:	42a5      	cmp	r5, r4
 800c342:	d10b      	bne.n	800c35c <_free_r+0x70>
 800c344:	6824      	ldr	r4, [r4, #0]
 800c346:	4421      	add	r1, r4
 800c348:	1854      	adds	r4, r2, r1
 800c34a:	42a3      	cmp	r3, r4
 800c34c:	6011      	str	r1, [r2, #0]
 800c34e:	d1e0      	bne.n	800c312 <_free_r+0x26>
 800c350:	681c      	ldr	r4, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	6053      	str	r3, [r2, #4]
 800c356:	440c      	add	r4, r1
 800c358:	6014      	str	r4, [r2, #0]
 800c35a:	e7da      	b.n	800c312 <_free_r+0x26>
 800c35c:	d902      	bls.n	800c364 <_free_r+0x78>
 800c35e:	230c      	movs	r3, #12
 800c360:	6003      	str	r3, [r0, #0]
 800c362:	e7d6      	b.n	800c312 <_free_r+0x26>
 800c364:	6825      	ldr	r5, [r4, #0]
 800c366:	1961      	adds	r1, r4, r5
 800c368:	428b      	cmp	r3, r1
 800c36a:	bf04      	itt	eq
 800c36c:	6819      	ldreq	r1, [r3, #0]
 800c36e:	685b      	ldreq	r3, [r3, #4]
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	bf04      	itt	eq
 800c374:	1949      	addeq	r1, r1, r5
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	6054      	str	r4, [r2, #4]
 800c37a:	e7ca      	b.n	800c312 <_free_r+0x26>
 800c37c:	b003      	add	sp, #12
 800c37e:	bd30      	pop	{r4, r5, pc}
 800c380:	2000171c 	.word	0x2000171c

0800c384 <sbrk_aligned>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	4e0e      	ldr	r6, [pc, #56]	; (800c3c0 <sbrk_aligned+0x3c>)
 800c388:	460c      	mov	r4, r1
 800c38a:	6831      	ldr	r1, [r6, #0]
 800c38c:	4605      	mov	r5, r0
 800c38e:	b911      	cbnz	r1, 800c396 <sbrk_aligned+0x12>
 800c390:	f000 fcec 	bl	800cd6c <_sbrk_r>
 800c394:	6030      	str	r0, [r6, #0]
 800c396:	4621      	mov	r1, r4
 800c398:	4628      	mov	r0, r5
 800c39a:	f000 fce7 	bl	800cd6c <_sbrk_r>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	d00a      	beq.n	800c3b8 <sbrk_aligned+0x34>
 800c3a2:	1cc4      	adds	r4, r0, #3
 800c3a4:	f024 0403 	bic.w	r4, r4, #3
 800c3a8:	42a0      	cmp	r0, r4
 800c3aa:	d007      	beq.n	800c3bc <sbrk_aligned+0x38>
 800c3ac:	1a21      	subs	r1, r4, r0
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 fcdc 	bl	800cd6c <_sbrk_r>
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d101      	bne.n	800c3bc <sbrk_aligned+0x38>
 800c3b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3bc:	4620      	mov	r0, r4
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
 800c3c0:	20001720 	.word	0x20001720

0800c3c4 <_malloc_r>:
 800c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c8:	1ccd      	adds	r5, r1, #3
 800c3ca:	f025 0503 	bic.w	r5, r5, #3
 800c3ce:	3508      	adds	r5, #8
 800c3d0:	2d0c      	cmp	r5, #12
 800c3d2:	bf38      	it	cc
 800c3d4:	250c      	movcc	r5, #12
 800c3d6:	2d00      	cmp	r5, #0
 800c3d8:	4607      	mov	r7, r0
 800c3da:	db01      	blt.n	800c3e0 <_malloc_r+0x1c>
 800c3dc:	42a9      	cmp	r1, r5
 800c3de:	d905      	bls.n	800c3ec <_malloc_r+0x28>
 800c3e0:	230c      	movs	r3, #12
 800c3e2:	603b      	str	r3, [r7, #0]
 800c3e4:	2600      	movs	r6, #0
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c4c0 <_malloc_r+0xfc>
 800c3f0:	f000 f868 	bl	800c4c4 <__malloc_lock>
 800c3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f8:	461c      	mov	r4, r3
 800c3fa:	bb5c      	cbnz	r4, 800c454 <_malloc_r+0x90>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	4638      	mov	r0, r7
 800c400:	f7ff ffc0 	bl	800c384 <sbrk_aligned>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	4604      	mov	r4, r0
 800c408:	d155      	bne.n	800c4b6 <_malloc_r+0xf2>
 800c40a:	f8d8 4000 	ldr.w	r4, [r8]
 800c40e:	4626      	mov	r6, r4
 800c410:	2e00      	cmp	r6, #0
 800c412:	d145      	bne.n	800c4a0 <_malloc_r+0xdc>
 800c414:	2c00      	cmp	r4, #0
 800c416:	d048      	beq.n	800c4aa <_malloc_r+0xe6>
 800c418:	6823      	ldr	r3, [r4, #0]
 800c41a:	4631      	mov	r1, r6
 800c41c:	4638      	mov	r0, r7
 800c41e:	eb04 0903 	add.w	r9, r4, r3
 800c422:	f000 fca3 	bl	800cd6c <_sbrk_r>
 800c426:	4581      	cmp	r9, r0
 800c428:	d13f      	bne.n	800c4aa <_malloc_r+0xe6>
 800c42a:	6821      	ldr	r1, [r4, #0]
 800c42c:	1a6d      	subs	r5, r5, r1
 800c42e:	4629      	mov	r1, r5
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ffa7 	bl	800c384 <sbrk_aligned>
 800c436:	3001      	adds	r0, #1
 800c438:	d037      	beq.n	800c4aa <_malloc_r+0xe6>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	442b      	add	r3, r5
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	f8d8 3000 	ldr.w	r3, [r8]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d038      	beq.n	800c4ba <_malloc_r+0xf6>
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	42a2      	cmp	r2, r4
 800c44c:	d12b      	bne.n	800c4a6 <_malloc_r+0xe2>
 800c44e:	2200      	movs	r2, #0
 800c450:	605a      	str	r2, [r3, #4]
 800c452:	e00f      	b.n	800c474 <_malloc_r+0xb0>
 800c454:	6822      	ldr	r2, [r4, #0]
 800c456:	1b52      	subs	r2, r2, r5
 800c458:	d41f      	bmi.n	800c49a <_malloc_r+0xd6>
 800c45a:	2a0b      	cmp	r2, #11
 800c45c:	d917      	bls.n	800c48e <_malloc_r+0xca>
 800c45e:	1961      	adds	r1, r4, r5
 800c460:	42a3      	cmp	r3, r4
 800c462:	6025      	str	r5, [r4, #0]
 800c464:	bf18      	it	ne
 800c466:	6059      	strne	r1, [r3, #4]
 800c468:	6863      	ldr	r3, [r4, #4]
 800c46a:	bf08      	it	eq
 800c46c:	f8c8 1000 	streq.w	r1, [r8]
 800c470:	5162      	str	r2, [r4, r5]
 800c472:	604b      	str	r3, [r1, #4]
 800c474:	4638      	mov	r0, r7
 800c476:	f104 060b 	add.w	r6, r4, #11
 800c47a:	f000 f829 	bl	800c4d0 <__malloc_unlock>
 800c47e:	f026 0607 	bic.w	r6, r6, #7
 800c482:	1d23      	adds	r3, r4, #4
 800c484:	1af2      	subs	r2, r6, r3
 800c486:	d0ae      	beq.n	800c3e6 <_malloc_r+0x22>
 800c488:	1b9b      	subs	r3, r3, r6
 800c48a:	50a3      	str	r3, [r4, r2]
 800c48c:	e7ab      	b.n	800c3e6 <_malloc_r+0x22>
 800c48e:	42a3      	cmp	r3, r4
 800c490:	6862      	ldr	r2, [r4, #4]
 800c492:	d1dd      	bne.n	800c450 <_malloc_r+0x8c>
 800c494:	f8c8 2000 	str.w	r2, [r8]
 800c498:	e7ec      	b.n	800c474 <_malloc_r+0xb0>
 800c49a:	4623      	mov	r3, r4
 800c49c:	6864      	ldr	r4, [r4, #4]
 800c49e:	e7ac      	b.n	800c3fa <_malloc_r+0x36>
 800c4a0:	4634      	mov	r4, r6
 800c4a2:	6876      	ldr	r6, [r6, #4]
 800c4a4:	e7b4      	b.n	800c410 <_malloc_r+0x4c>
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	e7cc      	b.n	800c444 <_malloc_r+0x80>
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	603b      	str	r3, [r7, #0]
 800c4ae:	4638      	mov	r0, r7
 800c4b0:	f000 f80e 	bl	800c4d0 <__malloc_unlock>
 800c4b4:	e797      	b.n	800c3e6 <_malloc_r+0x22>
 800c4b6:	6025      	str	r5, [r4, #0]
 800c4b8:	e7dc      	b.n	800c474 <_malloc_r+0xb0>
 800c4ba:	605b      	str	r3, [r3, #4]
 800c4bc:	deff      	udf	#255	; 0xff
 800c4be:	bf00      	nop
 800c4c0:	2000171c 	.word	0x2000171c

0800c4c4 <__malloc_lock>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__malloc_lock+0x8>)
 800c4c6:	f7ff bf00 	b.w	800c2ca <__retarget_lock_acquire_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	20001718 	.word	0x20001718

0800c4d0 <__malloc_unlock>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	; (800c4d8 <__malloc_unlock+0x8>)
 800c4d2:	f7ff befb 	b.w	800c2cc <__retarget_lock_release_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	20001718 	.word	0x20001718

0800c4dc <__sfputc_r>:
 800c4dc:	6893      	ldr	r3, [r2, #8]
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	b410      	push	{r4}
 800c4e4:	6093      	str	r3, [r2, #8]
 800c4e6:	da08      	bge.n	800c4fa <__sfputc_r+0x1e>
 800c4e8:	6994      	ldr	r4, [r2, #24]
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	db01      	blt.n	800c4f2 <__sfputc_r+0x16>
 800c4ee:	290a      	cmp	r1, #10
 800c4f0:	d103      	bne.n	800c4fa <__sfputc_r+0x1e>
 800c4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f6:	f7ff bdc2 	b.w	800c07e <__swbuf_r>
 800c4fa:	6813      	ldr	r3, [r2, #0]
 800c4fc:	1c58      	adds	r0, r3, #1
 800c4fe:	6010      	str	r0, [r2, #0]
 800c500:	7019      	strb	r1, [r3, #0]
 800c502:	4608      	mov	r0, r1
 800c504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c508:	4770      	bx	lr

0800c50a <__sfputs_r>:
 800c50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50c:	4606      	mov	r6, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	4614      	mov	r4, r2
 800c512:	18d5      	adds	r5, r2, r3
 800c514:	42ac      	cmp	r4, r5
 800c516:	d101      	bne.n	800c51c <__sfputs_r+0x12>
 800c518:	2000      	movs	r0, #0
 800c51a:	e007      	b.n	800c52c <__sfputs_r+0x22>
 800c51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c520:	463a      	mov	r2, r7
 800c522:	4630      	mov	r0, r6
 800c524:	f7ff ffda 	bl	800c4dc <__sfputc_r>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d1f3      	bne.n	800c514 <__sfputs_r+0xa>
 800c52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c530 <_vfiprintf_r>:
 800c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	460d      	mov	r5, r1
 800c536:	b09d      	sub	sp, #116	; 0x74
 800c538:	4614      	mov	r4, r2
 800c53a:	4698      	mov	r8, r3
 800c53c:	4606      	mov	r6, r0
 800c53e:	b118      	cbz	r0, 800c548 <_vfiprintf_r+0x18>
 800c540:	6a03      	ldr	r3, [r0, #32]
 800c542:	b90b      	cbnz	r3, 800c548 <_vfiprintf_r+0x18>
 800c544:	f7ff fcac 	bl	800bea0 <__sinit>
 800c548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c54a:	07d9      	lsls	r1, r3, #31
 800c54c:	d405      	bmi.n	800c55a <_vfiprintf_r+0x2a>
 800c54e:	89ab      	ldrh	r3, [r5, #12]
 800c550:	059a      	lsls	r2, r3, #22
 800c552:	d402      	bmi.n	800c55a <_vfiprintf_r+0x2a>
 800c554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c556:	f7ff feb8 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800c55a:	89ab      	ldrh	r3, [r5, #12]
 800c55c:	071b      	lsls	r3, r3, #28
 800c55e:	d501      	bpl.n	800c564 <_vfiprintf_r+0x34>
 800c560:	692b      	ldr	r3, [r5, #16]
 800c562:	b99b      	cbnz	r3, 800c58c <_vfiprintf_r+0x5c>
 800c564:	4629      	mov	r1, r5
 800c566:	4630      	mov	r0, r6
 800c568:	f7ff fdc6 	bl	800c0f8 <__swsetup_r>
 800c56c:	b170      	cbz	r0, 800c58c <_vfiprintf_r+0x5c>
 800c56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c570:	07dc      	lsls	r4, r3, #31
 800c572:	d504      	bpl.n	800c57e <_vfiprintf_r+0x4e>
 800c574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c578:	b01d      	add	sp, #116	; 0x74
 800c57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c57e:	89ab      	ldrh	r3, [r5, #12]
 800c580:	0598      	lsls	r0, r3, #22
 800c582:	d4f7      	bmi.n	800c574 <_vfiprintf_r+0x44>
 800c584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c586:	f7ff fea1 	bl	800c2cc <__retarget_lock_release_recursive>
 800c58a:	e7f3      	b.n	800c574 <_vfiprintf_r+0x44>
 800c58c:	2300      	movs	r3, #0
 800c58e:	9309      	str	r3, [sp, #36]	; 0x24
 800c590:	2320      	movs	r3, #32
 800c592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c596:	f8cd 800c 	str.w	r8, [sp, #12]
 800c59a:	2330      	movs	r3, #48	; 0x30
 800c59c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c750 <_vfiprintf_r+0x220>
 800c5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5a4:	f04f 0901 	mov.w	r9, #1
 800c5a8:	4623      	mov	r3, r4
 800c5aa:	469a      	mov	sl, r3
 800c5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5b0:	b10a      	cbz	r2, 800c5b6 <_vfiprintf_r+0x86>
 800c5b2:	2a25      	cmp	r2, #37	; 0x25
 800c5b4:	d1f9      	bne.n	800c5aa <_vfiprintf_r+0x7a>
 800c5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800c5ba:	d00b      	beq.n	800c5d4 <_vfiprintf_r+0xa4>
 800c5bc:	465b      	mov	r3, fp
 800c5be:	4622      	mov	r2, r4
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7ff ffa1 	bl	800c50a <__sfputs_r>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	f000 80a9 	beq.w	800c720 <_vfiprintf_r+0x1f0>
 800c5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5d0:	445a      	add	r2, fp
 800c5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80a1 	beq.w	800c720 <_vfiprintf_r+0x1f0>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e8:	f10a 0a01 	add.w	sl, sl, #1
 800c5ec:	9304      	str	r3, [sp, #16]
 800c5ee:	9307      	str	r3, [sp, #28]
 800c5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800c5f6:	4654      	mov	r4, sl
 800c5f8:	2205      	movs	r2, #5
 800c5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fe:	4854      	ldr	r0, [pc, #336]	; (800c750 <_vfiprintf_r+0x220>)
 800c600:	f7f3 fdc6 	bl	8000190 <memchr>
 800c604:	9a04      	ldr	r2, [sp, #16]
 800c606:	b9d8      	cbnz	r0, 800c640 <_vfiprintf_r+0x110>
 800c608:	06d1      	lsls	r1, r2, #27
 800c60a:	bf44      	itt	mi
 800c60c:	2320      	movmi	r3, #32
 800c60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c612:	0713      	lsls	r3, r2, #28
 800c614:	bf44      	itt	mi
 800c616:	232b      	movmi	r3, #43	; 0x2b
 800c618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c61c:	f89a 3000 	ldrb.w	r3, [sl]
 800c620:	2b2a      	cmp	r3, #42	; 0x2a
 800c622:	d015      	beq.n	800c650 <_vfiprintf_r+0x120>
 800c624:	9a07      	ldr	r2, [sp, #28]
 800c626:	4654      	mov	r4, sl
 800c628:	2000      	movs	r0, #0
 800c62a:	f04f 0c0a 	mov.w	ip, #10
 800c62e:	4621      	mov	r1, r4
 800c630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c634:	3b30      	subs	r3, #48	; 0x30
 800c636:	2b09      	cmp	r3, #9
 800c638:	d94d      	bls.n	800c6d6 <_vfiprintf_r+0x1a6>
 800c63a:	b1b0      	cbz	r0, 800c66a <_vfiprintf_r+0x13a>
 800c63c:	9207      	str	r2, [sp, #28]
 800c63e:	e014      	b.n	800c66a <_vfiprintf_r+0x13a>
 800c640:	eba0 0308 	sub.w	r3, r0, r8
 800c644:	fa09 f303 	lsl.w	r3, r9, r3
 800c648:	4313      	orrs	r3, r2
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	46a2      	mov	sl, r4
 800c64e:	e7d2      	b.n	800c5f6 <_vfiprintf_r+0xc6>
 800c650:	9b03      	ldr	r3, [sp, #12]
 800c652:	1d19      	adds	r1, r3, #4
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	9103      	str	r1, [sp, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	bfbb      	ittet	lt
 800c65c:	425b      	neglt	r3, r3
 800c65e:	f042 0202 	orrlt.w	r2, r2, #2
 800c662:	9307      	strge	r3, [sp, #28]
 800c664:	9307      	strlt	r3, [sp, #28]
 800c666:	bfb8      	it	lt
 800c668:	9204      	strlt	r2, [sp, #16]
 800c66a:	7823      	ldrb	r3, [r4, #0]
 800c66c:	2b2e      	cmp	r3, #46	; 0x2e
 800c66e:	d10c      	bne.n	800c68a <_vfiprintf_r+0x15a>
 800c670:	7863      	ldrb	r3, [r4, #1]
 800c672:	2b2a      	cmp	r3, #42	; 0x2a
 800c674:	d134      	bne.n	800c6e0 <_vfiprintf_r+0x1b0>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	1d1a      	adds	r2, r3, #4
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	9203      	str	r2, [sp, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	bfb8      	it	lt
 800c682:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c686:	3402      	adds	r4, #2
 800c688:	9305      	str	r3, [sp, #20]
 800c68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c760 <_vfiprintf_r+0x230>
 800c68e:	7821      	ldrb	r1, [r4, #0]
 800c690:	2203      	movs	r2, #3
 800c692:	4650      	mov	r0, sl
 800c694:	f7f3 fd7c 	bl	8000190 <memchr>
 800c698:	b138      	cbz	r0, 800c6aa <_vfiprintf_r+0x17a>
 800c69a:	9b04      	ldr	r3, [sp, #16]
 800c69c:	eba0 000a 	sub.w	r0, r0, sl
 800c6a0:	2240      	movs	r2, #64	; 0x40
 800c6a2:	4082      	lsls	r2, r0
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	3401      	adds	r4, #1
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ae:	4829      	ldr	r0, [pc, #164]	; (800c754 <_vfiprintf_r+0x224>)
 800c6b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6b4:	2206      	movs	r2, #6
 800c6b6:	f7f3 fd6b 	bl	8000190 <memchr>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d03f      	beq.n	800c73e <_vfiprintf_r+0x20e>
 800c6be:	4b26      	ldr	r3, [pc, #152]	; (800c758 <_vfiprintf_r+0x228>)
 800c6c0:	bb1b      	cbnz	r3, 800c70a <_vfiprintf_r+0x1da>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	3307      	adds	r3, #7
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	9303      	str	r3, [sp, #12]
 800c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d0:	443b      	add	r3, r7
 800c6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d4:	e768      	b.n	800c5a8 <_vfiprintf_r+0x78>
 800c6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6da:	460c      	mov	r4, r1
 800c6dc:	2001      	movs	r0, #1
 800c6de:	e7a6      	b.n	800c62e <_vfiprintf_r+0xfe>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	3401      	adds	r4, #1
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	f04f 0c0a 	mov.w	ip, #10
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6f2:	3a30      	subs	r2, #48	; 0x30
 800c6f4:	2a09      	cmp	r2, #9
 800c6f6:	d903      	bls.n	800c700 <_vfiprintf_r+0x1d0>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0c6      	beq.n	800c68a <_vfiprintf_r+0x15a>
 800c6fc:	9105      	str	r1, [sp, #20]
 800c6fe:	e7c4      	b.n	800c68a <_vfiprintf_r+0x15a>
 800c700:	fb0c 2101 	mla	r1, ip, r1, r2
 800c704:	4604      	mov	r4, r0
 800c706:	2301      	movs	r3, #1
 800c708:	e7f0      	b.n	800c6ec <_vfiprintf_r+0x1bc>
 800c70a:	ab03      	add	r3, sp, #12
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	462a      	mov	r2, r5
 800c710:	4b12      	ldr	r3, [pc, #72]	; (800c75c <_vfiprintf_r+0x22c>)
 800c712:	a904      	add	r1, sp, #16
 800c714:	4630      	mov	r0, r6
 800c716:	f3af 8000 	nop.w
 800c71a:	4607      	mov	r7, r0
 800c71c:	1c78      	adds	r0, r7, #1
 800c71e:	d1d6      	bne.n	800c6ce <_vfiprintf_r+0x19e>
 800c720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c722:	07d9      	lsls	r1, r3, #31
 800c724:	d405      	bmi.n	800c732 <_vfiprintf_r+0x202>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	059a      	lsls	r2, r3, #22
 800c72a:	d402      	bmi.n	800c732 <_vfiprintf_r+0x202>
 800c72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72e:	f7ff fdcd 	bl	800c2cc <__retarget_lock_release_recursive>
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	065b      	lsls	r3, r3, #25
 800c736:	f53f af1d 	bmi.w	800c574 <_vfiprintf_r+0x44>
 800c73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c73c:	e71c      	b.n	800c578 <_vfiprintf_r+0x48>
 800c73e:	ab03      	add	r3, sp, #12
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	462a      	mov	r2, r5
 800c744:	4b05      	ldr	r3, [pc, #20]	; (800c75c <_vfiprintf_r+0x22c>)
 800c746:	a904      	add	r1, sp, #16
 800c748:	4630      	mov	r0, r6
 800c74a:	f000 f879 	bl	800c840 <_printf_i>
 800c74e:	e7e4      	b.n	800c71a <_vfiprintf_r+0x1ea>
 800c750:	0800e834 	.word	0x0800e834
 800c754:	0800e83e 	.word	0x0800e83e
 800c758:	00000000 	.word	0x00000000
 800c75c:	0800c50b 	.word	0x0800c50b
 800c760:	0800e83a 	.word	0x0800e83a

0800c764 <_printf_common>:
 800c764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	4616      	mov	r6, r2
 800c76a:	4699      	mov	r9, r3
 800c76c:	688a      	ldr	r2, [r1, #8]
 800c76e:	690b      	ldr	r3, [r1, #16]
 800c770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c774:	4293      	cmp	r3, r2
 800c776:	bfb8      	it	lt
 800c778:	4613      	movlt	r3, r2
 800c77a:	6033      	str	r3, [r6, #0]
 800c77c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c780:	4607      	mov	r7, r0
 800c782:	460c      	mov	r4, r1
 800c784:	b10a      	cbz	r2, 800c78a <_printf_common+0x26>
 800c786:	3301      	adds	r3, #1
 800c788:	6033      	str	r3, [r6, #0]
 800c78a:	6823      	ldr	r3, [r4, #0]
 800c78c:	0699      	lsls	r1, r3, #26
 800c78e:	bf42      	ittt	mi
 800c790:	6833      	ldrmi	r3, [r6, #0]
 800c792:	3302      	addmi	r3, #2
 800c794:	6033      	strmi	r3, [r6, #0]
 800c796:	6825      	ldr	r5, [r4, #0]
 800c798:	f015 0506 	ands.w	r5, r5, #6
 800c79c:	d106      	bne.n	800c7ac <_printf_common+0x48>
 800c79e:	f104 0a19 	add.w	sl, r4, #25
 800c7a2:	68e3      	ldr	r3, [r4, #12]
 800c7a4:	6832      	ldr	r2, [r6, #0]
 800c7a6:	1a9b      	subs	r3, r3, r2
 800c7a8:	42ab      	cmp	r3, r5
 800c7aa:	dc26      	bgt.n	800c7fa <_printf_common+0x96>
 800c7ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7b0:	1e13      	subs	r3, r2, #0
 800c7b2:	6822      	ldr	r2, [r4, #0]
 800c7b4:	bf18      	it	ne
 800c7b6:	2301      	movne	r3, #1
 800c7b8:	0692      	lsls	r2, r2, #26
 800c7ba:	d42b      	bmi.n	800c814 <_printf_common+0xb0>
 800c7bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	47c0      	blx	r8
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d01e      	beq.n	800c808 <_printf_common+0xa4>
 800c7ca:	6823      	ldr	r3, [r4, #0]
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	f003 0306 	and.w	r3, r3, #6
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	bf02      	ittt	eq
 800c7d6:	68e5      	ldreq	r5, [r4, #12]
 800c7d8:	6833      	ldreq	r3, [r6, #0]
 800c7da:	1aed      	subeq	r5, r5, r3
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	bf0c      	ite	eq
 800c7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7e4:	2500      	movne	r5, #0
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	bfc4      	itt	gt
 800c7ea:	1a9b      	subgt	r3, r3, r2
 800c7ec:	18ed      	addgt	r5, r5, r3
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	341a      	adds	r4, #26
 800c7f2:	42b5      	cmp	r5, r6
 800c7f4:	d11a      	bne.n	800c82c <_printf_common+0xc8>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	e008      	b.n	800c80c <_printf_common+0xa8>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4652      	mov	r2, sl
 800c7fe:	4649      	mov	r1, r9
 800c800:	4638      	mov	r0, r7
 800c802:	47c0      	blx	r8
 800c804:	3001      	adds	r0, #1
 800c806:	d103      	bne.n	800c810 <_printf_common+0xac>
 800c808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c810:	3501      	adds	r5, #1
 800c812:	e7c6      	b.n	800c7a2 <_printf_common+0x3e>
 800c814:	18e1      	adds	r1, r4, r3
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	2030      	movs	r0, #48	; 0x30
 800c81a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c81e:	4422      	add	r2, r4
 800c820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c828:	3302      	adds	r3, #2
 800c82a:	e7c7      	b.n	800c7bc <_printf_common+0x58>
 800c82c:	2301      	movs	r3, #1
 800c82e:	4622      	mov	r2, r4
 800c830:	4649      	mov	r1, r9
 800c832:	4638      	mov	r0, r7
 800c834:	47c0      	blx	r8
 800c836:	3001      	adds	r0, #1
 800c838:	d0e6      	beq.n	800c808 <_printf_common+0xa4>
 800c83a:	3601      	adds	r6, #1
 800c83c:	e7d9      	b.n	800c7f2 <_printf_common+0x8e>
	...

0800c840 <_printf_i>:
 800c840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c844:	7e0f      	ldrb	r7, [r1, #24]
 800c846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c848:	2f78      	cmp	r7, #120	; 0x78
 800c84a:	4691      	mov	r9, r2
 800c84c:	4680      	mov	r8, r0
 800c84e:	460c      	mov	r4, r1
 800c850:	469a      	mov	sl, r3
 800c852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c856:	d807      	bhi.n	800c868 <_printf_i+0x28>
 800c858:	2f62      	cmp	r7, #98	; 0x62
 800c85a:	d80a      	bhi.n	800c872 <_printf_i+0x32>
 800c85c:	2f00      	cmp	r7, #0
 800c85e:	f000 80d4 	beq.w	800ca0a <_printf_i+0x1ca>
 800c862:	2f58      	cmp	r7, #88	; 0x58
 800c864:	f000 80c0 	beq.w	800c9e8 <_printf_i+0x1a8>
 800c868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c86c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c870:	e03a      	b.n	800c8e8 <_printf_i+0xa8>
 800c872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c876:	2b15      	cmp	r3, #21
 800c878:	d8f6      	bhi.n	800c868 <_printf_i+0x28>
 800c87a:	a101      	add	r1, pc, #4	; (adr r1, 800c880 <_printf_i+0x40>)
 800c87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c880:	0800c8d9 	.word	0x0800c8d9
 800c884:	0800c8ed 	.word	0x0800c8ed
 800c888:	0800c869 	.word	0x0800c869
 800c88c:	0800c869 	.word	0x0800c869
 800c890:	0800c869 	.word	0x0800c869
 800c894:	0800c869 	.word	0x0800c869
 800c898:	0800c8ed 	.word	0x0800c8ed
 800c89c:	0800c869 	.word	0x0800c869
 800c8a0:	0800c869 	.word	0x0800c869
 800c8a4:	0800c869 	.word	0x0800c869
 800c8a8:	0800c869 	.word	0x0800c869
 800c8ac:	0800c9f1 	.word	0x0800c9f1
 800c8b0:	0800c919 	.word	0x0800c919
 800c8b4:	0800c9ab 	.word	0x0800c9ab
 800c8b8:	0800c869 	.word	0x0800c869
 800c8bc:	0800c869 	.word	0x0800c869
 800c8c0:	0800ca13 	.word	0x0800ca13
 800c8c4:	0800c869 	.word	0x0800c869
 800c8c8:	0800c919 	.word	0x0800c919
 800c8cc:	0800c869 	.word	0x0800c869
 800c8d0:	0800c869 	.word	0x0800c869
 800c8d4:	0800c9b3 	.word	0x0800c9b3
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	1d1a      	adds	r2, r3, #4
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	602a      	str	r2, [r5, #0]
 800c8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e09f      	b.n	800ca2c <_printf_i+0x1ec>
 800c8ec:	6820      	ldr	r0, [r4, #0]
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	0607      	lsls	r7, r0, #24
 800c8f2:	f103 0104 	add.w	r1, r3, #4
 800c8f6:	6029      	str	r1, [r5, #0]
 800c8f8:	d501      	bpl.n	800c8fe <_printf_i+0xbe>
 800c8fa:	681e      	ldr	r6, [r3, #0]
 800c8fc:	e003      	b.n	800c906 <_printf_i+0xc6>
 800c8fe:	0646      	lsls	r6, r0, #25
 800c900:	d5fb      	bpl.n	800c8fa <_printf_i+0xba>
 800c902:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c906:	2e00      	cmp	r6, #0
 800c908:	da03      	bge.n	800c912 <_printf_i+0xd2>
 800c90a:	232d      	movs	r3, #45	; 0x2d
 800c90c:	4276      	negs	r6, r6
 800c90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c912:	485a      	ldr	r0, [pc, #360]	; (800ca7c <_printf_i+0x23c>)
 800c914:	230a      	movs	r3, #10
 800c916:	e012      	b.n	800c93e <_printf_i+0xfe>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	1d19      	adds	r1, r3, #4
 800c91e:	6029      	str	r1, [r5, #0]
 800c920:	0605      	lsls	r5, r0, #24
 800c922:	d501      	bpl.n	800c928 <_printf_i+0xe8>
 800c924:	681e      	ldr	r6, [r3, #0]
 800c926:	e002      	b.n	800c92e <_printf_i+0xee>
 800c928:	0641      	lsls	r1, r0, #25
 800c92a:	d5fb      	bpl.n	800c924 <_printf_i+0xe4>
 800c92c:	881e      	ldrh	r6, [r3, #0]
 800c92e:	4853      	ldr	r0, [pc, #332]	; (800ca7c <_printf_i+0x23c>)
 800c930:	2f6f      	cmp	r7, #111	; 0x6f
 800c932:	bf0c      	ite	eq
 800c934:	2308      	moveq	r3, #8
 800c936:	230a      	movne	r3, #10
 800c938:	2100      	movs	r1, #0
 800c93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c93e:	6865      	ldr	r5, [r4, #4]
 800c940:	60a5      	str	r5, [r4, #8]
 800c942:	2d00      	cmp	r5, #0
 800c944:	bfa2      	ittt	ge
 800c946:	6821      	ldrge	r1, [r4, #0]
 800c948:	f021 0104 	bicge.w	r1, r1, #4
 800c94c:	6021      	strge	r1, [r4, #0]
 800c94e:	b90e      	cbnz	r6, 800c954 <_printf_i+0x114>
 800c950:	2d00      	cmp	r5, #0
 800c952:	d04b      	beq.n	800c9ec <_printf_i+0x1ac>
 800c954:	4615      	mov	r5, r2
 800c956:	fbb6 f1f3 	udiv	r1, r6, r3
 800c95a:	fb03 6711 	mls	r7, r3, r1, r6
 800c95e:	5dc7      	ldrb	r7, [r0, r7]
 800c960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c964:	4637      	mov	r7, r6
 800c966:	42bb      	cmp	r3, r7
 800c968:	460e      	mov	r6, r1
 800c96a:	d9f4      	bls.n	800c956 <_printf_i+0x116>
 800c96c:	2b08      	cmp	r3, #8
 800c96e:	d10b      	bne.n	800c988 <_printf_i+0x148>
 800c970:	6823      	ldr	r3, [r4, #0]
 800c972:	07de      	lsls	r6, r3, #31
 800c974:	d508      	bpl.n	800c988 <_printf_i+0x148>
 800c976:	6923      	ldr	r3, [r4, #16]
 800c978:	6861      	ldr	r1, [r4, #4]
 800c97a:	4299      	cmp	r1, r3
 800c97c:	bfde      	ittt	le
 800c97e:	2330      	movle	r3, #48	; 0x30
 800c980:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c984:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c988:	1b52      	subs	r2, r2, r5
 800c98a:	6122      	str	r2, [r4, #16]
 800c98c:	f8cd a000 	str.w	sl, [sp]
 800c990:	464b      	mov	r3, r9
 800c992:	aa03      	add	r2, sp, #12
 800c994:	4621      	mov	r1, r4
 800c996:	4640      	mov	r0, r8
 800c998:	f7ff fee4 	bl	800c764 <_printf_common>
 800c99c:	3001      	adds	r0, #1
 800c99e:	d14a      	bne.n	800ca36 <_printf_i+0x1f6>
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9a4:	b004      	add	sp, #16
 800c9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	f043 0320 	orr.w	r3, r3, #32
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	4833      	ldr	r0, [pc, #204]	; (800ca80 <_printf_i+0x240>)
 800c9b4:	2778      	movs	r7, #120	; 0x78
 800c9b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	6829      	ldr	r1, [r5, #0]
 800c9be:	061f      	lsls	r7, r3, #24
 800c9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9c4:	d402      	bmi.n	800c9cc <_printf_i+0x18c>
 800c9c6:	065f      	lsls	r7, r3, #25
 800c9c8:	bf48      	it	mi
 800c9ca:	b2b6      	uxthmi	r6, r6
 800c9cc:	07df      	lsls	r7, r3, #31
 800c9ce:	bf48      	it	mi
 800c9d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9d4:	6029      	str	r1, [r5, #0]
 800c9d6:	bf48      	it	mi
 800c9d8:	6023      	strmi	r3, [r4, #0]
 800c9da:	b91e      	cbnz	r6, 800c9e4 <_printf_i+0x1a4>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	f023 0320 	bic.w	r3, r3, #32
 800c9e2:	6023      	str	r3, [r4, #0]
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	e7a7      	b.n	800c938 <_printf_i+0xf8>
 800c9e8:	4824      	ldr	r0, [pc, #144]	; (800ca7c <_printf_i+0x23c>)
 800c9ea:	e7e4      	b.n	800c9b6 <_printf_i+0x176>
 800c9ec:	4615      	mov	r5, r2
 800c9ee:	e7bd      	b.n	800c96c <_printf_i+0x12c>
 800c9f0:	682b      	ldr	r3, [r5, #0]
 800c9f2:	6826      	ldr	r6, [r4, #0]
 800c9f4:	6961      	ldr	r1, [r4, #20]
 800c9f6:	1d18      	adds	r0, r3, #4
 800c9f8:	6028      	str	r0, [r5, #0]
 800c9fa:	0635      	lsls	r5, r6, #24
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	d501      	bpl.n	800ca04 <_printf_i+0x1c4>
 800ca00:	6019      	str	r1, [r3, #0]
 800ca02:	e002      	b.n	800ca0a <_printf_i+0x1ca>
 800ca04:	0670      	lsls	r0, r6, #25
 800ca06:	d5fb      	bpl.n	800ca00 <_printf_i+0x1c0>
 800ca08:	8019      	strh	r1, [r3, #0]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	6123      	str	r3, [r4, #16]
 800ca0e:	4615      	mov	r5, r2
 800ca10:	e7bc      	b.n	800c98c <_printf_i+0x14c>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	1d1a      	adds	r2, r3, #4
 800ca16:	602a      	str	r2, [r5, #0]
 800ca18:	681d      	ldr	r5, [r3, #0]
 800ca1a:	6862      	ldr	r2, [r4, #4]
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4628      	mov	r0, r5
 800ca20:	f7f3 fbb6 	bl	8000190 <memchr>
 800ca24:	b108      	cbz	r0, 800ca2a <_printf_i+0x1ea>
 800ca26:	1b40      	subs	r0, r0, r5
 800ca28:	6060      	str	r0, [r4, #4]
 800ca2a:	6863      	ldr	r3, [r4, #4]
 800ca2c:	6123      	str	r3, [r4, #16]
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca34:	e7aa      	b.n	800c98c <_printf_i+0x14c>
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	462a      	mov	r2, r5
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	47d0      	blx	sl
 800ca40:	3001      	adds	r0, #1
 800ca42:	d0ad      	beq.n	800c9a0 <_printf_i+0x160>
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	079b      	lsls	r3, r3, #30
 800ca48:	d413      	bmi.n	800ca72 <_printf_i+0x232>
 800ca4a:	68e0      	ldr	r0, [r4, #12]
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	4298      	cmp	r0, r3
 800ca50:	bfb8      	it	lt
 800ca52:	4618      	movlt	r0, r3
 800ca54:	e7a6      	b.n	800c9a4 <_printf_i+0x164>
 800ca56:	2301      	movs	r3, #1
 800ca58:	4632      	mov	r2, r6
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	4640      	mov	r0, r8
 800ca5e:	47d0      	blx	sl
 800ca60:	3001      	adds	r0, #1
 800ca62:	d09d      	beq.n	800c9a0 <_printf_i+0x160>
 800ca64:	3501      	adds	r5, #1
 800ca66:	68e3      	ldr	r3, [r4, #12]
 800ca68:	9903      	ldr	r1, [sp, #12]
 800ca6a:	1a5b      	subs	r3, r3, r1
 800ca6c:	42ab      	cmp	r3, r5
 800ca6e:	dcf2      	bgt.n	800ca56 <_printf_i+0x216>
 800ca70:	e7eb      	b.n	800ca4a <_printf_i+0x20a>
 800ca72:	2500      	movs	r5, #0
 800ca74:	f104 0619 	add.w	r6, r4, #25
 800ca78:	e7f5      	b.n	800ca66 <_printf_i+0x226>
 800ca7a:	bf00      	nop
 800ca7c:	0800e845 	.word	0x0800e845
 800ca80:	0800e856 	.word	0x0800e856

0800ca84 <__sflush_r>:
 800ca84:	898a      	ldrh	r2, [r1, #12]
 800ca86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	0710      	lsls	r0, r2, #28
 800ca8e:	460c      	mov	r4, r1
 800ca90:	d458      	bmi.n	800cb44 <__sflush_r+0xc0>
 800ca92:	684b      	ldr	r3, [r1, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	dc05      	bgt.n	800caa4 <__sflush_r+0x20>
 800ca98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	dc02      	bgt.n	800caa4 <__sflush_r+0x20>
 800ca9e:	2000      	movs	r0, #0
 800caa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caa6:	2e00      	cmp	r6, #0
 800caa8:	d0f9      	beq.n	800ca9e <__sflush_r+0x1a>
 800caaa:	2300      	movs	r3, #0
 800caac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cab0:	682f      	ldr	r7, [r5, #0]
 800cab2:	6a21      	ldr	r1, [r4, #32]
 800cab4:	602b      	str	r3, [r5, #0]
 800cab6:	d032      	beq.n	800cb1e <__sflush_r+0x9a>
 800cab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	075a      	lsls	r2, r3, #29
 800cabe:	d505      	bpl.n	800cacc <__sflush_r+0x48>
 800cac0:	6863      	ldr	r3, [r4, #4]
 800cac2:	1ac0      	subs	r0, r0, r3
 800cac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cac6:	b10b      	cbz	r3, 800cacc <__sflush_r+0x48>
 800cac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800caca:	1ac0      	subs	r0, r0, r3
 800cacc:	2300      	movs	r3, #0
 800cace:	4602      	mov	r2, r0
 800cad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad2:	6a21      	ldr	r1, [r4, #32]
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b0      	blx	r6
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	d106      	bne.n	800caec <__sflush_r+0x68>
 800cade:	6829      	ldr	r1, [r5, #0]
 800cae0:	291d      	cmp	r1, #29
 800cae2:	d82b      	bhi.n	800cb3c <__sflush_r+0xb8>
 800cae4:	4a29      	ldr	r2, [pc, #164]	; (800cb8c <__sflush_r+0x108>)
 800cae6:	410a      	asrs	r2, r1
 800cae8:	07d6      	lsls	r6, r2, #31
 800caea:	d427      	bmi.n	800cb3c <__sflush_r+0xb8>
 800caec:	2200      	movs	r2, #0
 800caee:	6062      	str	r2, [r4, #4]
 800caf0:	04d9      	lsls	r1, r3, #19
 800caf2:	6922      	ldr	r2, [r4, #16]
 800caf4:	6022      	str	r2, [r4, #0]
 800caf6:	d504      	bpl.n	800cb02 <__sflush_r+0x7e>
 800caf8:	1c42      	adds	r2, r0, #1
 800cafa:	d101      	bne.n	800cb00 <__sflush_r+0x7c>
 800cafc:	682b      	ldr	r3, [r5, #0]
 800cafe:	b903      	cbnz	r3, 800cb02 <__sflush_r+0x7e>
 800cb00:	6560      	str	r0, [r4, #84]	; 0x54
 800cb02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb04:	602f      	str	r7, [r5, #0]
 800cb06:	2900      	cmp	r1, #0
 800cb08:	d0c9      	beq.n	800ca9e <__sflush_r+0x1a>
 800cb0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	d002      	beq.n	800cb18 <__sflush_r+0x94>
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7ff fbea 	bl	800c2ec <_free_r>
 800cb18:	2000      	movs	r0, #0
 800cb1a:	6360      	str	r0, [r4, #52]	; 0x34
 800cb1c:	e7c0      	b.n	800caa0 <__sflush_r+0x1c>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b0      	blx	r6
 800cb24:	1c41      	adds	r1, r0, #1
 800cb26:	d1c8      	bne.n	800caba <__sflush_r+0x36>
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0c5      	beq.n	800caba <__sflush_r+0x36>
 800cb2e:	2b1d      	cmp	r3, #29
 800cb30:	d001      	beq.n	800cb36 <__sflush_r+0xb2>
 800cb32:	2b16      	cmp	r3, #22
 800cb34:	d101      	bne.n	800cb3a <__sflush_r+0xb6>
 800cb36:	602f      	str	r7, [r5, #0]
 800cb38:	e7b1      	b.n	800ca9e <__sflush_r+0x1a>
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb40:	81a3      	strh	r3, [r4, #12]
 800cb42:	e7ad      	b.n	800caa0 <__sflush_r+0x1c>
 800cb44:	690f      	ldr	r7, [r1, #16]
 800cb46:	2f00      	cmp	r7, #0
 800cb48:	d0a9      	beq.n	800ca9e <__sflush_r+0x1a>
 800cb4a:	0793      	lsls	r3, r2, #30
 800cb4c:	680e      	ldr	r6, [r1, #0]
 800cb4e:	bf08      	it	eq
 800cb50:	694b      	ldreq	r3, [r1, #20]
 800cb52:	600f      	str	r7, [r1, #0]
 800cb54:	bf18      	it	ne
 800cb56:	2300      	movne	r3, #0
 800cb58:	eba6 0807 	sub.w	r8, r6, r7
 800cb5c:	608b      	str	r3, [r1, #8]
 800cb5e:	f1b8 0f00 	cmp.w	r8, #0
 800cb62:	dd9c      	ble.n	800ca9e <__sflush_r+0x1a>
 800cb64:	6a21      	ldr	r1, [r4, #32]
 800cb66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb68:	4643      	mov	r3, r8
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b0      	blx	r6
 800cb70:	2800      	cmp	r0, #0
 800cb72:	dc06      	bgt.n	800cb82 <__sflush_r+0xfe>
 800cb74:	89a3      	ldrh	r3, [r4, #12]
 800cb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb80:	e78e      	b.n	800caa0 <__sflush_r+0x1c>
 800cb82:	4407      	add	r7, r0
 800cb84:	eba8 0800 	sub.w	r8, r8, r0
 800cb88:	e7e9      	b.n	800cb5e <__sflush_r+0xda>
 800cb8a:	bf00      	nop
 800cb8c:	dfbffffe 	.word	0xdfbffffe

0800cb90 <_fflush_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	690b      	ldr	r3, [r1, #16]
 800cb94:	4605      	mov	r5, r0
 800cb96:	460c      	mov	r4, r1
 800cb98:	b913      	cbnz	r3, 800cba0 <_fflush_r+0x10>
 800cb9a:	2500      	movs	r5, #0
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	bd38      	pop	{r3, r4, r5, pc}
 800cba0:	b118      	cbz	r0, 800cbaa <_fflush_r+0x1a>
 800cba2:	6a03      	ldr	r3, [r0, #32]
 800cba4:	b90b      	cbnz	r3, 800cbaa <_fflush_r+0x1a>
 800cba6:	f7ff f97b 	bl	800bea0 <__sinit>
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0f3      	beq.n	800cb9a <_fflush_r+0xa>
 800cbb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbb4:	07d0      	lsls	r0, r2, #31
 800cbb6:	d404      	bmi.n	800cbc2 <_fflush_r+0x32>
 800cbb8:	0599      	lsls	r1, r3, #22
 800cbba:	d402      	bmi.n	800cbc2 <_fflush_r+0x32>
 800cbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbbe:	f7ff fb84 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f7ff ff5d 	bl	800ca84 <__sflush_r>
 800cbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbcc:	07da      	lsls	r2, r3, #31
 800cbce:	4605      	mov	r5, r0
 800cbd0:	d4e4      	bmi.n	800cb9c <_fflush_r+0xc>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	059b      	lsls	r3, r3, #22
 800cbd6:	d4e1      	bmi.n	800cb9c <_fflush_r+0xc>
 800cbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbda:	f7ff fb77 	bl	800c2cc <__retarget_lock_release_recursive>
 800cbde:	e7dd      	b.n	800cb9c <_fflush_r+0xc>

0800cbe0 <__swhatbuf_r>:
 800cbe0:	b570      	push	{r4, r5, r6, lr}
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	b096      	sub	sp, #88	; 0x58
 800cbec:	4615      	mov	r5, r2
 800cbee:	461e      	mov	r6, r3
 800cbf0:	da0d      	bge.n	800cc0e <__swhatbuf_r+0x2e>
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cbf8:	f04f 0100 	mov.w	r1, #0
 800cbfc:	bf0c      	ite	eq
 800cbfe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cc02:	2340      	movne	r3, #64	; 0x40
 800cc04:	2000      	movs	r0, #0
 800cc06:	6031      	str	r1, [r6, #0]
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	b016      	add	sp, #88	; 0x58
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	466a      	mov	r2, sp
 800cc10:	f000 f88a 	bl	800cd28 <_fstat_r>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	dbec      	blt.n	800cbf2 <__swhatbuf_r+0x12>
 800cc18:	9901      	ldr	r1, [sp, #4]
 800cc1a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cc1e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cc22:	4259      	negs	r1, r3
 800cc24:	4159      	adcs	r1, r3
 800cc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc2a:	e7eb      	b.n	800cc04 <__swhatbuf_r+0x24>

0800cc2c <__smakebuf_r>:
 800cc2c:	898b      	ldrh	r3, [r1, #12]
 800cc2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc30:	079d      	lsls	r5, r3, #30
 800cc32:	4606      	mov	r6, r0
 800cc34:	460c      	mov	r4, r1
 800cc36:	d507      	bpl.n	800cc48 <__smakebuf_r+0x1c>
 800cc38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	6123      	str	r3, [r4, #16]
 800cc40:	2301      	movs	r3, #1
 800cc42:	6163      	str	r3, [r4, #20]
 800cc44:	b002      	add	sp, #8
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
 800cc48:	ab01      	add	r3, sp, #4
 800cc4a:	466a      	mov	r2, sp
 800cc4c:	f7ff ffc8 	bl	800cbe0 <__swhatbuf_r>
 800cc50:	9900      	ldr	r1, [sp, #0]
 800cc52:	4605      	mov	r5, r0
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7ff fbb5 	bl	800c3c4 <_malloc_r>
 800cc5a:	b948      	cbnz	r0, 800cc70 <__smakebuf_r+0x44>
 800cc5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc60:	059a      	lsls	r2, r3, #22
 800cc62:	d4ef      	bmi.n	800cc44 <__smakebuf_r+0x18>
 800cc64:	f023 0303 	bic.w	r3, r3, #3
 800cc68:	f043 0302 	orr.w	r3, r3, #2
 800cc6c:	81a3      	strh	r3, [r4, #12]
 800cc6e:	e7e3      	b.n	800cc38 <__smakebuf_r+0xc>
 800cc70:	89a3      	ldrh	r3, [r4, #12]
 800cc72:	6020      	str	r0, [r4, #0]
 800cc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	9b00      	ldr	r3, [sp, #0]
 800cc7c:	6163      	str	r3, [r4, #20]
 800cc7e:	9b01      	ldr	r3, [sp, #4]
 800cc80:	6120      	str	r0, [r4, #16]
 800cc82:	b15b      	cbz	r3, 800cc9c <__smakebuf_r+0x70>
 800cc84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f000 f85f 	bl	800cd4c <_isatty_r>
 800cc8e:	b128      	cbz	r0, 800cc9c <__smakebuf_r+0x70>
 800cc90:	89a3      	ldrh	r3, [r4, #12]
 800cc92:	f023 0303 	bic.w	r3, r3, #3
 800cc96:	f043 0301 	orr.w	r3, r3, #1
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	89a3      	ldrh	r3, [r4, #12]
 800cc9e:	431d      	orrs	r5, r3
 800cca0:	81a5      	strh	r5, [r4, #12]
 800cca2:	e7cf      	b.n	800cc44 <__smakebuf_r+0x18>

0800cca4 <_putc_r>:
 800cca4:	b570      	push	{r4, r5, r6, lr}
 800cca6:	460d      	mov	r5, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	4606      	mov	r6, r0
 800ccac:	b118      	cbz	r0, 800ccb6 <_putc_r+0x12>
 800ccae:	6a03      	ldr	r3, [r0, #32]
 800ccb0:	b90b      	cbnz	r3, 800ccb6 <_putc_r+0x12>
 800ccb2:	f7ff f8f5 	bl	800bea0 <__sinit>
 800ccb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccb8:	07d8      	lsls	r0, r3, #31
 800ccba:	d405      	bmi.n	800ccc8 <_putc_r+0x24>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	0599      	lsls	r1, r3, #22
 800ccc0:	d402      	bmi.n	800ccc8 <_putc_r+0x24>
 800ccc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccc4:	f7ff fb01 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800ccc8:	68a3      	ldr	r3, [r4, #8]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	60a3      	str	r3, [r4, #8]
 800ccd0:	da05      	bge.n	800ccde <_putc_r+0x3a>
 800ccd2:	69a2      	ldr	r2, [r4, #24]
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	db12      	blt.n	800ccfe <_putc_r+0x5a>
 800ccd8:	b2eb      	uxtb	r3, r5
 800ccda:	2b0a      	cmp	r3, #10
 800ccdc:	d00f      	beq.n	800ccfe <_putc_r+0x5a>
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	1c5a      	adds	r2, r3, #1
 800cce2:	6022      	str	r2, [r4, #0]
 800cce4:	701d      	strb	r5, [r3, #0]
 800cce6:	b2ed      	uxtb	r5, r5
 800cce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccea:	07da      	lsls	r2, r3, #31
 800ccec:	d405      	bmi.n	800ccfa <_putc_r+0x56>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	059b      	lsls	r3, r3, #22
 800ccf2:	d402      	bmi.n	800ccfa <_putc_r+0x56>
 800ccf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccf6:	f7ff fae9 	bl	800c2cc <__retarget_lock_release_recursive>
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
 800ccfe:	4629      	mov	r1, r5
 800cd00:	4622      	mov	r2, r4
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff f9bb 	bl	800c07e <__swbuf_r>
 800cd08:	4605      	mov	r5, r0
 800cd0a:	e7ed      	b.n	800cce8 <_putc_r+0x44>

0800cd0c <strchr>:
 800cd0c:	b2c9      	uxtb	r1, r1
 800cd0e:	4603      	mov	r3, r0
 800cd10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd14:	b11a      	cbz	r2, 800cd1e <strchr+0x12>
 800cd16:	428a      	cmp	r2, r1
 800cd18:	d1f9      	bne.n	800cd0e <strchr+0x2>
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	4770      	bx	lr
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	bf18      	it	ne
 800cd22:	2300      	movne	r3, #0
 800cd24:	e7f9      	b.n	800cd1a <strchr+0xe>
	...

0800cd28 <_fstat_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d07      	ldr	r5, [pc, #28]	; (800cd48 <_fstat_r+0x20>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	4611      	mov	r1, r2
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	f7f5 fdc8 	bl	80028ca <_fstat>
 800cd3a:	1c43      	adds	r3, r0, #1
 800cd3c:	d102      	bne.n	800cd44 <_fstat_r+0x1c>
 800cd3e:	682b      	ldr	r3, [r5, #0]
 800cd40:	b103      	cbz	r3, 800cd44 <_fstat_r+0x1c>
 800cd42:	6023      	str	r3, [r4, #0]
 800cd44:	bd38      	pop	{r3, r4, r5, pc}
 800cd46:	bf00      	nop
 800cd48:	20001714 	.word	0x20001714

0800cd4c <_isatty_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	4d06      	ldr	r5, [pc, #24]	; (800cd68 <_isatty_r+0x1c>)
 800cd50:	2300      	movs	r3, #0
 800cd52:	4604      	mov	r4, r0
 800cd54:	4608      	mov	r0, r1
 800cd56:	602b      	str	r3, [r5, #0]
 800cd58:	f7f5 fdc7 	bl	80028ea <_isatty>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_isatty_r+0x1a>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_isatty_r+0x1a>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20001714 	.word	0x20001714

0800cd6c <_sbrk_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4d06      	ldr	r5, [pc, #24]	; (800cd88 <_sbrk_r+0x1c>)
 800cd70:	2300      	movs	r3, #0
 800cd72:	4604      	mov	r4, r0
 800cd74:	4608      	mov	r0, r1
 800cd76:	602b      	str	r3, [r5, #0]
 800cd78:	f7f5 fdd0 	bl	800291c <_sbrk>
 800cd7c:	1c43      	adds	r3, r0, #1
 800cd7e:	d102      	bne.n	800cd86 <_sbrk_r+0x1a>
 800cd80:	682b      	ldr	r3, [r5, #0]
 800cd82:	b103      	cbz	r3, 800cd86 <_sbrk_r+0x1a>
 800cd84:	6023      	str	r3, [r4, #0]
 800cd86:	bd38      	pop	{r3, r4, r5, pc}
 800cd88:	20001714 	.word	0x20001714

0800cd8c <_init>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr

0800cd98 <_fini>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	bf00      	nop
 800cd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd9e:	bc08      	pop	{r3}
 800cda0:	469e      	mov	lr, r3
 800cda2:	4770      	bx	lr
